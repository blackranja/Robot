
/home/josphat/particle4/firmware/target/2.3.0/electron/firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003060  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08083080  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000a0  20000000  08083084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000654  200000a0  200000a0  000300a0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  08083124  08083124  00023124  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  0808314c  0808314c  0002314c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f72e7  00000000  00000000  00023150  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000121bc  00000000  00000000  0011a437  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001ce8  00000000  00000000  0012c5f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00025925  00000000  00000000  0012e2db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00028225  00000000  00000000  00153c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000ac251  00000000  00000000  0017be25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00013413  00000000  00000000  00228076  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000041a0  00000000  00000000  0023b489  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004c48  00000000  00000000  0023f62c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f002 fea3 	bl	8082d7c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f002 feab 	bl	8082d98 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	08083084 	.word	0x08083084
 8080050:	200000a0 	.word	0x200000a0
 8080054:	200000a0 	.word	0x200000a0
 8080058:	200006f1 	.word	0x200006f1
 808005c:	200006f1 	.word	0x200006f1

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f001 faf3 	bl	808164c <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080066:	2500      	movs	r5, #0
 8080068:	4e05      	ldr	r6, [pc, #20]	; (8080080 <module_user_init+0x20>)
 808006a:	4c06      	ldr	r4, [pc, #24]	; (8080084 <module_user_init+0x24>)
 808006c:	1ba4      	subs	r4, r4, r6
 808006e:	08a4      	lsrs	r4, r4, #2
 8080070:	42a5      	cmp	r5, r4
 8080072:	d100      	bne.n	8080076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080076:	f856 3b04 	ldr.w	r3, [r6], #4
 808007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f7      	b.n	8080070 <module_user_init+0x10>
 8080080:	08083058 	.word	0x08083058
 8080084:	08083078 	.word	0x08083078

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b814 	b.w	80800b4 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 fa65 	bl	808055c <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 8080096:	f001 ba91 	b.w	80815bc <_post_loop>

0808009a <_Znaj>:
 808009a:	f000 bfd9 	b.w	8081050 <malloc>

0808009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 808009e:	f000 bfdf 	b.w	8081060 <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr
	...

080800b4 <setup>:

Servo myServo;
Servo myServo2;
// setup() runs once, when the device is first turned on.
void setup()
{
 80800b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  myServo.attach(D1);
 80800b6:	2400      	movs	r4, #0
 80800b8:	25b4      	movs	r5, #180	; 0xb4
 80800ba:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80800be:	e9cd 4500 	strd	r4, r5, [sp]
 80800c2:	f44f 7208 	mov.w	r2, #544	; 0x220
 80800c6:	2101      	movs	r1, #1
 80800c8:	4843      	ldr	r0, [pc, #268]	; (80801d8 <setup+0x124>)
 80800ca:	f001 fc19 	bl	8081900 <_ZN5Servo6attachEtttss>
  myServo2.attach(D0);
 80800ce:	e9cd 4500 	strd	r4, r5, [sp]
 80800d2:	4621      	mov	r1, r4

  stepper1.setMaxSpeed(200);
 80800d4:	4d41      	ldr	r5, [pc, #260]	; (80801dc <setup+0x128>)
 80800d6:	4c42      	ldr	r4, [pc, #264]	; (80801e0 <setup+0x12c>)
  myServo2.attach(D0);
 80800d8:	f44f 7208 	mov.w	r2, #544	; 0x220
 80800dc:	f44f 6316 	mov.w	r3, #2400	; 0x960
  stepper1.setAcceleration(50.0);
 80800e0:	4e40      	ldr	r6, [pc, #256]	; (80801e4 <setup+0x130>)
  myServo2.attach(D0);
 80800e2:	4841      	ldr	r0, [pc, #260]	; (80801e8 <setup+0x134>)
 80800e4:	f001 fc0c 	bl	8081900 <_ZN5Servo6attachEtttss>
  stepper1.setMaxSpeed(200);
 80800e8:	4621      	mov	r1, r4
 80800ea:	4628      	mov	r0, r5
 80800ec:	f000 fd72 	bl	8080bd4 <_ZN12AccelStepper11setMaxSpeedEf>
  stepper1.setAcceleration(50.0);
 80800f0:	4631      	mov	r1, r6
 80800f2:	4628      	mov	r0, r5
 80800f4:	f000 fd9e 	bl	8080c34 <_ZN12AccelStepper15setAccelerationEf>
  stepper1.setSpeed(200);
 80800f8:	4628      	mov	r0, r5

  stepper2.setMaxSpeed(200);
 80800fa:	4d3c      	ldr	r5, [pc, #240]	; (80801ec <setup+0x138>)
  stepper1.setSpeed(200);
 80800fc:	4621      	mov	r1, r4
 80800fe:	f000 fdab 	bl	8080c58 <_ZN12AccelStepper8setSpeedEf>
  stepper2.setMaxSpeed(200);
 8080102:	4621      	mov	r1, r4
 8080104:	4628      	mov	r0, r5
 8080106:	f000 fd65 	bl	8080bd4 <_ZN12AccelStepper11setMaxSpeedEf>
  stepper2.setAcceleration(50.0);
 808010a:	4631      	mov	r1, r6
 808010c:	4628      	mov	r0, r5
 808010e:	f000 fd91 	bl	8080c34 <_ZN12AccelStepper15setAccelerationEf>
  stepper2.setSpeed(200);
 8080112:	4621      	mov	r1, r4
 8080114:	4628      	mov	r0, r5
 8080116:	f000 fd9f 	bl	8080c58 <_ZN12AccelStepper8setSpeedEf>
  pinMode(alarmPin, OUTPUT);
 808011a:	4b35      	ldr	r3, [pc, #212]	; (80801f0 <setup+0x13c>)
 808011c:	2101      	movs	r1, #1
 808011e:	8818      	ldrh	r0, [r3, #0]
 8080120:	f001 fcb4 	bl	8081a8c <pinMode>
  pinMode(triggerPin, OUTPUT);
 8080124:	4b33      	ldr	r3, [pc, #204]	; (80801f4 <setup+0x140>)
 8080126:	2101      	movs	r1, #1
 8080128:	8818      	ldrh	r0, [r3, #0]
 808012a:	f001 fcaf 	bl	8081a8c <pinMode>
  pinMode(echoPin, OUTPUT);
 808012e:	4b32      	ldr	r3, [pc, #200]	; (80801f8 <setup+0x144>)
 8080130:	2101      	movs	r1, #1
 8080132:	8818      	ldrh	r0, [r3, #0]
 8080134:	f001 fcaa 	bl	8081a8c <pinMode>
  pinMode(statusPin, OUTPUT);
 8080138:	4b30      	ldr	r3, [pc, #192]	; (80801fc <setup+0x148>)
 808013a:	2101      	movs	r1, #1
 808013c:	8818      	ldrh	r0, [r3, #0]
 808013e:	f001 fca5 	bl	8081a8c <pinMode>
  pinMode(statusPin2, OUTPUT);
 8080142:	4b2f      	ldr	r3, [pc, #188]	; (8080200 <setup+0x14c>)
 8080144:	2101      	movs	r1, #1
 8080146:	8818      	ldrh	r0, [r3, #0]
 8080148:	f001 fca0 	bl	8081a8c <pinMode>
  pinMode(statusPin3, OUTPUT);
 808014c:	4b2d      	ldr	r3, [pc, #180]	; (8080204 <setup+0x150>)
 808014e:	2101      	movs	r1, #1
 8080150:	8818      	ldrh	r0, [r3, #0]
 8080152:	f001 fc9b 	bl	8081a8c <pinMode>
  pinMode(C5, OUTPUT);
 8080156:	2101      	movs	r1, #1
 8080158:	2023      	movs	r0, #35	; 0x23
 808015a:	f001 fc97 	bl	8081a8c <pinMode>
  pinMode(C4, OUTPUT);
 808015e:	2101      	movs	r1, #1
 8080160:	2022      	movs	r0, #34	; 0x22
 8080162:	f001 fc93 	bl	8081a8c <pinMode>
  pinMode(C3, OUTPUT);
 8080166:	2101      	movs	r1, #1
 8080168:	2021      	movs	r0, #33	; 0x21
 808016a:	f001 fc8f 	bl	8081a8c <pinMode>
  pinMode(C2, OUTPUT);
 808016e:	2101      	movs	r1, #1
 8080170:	2020      	movs	r0, #32
 8080172:	f001 fc8b 	bl	8081a8c <pinMode>
  pinMode(C1, OUTPUT);
 8080176:	2101      	movs	r1, #1
 8080178:	201f      	movs	r0, #31
 808017a:	f001 fc87 	bl	8081a8c <pinMode>
  pinMode(C0, OUTPUT);
 808017e:	2101      	movs	r1, #1
 8080180:	201e      	movs	r0, #30
 8080182:	f001 fc83 	bl	8081a8c <pinMode>
  pinMode(A0, OUTPUT);
 8080186:	2101      	movs	r1, #1
 8080188:	200a      	movs	r0, #10
 808018a:	f001 fc7f 	bl	8081a8c <pinMode>
  pinMode(A1, OUTPUT);
 808018e:	2101      	movs	r1, #1
 8080190:	200b      	movs	r0, #11
 8080192:	f001 fc7b 	bl	8081a8c <pinMode>
  //pinMode(D1, OUTPUT);
  //pinMode(D0, OUTPUT);
  pinMode(enA, OUTPUT);
 8080196:	4b1c      	ldr	r3, [pc, #112]	; (8080208 <setup+0x154>)
 8080198:	2101      	movs	r1, #1
 808019a:	8818      	ldrh	r0, [r3, #0]
 808019c:	f001 fc76 	bl	8081a8c <pinMode>
  pinMode(enB, OUTPUT);
 80801a0:	4b1a      	ldr	r3, [pc, #104]	; (808020c <setup+0x158>)
 80801a2:	2101      	movs	r1, #1
 80801a4:	8818      	ldrh	r0, [r3, #0]
 80801a6:	f001 fc71 	bl	8081a8c <pinMode>
  pinMode(in1, OUTPUT);
 80801aa:	4b19      	ldr	r3, [pc, #100]	; (8080210 <setup+0x15c>)
 80801ac:	2101      	movs	r1, #1
 80801ae:	8818      	ldrh	r0, [r3, #0]
 80801b0:	f001 fc6c 	bl	8081a8c <pinMode>
  pinMode(in2, OUTPUT);
 80801b4:	4b17      	ldr	r3, [pc, #92]	; (8080214 <setup+0x160>)
 80801b6:	2101      	movs	r1, #1
 80801b8:	8818      	ldrh	r0, [r3, #0]
 80801ba:	f001 fc67 	bl	8081a8c <pinMode>
  pinMode(in3, OUTPUT);
 80801be:	4b16      	ldr	r3, [pc, #88]	; (8080218 <setup+0x164>)
 80801c0:	2101      	movs	r1, #1
 80801c2:	8818      	ldrh	r0, [r3, #0]
 80801c4:	f001 fc62 	bl	8081a8c <pinMode>
  pinMode(in4, OUTPUT);
 80801c8:	2101      	movs	r1, #1
 80801ca:	4b14      	ldr	r3, [pc, #80]	; (808021c <setup+0x168>)
 80801cc:	8818      	ldrh	r0, [r3, #0]
  // Put initialization like pinMode and begin functions here.
}
 80801ce:	b002      	add	sp, #8
 80801d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  pinMode(in4, OUTPUT);
 80801d4:	f001 bc5a 	b.w	8081a8c <pinMode>
 80801d8:	200000a0 	.word	0x200000a0
 80801dc:	200000c0 	.word	0x200000c0
 80801e0:	43480000 	.word	0x43480000
 80801e4:	42480000 	.word	0x42480000
 80801e8:	200000b0 	.word	0x200000b0
 80801ec:	20000114 	.word	0x20000114
 80801f0:	20000000 	.word	0x20000000
 80801f4:	2000002c 	.word	0x2000002c
 80801f8:	20000004 	.word	0x20000004
 80801fc:	20000020 	.word	0x20000020
 8080200:	20000024 	.word	0x20000024
 8080204:	20000028 	.word	0x20000028
 8080208:	20000008 	.word	0x20000008
 808020c:	2000000c 	.word	0x2000000c
 8080210:	20000010 	.word	0x20000010
 8080214:	20000014 	.word	0x20000014
 8080218:	20000018 	.word	0x20000018
 808021c:	2000001c 	.word	0x2000001c

08080220 <_Z9statusOnev>:
void statusOne()
{
 8080220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080224:	2405      	movs	r4, #5
  for (int i = 0; i < 5; i++)
  {
    digitalWrite(alarmPin, HIGH);
 8080226:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8080294 <_Z9statusOnev+0x74>
    digitalWrite(statusPin, HIGH);
 808022a:	4f17      	ldr	r7, [pc, #92]	; (8080288 <_Z9statusOnev+0x68>)
    digitalWrite(alarmPin, HIGH);
 808022c:	2101      	movs	r1, #1
 808022e:	f8b8 0000 	ldrh.w	r0, [r8]
    digitalWrite(statusPin2, HIGH);
 8080232:	4e16      	ldr	r6, [pc, #88]	; (808028c <_Z9statusOnev+0x6c>)
    digitalWrite(alarmPin, HIGH);
 8080234:	f001 fc3b 	bl	8081aae <digitalWrite>
    digitalWrite(statusPin3, HIGH);
 8080238:	4d15      	ldr	r5, [pc, #84]	; (8080290 <_Z9statusOnev+0x70>)
    digitalWrite(statusPin, HIGH);
 808023a:	2101      	movs	r1, #1
 808023c:	8838      	ldrh	r0, [r7, #0]
 808023e:	f001 fc36 	bl	8081aae <digitalWrite>
    digitalWrite(statusPin2, HIGH);
 8080242:	2101      	movs	r1, #1
 8080244:	8830      	ldrh	r0, [r6, #0]
 8080246:	f001 fc32 	bl	8081aae <digitalWrite>
    digitalWrite(statusPin3, HIGH);
 808024a:	2101      	movs	r1, #1
 808024c:	8828      	ldrh	r0, [r5, #0]
 808024e:	f001 fc2e 	bl	8081aae <digitalWrite>
    delay(200);
 8080252:	20c8      	movs	r0, #200	; 0xc8
 8080254:	f001 f96c 	bl	8081530 <delay>
    digitalWrite(alarmPin, LOW);
 8080258:	2100      	movs	r1, #0
 808025a:	f8b8 0000 	ldrh.w	r0, [r8]
 808025e:	f001 fc26 	bl	8081aae <digitalWrite>
    digitalWrite(statusPin, LOW);
 8080262:	2100      	movs	r1, #0
 8080264:	8838      	ldrh	r0, [r7, #0]
 8080266:	f001 fc22 	bl	8081aae <digitalWrite>
    digitalWrite(statusPin2, LOW);
 808026a:	2100      	movs	r1, #0
 808026c:	8830      	ldrh	r0, [r6, #0]
 808026e:	f001 fc1e 	bl	8081aae <digitalWrite>
    digitalWrite(statusPin3, LOW);
 8080272:	2100      	movs	r1, #0
 8080274:	8828      	ldrh	r0, [r5, #0]
 8080276:	f001 fc1a 	bl	8081aae <digitalWrite>
    delay(200);
 808027a:	20c8      	movs	r0, #200	; 0xc8
 808027c:	f001 f958 	bl	8081530 <delay>
  for (int i = 0; i < 5; i++)
 8080280:	3c01      	subs	r4, #1
 8080282:	d1d2      	bne.n	808022a <_Z9statusOnev+0xa>
  }
}
 8080284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8080288:	20000020 	.word	0x20000020
 808028c:	20000024 	.word	0x20000024
 8080290:	20000028 	.word	0x20000028
 8080294:	20000000 	.word	0x20000000

08080298 <_Z9statusTwov>:
void statusTwo()
{
 8080298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808029c:	2405      	movs	r4, #5
  for (int i = 0; i < 5; i++)
  {
    digitalWrite(alarmPin, HIGH);
 808029e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 808030c <_Z9statusTwov+0x74>
    digitalWrite(statusPin, LOW);
 80802a2:	4f17      	ldr	r7, [pc, #92]	; (8080300 <_Z9statusTwov+0x68>)
    digitalWrite(alarmPin, HIGH);
 80802a4:	2101      	movs	r1, #1
 80802a6:	f8b8 0000 	ldrh.w	r0, [r8]
    digitalWrite(statusPin2, HIGH);
 80802aa:	4e16      	ldr	r6, [pc, #88]	; (8080304 <_Z9statusTwov+0x6c>)
    digitalWrite(alarmPin, HIGH);
 80802ac:	f001 fbff 	bl	8081aae <digitalWrite>
    digitalWrite(statusPin3, LOW);
 80802b0:	4d15      	ldr	r5, [pc, #84]	; (8080308 <_Z9statusTwov+0x70>)
    digitalWrite(statusPin, LOW);
 80802b2:	2100      	movs	r1, #0
 80802b4:	8838      	ldrh	r0, [r7, #0]
 80802b6:	f001 fbfa 	bl	8081aae <digitalWrite>
    digitalWrite(statusPin2, HIGH);
 80802ba:	2101      	movs	r1, #1
 80802bc:	8830      	ldrh	r0, [r6, #0]
 80802be:	f001 fbf6 	bl	8081aae <digitalWrite>
    digitalWrite(statusPin3, LOW);
 80802c2:	2100      	movs	r1, #0
 80802c4:	8828      	ldrh	r0, [r5, #0]
 80802c6:	f001 fbf2 	bl	8081aae <digitalWrite>
    delay(200);
 80802ca:	20c8      	movs	r0, #200	; 0xc8
 80802cc:	f001 f930 	bl	8081530 <delay>
    digitalWrite(alarmPin, LOW);
 80802d0:	2100      	movs	r1, #0
 80802d2:	f8b8 0000 	ldrh.w	r0, [r8]
 80802d6:	f001 fbea 	bl	8081aae <digitalWrite>
    digitalWrite(statusPin, HIGH);
 80802da:	2101      	movs	r1, #1
 80802dc:	8838      	ldrh	r0, [r7, #0]
 80802de:	f001 fbe6 	bl	8081aae <digitalWrite>
    digitalWrite(statusPin2, LOW);
 80802e2:	2100      	movs	r1, #0
 80802e4:	8830      	ldrh	r0, [r6, #0]
 80802e6:	f001 fbe2 	bl	8081aae <digitalWrite>
    digitalWrite(statusPin3, HIGH);
 80802ea:	2101      	movs	r1, #1
 80802ec:	8828      	ldrh	r0, [r5, #0]
 80802ee:	f001 fbde 	bl	8081aae <digitalWrite>
    delay(200);
 80802f2:	20c8      	movs	r0, #200	; 0xc8
 80802f4:	f001 f91c 	bl	8081530 <delay>
  for (int i = 0; i < 5; i++)
 80802f8:	3c01      	subs	r4, #1
 80802fa:	d1d2      	bne.n	80802a2 <_Z9statusTwov+0xa>
  }
}
 80802fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8080300:	20000020 	.word	0x20000020
 8080304:	20000024 	.word	0x20000024
 8080308:	20000028 	.word	0x20000028
 808030c:	20000000 	.word	0x20000000

08080310 <_Z8closeArmv>:
void closeArm()
{
 8080310:	b538      	push	{r3, r4, r5, lr}

  for (int i = 70; i > 0; i--)
 8080312:	2446      	movs	r4, #70	; 0x46
  {
    myServo2.write(i);
 8080314:	4d05      	ldr	r5, [pc, #20]	; (808032c <_Z8closeArmv+0x1c>)
 8080316:	4621      	mov	r1, r4
 8080318:	4628      	mov	r0, r5
 808031a:	f001 fab4 	bl	8081886 <_ZN5Servo5writeEi>
    delay(20);
 808031e:	2014      	movs	r0, #20
 8080320:	f001 f906 	bl	8081530 <delay>
  for (int i = 70; i > 0; i--)
 8080324:	3c01      	subs	r4, #1
 8080326:	d1f6      	bne.n	8080316 <_Z8closeArmv+0x6>
  }
}
 8080328:	bd38      	pop	{r3, r4, r5, pc}
 808032a:	bf00      	nop
 808032c:	200000b0 	.word	0x200000b0

08080330 <_Z7openArmv>:
void openArm()
{
 8080330:	b538      	push	{r3, r4, r5, lr}

  for (int i = 0; i < 70; i++)
 8080332:	2400      	movs	r4, #0
  {
    myServo2.write(i);
 8080334:	4d05      	ldr	r5, [pc, #20]	; (808034c <_Z7openArmv+0x1c>)
 8080336:	4621      	mov	r1, r4
 8080338:	4628      	mov	r0, r5
 808033a:	f001 faa4 	bl	8081886 <_ZN5Servo5writeEi>
  for (int i = 0; i < 70; i++)
 808033e:	3401      	adds	r4, #1
    delay(20);
 8080340:	2014      	movs	r0, #20
 8080342:	f001 f8f5 	bl	8081530 <delay>
  for (int i = 0; i < 70; i++)
 8080346:	2c46      	cmp	r4, #70	; 0x46
 8080348:	d1f5      	bne.n	8080336 <_Z7openArmv+0x6>
  }
}
 808034a:	bd38      	pop	{r3, r4, r5, pc}
 808034c:	200000b0 	.word	0x200000b0

08080350 <_Z11turrentLeftv>:
void turrentLeft()
{
 8080350:	b538      	push	{r3, r4, r5, lr}
  for (int i = 90; i > 0; i--)
 8080352:	245a      	movs	r4, #90	; 0x5a
  {
    myServo.write(i);
 8080354:	4d05      	ldr	r5, [pc, #20]	; (808036c <_Z11turrentLeftv+0x1c>)
 8080356:	4621      	mov	r1, r4
 8080358:	4628      	mov	r0, r5
 808035a:	f001 fa94 	bl	8081886 <_ZN5Servo5writeEi>
    delay(20);
 808035e:	2014      	movs	r0, #20
 8080360:	f001 f8e6 	bl	8081530 <delay>
  for (int i = 90; i > 0; i--)
 8080364:	3c01      	subs	r4, #1
 8080366:	d1f6      	bne.n	8080356 <_Z11turrentLeftv+0x6>
  }
}
 8080368:	bd38      	pop	{r3, r4, r5, pc}
 808036a:	bf00      	nop
 808036c:	200000a0 	.word	0x200000a0

08080370 <_Z13turrentCenterv>:
void turrentCenter()
{
 8080370:	b538      	push	{r3, r4, r5, lr}
  for (int i = 0; i < 90; i++)
 8080372:	2400      	movs	r4, #0
  {
    myServo.write(i);
 8080374:	4d05      	ldr	r5, [pc, #20]	; (808038c <_Z13turrentCenterv+0x1c>)
 8080376:	4621      	mov	r1, r4
 8080378:	4628      	mov	r0, r5
 808037a:	f001 fa84 	bl	8081886 <_ZN5Servo5writeEi>
  for (int i = 0; i < 90; i++)
 808037e:	3401      	adds	r4, #1
    delay(20);
 8080380:	2014      	movs	r0, #20
 8080382:	f001 f8d5 	bl	8081530 <delay>
  for (int i = 0; i < 90; i++)
 8080386:	2c5a      	cmp	r4, #90	; 0x5a
 8080388:	d1f5      	bne.n	8080376 <_Z13turrentCenterv+0x6>
  }
}
 808038a:	bd38      	pop	{r3, r4, r5, pc}
 808038c:	200000a0 	.word	0x200000a0

08080390 <_Z12turrentRightv>:
void turrentRight()
{
 8080390:	b538      	push	{r3, r4, r5, lr}
  for (int i = 90; i < 180; i++)
 8080392:	245a      	movs	r4, #90	; 0x5a
  {
    myServo.write(i);
 8080394:	4d05      	ldr	r5, [pc, #20]	; (80803ac <_Z12turrentRightv+0x1c>)
 8080396:	4621      	mov	r1, r4
 8080398:	4628      	mov	r0, r5
 808039a:	f001 fa74 	bl	8081886 <_ZN5Servo5writeEi>
  for (int i = 90; i < 180; i++)
 808039e:	3401      	adds	r4, #1
    delay(20);
 80803a0:	2014      	movs	r0, #20
 80803a2:	f001 f8c5 	bl	8081530 <delay>
  for (int i = 90; i < 180; i++)
 80803a6:	2cb4      	cmp	r4, #180	; 0xb4
 80803a8:	d1f5      	bne.n	8080396 <_Z12turrentRightv+0x6>
  }
}
 80803aa:	bd38      	pop	{r3, r4, r5, pc}
 80803ac:	200000a0 	.word	0x200000a0

080803b0 <_Z9lowerArm1v>:
void lowerArm1()
{
 80803b0:	b510      	push	{r4, lr}
  stepper1.moveTo(-200);
 80803b2:	4c05      	ldr	r4, [pc, #20]	; (80803c8 <_Z9lowerArm1v+0x18>)
 80803b4:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 80803b8:	4620      	mov	r0, r4
 80803ba:	f000 fb73 	bl	8080aa4 <_ZN12AccelStepper6moveToEl>
  stepper1.runToPosition();
 80803be:	4620      	mov	r0, r4
}
 80803c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stepper1.runToPosition();
 80803c4:	f000 bc88 	b.w	8080cd8 <_ZN12AccelStepper13runToPositionEv>
 80803c8:	200000c0 	.word	0x200000c0

080803cc <_Z9lowerArm2v>:
void lowerArm2()
{
 80803cc:	b510      	push	{r4, lr}
  stepper2.moveTo(200);
 80803ce:	4c05      	ldr	r4, [pc, #20]	; (80803e4 <_Z9lowerArm2v+0x18>)
 80803d0:	21c8      	movs	r1, #200	; 0xc8
 80803d2:	4620      	mov	r0, r4
 80803d4:	f000 fb66 	bl	8080aa4 <_ZN12AccelStepper6moveToEl>
  stepper2.runToPosition();
 80803d8:	4620      	mov	r0, r4
}
 80803da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stepper2.runToPosition();
 80803de:	f000 bc7b 	b.w	8080cd8 <_ZN12AccelStepper13runToPositionEv>
 80803e2:	bf00      	nop
 80803e4:	20000114 	.word	0x20000114

080803e8 <_Z8riseArm1v>:
void riseArm1()
{
 80803e8:	b510      	push	{r4, lr}
  stepper1.moveTo(200);
 80803ea:	4c05      	ldr	r4, [pc, #20]	; (8080400 <_Z8riseArm1v+0x18>)
 80803ec:	21c8      	movs	r1, #200	; 0xc8
 80803ee:	4620      	mov	r0, r4
 80803f0:	f000 fb58 	bl	8080aa4 <_ZN12AccelStepper6moveToEl>
  stepper1.runToPosition();
 80803f4:	4620      	mov	r0, r4
}
 80803f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stepper1.runToPosition();
 80803fa:	f000 bc6d 	b.w	8080cd8 <_ZN12AccelStepper13runToPositionEv>
 80803fe:	bf00      	nop
 8080400:	200000c0 	.word	0x200000c0

08080404 <_Z8riseArm2v>:
void riseArm2()
{
 8080404:	b510      	push	{r4, lr}
  stepper2.moveTo(-200);
 8080406:	4c05      	ldr	r4, [pc, #20]	; (808041c <_Z8riseArm2v+0x18>)
 8080408:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 808040c:	4620      	mov	r0, r4
 808040e:	f000 fb49 	bl	8080aa4 <_ZN12AccelStepper6moveToEl>
  stepper2.runToPosition();
 8080412:	4620      	mov	r0, r4
}
 8080414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stepper2.runToPosition();
 8080418:	f000 bc5e 	b.w	8080cd8 <_ZN12AccelStepper13runToPositionEv>
 808041c:	20000114 	.word	0x20000114

08080420 <_Z6front1v>:
void front1()
{
 8080420:	b508      	push	{r3, lr}
  digitalWrite(enA, HIGH);
 8080422:	4b12      	ldr	r3, [pc, #72]	; (808046c <_Z6front1v+0x4c>)
 8080424:	2101      	movs	r1, #1
 8080426:	8818      	ldrh	r0, [r3, #0]
 8080428:	f001 fb41 	bl	8081aae <digitalWrite>
  digitalWrite(enB, HIGH);
 808042c:	4b10      	ldr	r3, [pc, #64]	; (8080470 <_Z6front1v+0x50>)
 808042e:	2101      	movs	r1, #1
 8080430:	8818      	ldrh	r0, [r3, #0]
 8080432:	f001 fb3c 	bl	8081aae <digitalWrite>

  digitalWrite(in1, HIGH);
 8080436:	4b0f      	ldr	r3, [pc, #60]	; (8080474 <_Z6front1v+0x54>)
 8080438:	2101      	movs	r1, #1
 808043a:	8818      	ldrh	r0, [r3, #0]
 808043c:	f001 fb37 	bl	8081aae <digitalWrite>
  digitalWrite(in2, LOW);
 8080440:	4b0d      	ldr	r3, [pc, #52]	; (8080478 <_Z6front1v+0x58>)
 8080442:	2100      	movs	r1, #0
 8080444:	8818      	ldrh	r0, [r3, #0]
 8080446:	f001 fb32 	bl	8081aae <digitalWrite>

  digitalWrite(in3, LOW);
 808044a:	4b0c      	ldr	r3, [pc, #48]	; (808047c <_Z6front1v+0x5c>)
 808044c:	2100      	movs	r1, #0
 808044e:	8818      	ldrh	r0, [r3, #0]
 8080450:	f001 fb2d 	bl	8081aae <digitalWrite>
  digitalWrite(in4, HIGH);
 8080454:	4b0a      	ldr	r3, [pc, #40]	; (8080480 <_Z6front1v+0x60>)
 8080456:	2101      	movs	r1, #1
 8080458:	8818      	ldrh	r0, [r3, #0]
 808045a:	f001 fb28 	bl	8081aae <digitalWrite>

  delay(4000);
}
 808045e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(4000);
 8080462:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8080466:	f001 b863 	b.w	8081530 <delay>
 808046a:	bf00      	nop
 808046c:	20000008 	.word	0x20000008
 8080470:	2000000c 	.word	0x2000000c
 8080474:	20000010 	.word	0x20000010
 8080478:	20000014 	.word	0x20000014
 808047c:	20000018 	.word	0x20000018
 8080480:	2000001c 	.word	0x2000001c

08080484 <_Z5back1v>:
void back1()
{
 8080484:	b508      	push	{r3, lr}
  digitalWrite(in1, LOW);
 8080486:	4b0d      	ldr	r3, [pc, #52]	; (80804bc <_Z5back1v+0x38>)
 8080488:	2100      	movs	r1, #0
 808048a:	8818      	ldrh	r0, [r3, #0]
 808048c:	f001 fb0f 	bl	8081aae <digitalWrite>
  digitalWrite(in2, HIGH);
 8080490:	4b0b      	ldr	r3, [pc, #44]	; (80804c0 <_Z5back1v+0x3c>)
 8080492:	2101      	movs	r1, #1
 8080494:	8818      	ldrh	r0, [r3, #0]
 8080496:	f001 fb0a 	bl	8081aae <digitalWrite>

  digitalWrite(in3, HIGH);
 808049a:	4b0a      	ldr	r3, [pc, #40]	; (80804c4 <_Z5back1v+0x40>)
 808049c:	2101      	movs	r1, #1
 808049e:	8818      	ldrh	r0, [r3, #0]
 80804a0:	f001 fb05 	bl	8081aae <digitalWrite>
  digitalWrite(in4, LOW);
 80804a4:	4b08      	ldr	r3, [pc, #32]	; (80804c8 <_Z5back1v+0x44>)
 80804a6:	2100      	movs	r1, #0
 80804a8:	8818      	ldrh	r0, [r3, #0]
 80804aa:	f001 fb00 	bl	8081aae <digitalWrite>

  delay(4000);
}
 80804ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(4000);
 80804b2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80804b6:	f001 b83b 	b.w	8081530 <delay>
 80804ba:	bf00      	nop
 80804bc:	20000010 	.word	0x20000010
 80804c0:	20000014 	.word	0x20000014
 80804c4:	20000018 	.word	0x20000018
 80804c8:	2000001c 	.word	0x2000001c

080804cc <_Z6right1v>:
void right1()
{
 80804cc:	b508      	push	{r3, lr}
  digitalWrite(in1, HIGH);
 80804ce:	4b0d      	ldr	r3, [pc, #52]	; (8080504 <_Z6right1v+0x38>)
 80804d0:	2101      	movs	r1, #1
 80804d2:	8818      	ldrh	r0, [r3, #0]
 80804d4:	f001 faeb 	bl	8081aae <digitalWrite>
  digitalWrite(in2, LOW);
 80804d8:	4b0b      	ldr	r3, [pc, #44]	; (8080508 <_Z6right1v+0x3c>)
 80804da:	2100      	movs	r1, #0
 80804dc:	8818      	ldrh	r0, [r3, #0]
 80804de:	f001 fae6 	bl	8081aae <digitalWrite>

  digitalWrite(in3, HIGH);
 80804e2:	4b0a      	ldr	r3, [pc, #40]	; (808050c <_Z6right1v+0x40>)
 80804e4:	2101      	movs	r1, #1
 80804e6:	8818      	ldrh	r0, [r3, #0]
 80804e8:	f001 fae1 	bl	8081aae <digitalWrite>
  digitalWrite(in4, LOW);
 80804ec:	4b08      	ldr	r3, [pc, #32]	; (8080510 <_Z6right1v+0x44>)
 80804ee:	2100      	movs	r1, #0
 80804f0:	8818      	ldrh	r0, [r3, #0]
 80804f2:	f001 fadc 	bl	8081aae <digitalWrite>

  delay(1500);
}
 80804f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(1500);
 80804fa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80804fe:	f001 b817 	b.w	8081530 <delay>
 8080502:	bf00      	nop
 8080504:	20000010 	.word	0x20000010
 8080508:	20000014 	.word	0x20000014
 808050c:	20000018 	.word	0x20000018
 8080510:	2000001c 	.word	0x2000001c

08080514 <_Z5left1v>:
void left1()
{
 8080514:	b508      	push	{r3, lr}
  digitalWrite(in1, LOW);
 8080516:	4b0d      	ldr	r3, [pc, #52]	; (808054c <_Z5left1v+0x38>)
 8080518:	2100      	movs	r1, #0
 808051a:	8818      	ldrh	r0, [r3, #0]
 808051c:	f001 fac7 	bl	8081aae <digitalWrite>
  digitalWrite(in2, HIGH);
 8080520:	4b0b      	ldr	r3, [pc, #44]	; (8080550 <_Z5left1v+0x3c>)
 8080522:	2101      	movs	r1, #1
 8080524:	8818      	ldrh	r0, [r3, #0]
 8080526:	f001 fac2 	bl	8081aae <digitalWrite>

  digitalWrite(in3, LOW);
 808052a:	4b0a      	ldr	r3, [pc, #40]	; (8080554 <_Z5left1v+0x40>)
 808052c:	2100      	movs	r1, #0
 808052e:	8818      	ldrh	r0, [r3, #0]
 8080530:	f001 fabd 	bl	8081aae <digitalWrite>
  digitalWrite(in4, HIGH);
 8080534:	4b08      	ldr	r3, [pc, #32]	; (8080558 <_Z5left1v+0x44>)
 8080536:	2101      	movs	r1, #1
 8080538:	8818      	ldrh	r0, [r3, #0]
 808053a:	f001 fab8 	bl	8081aae <digitalWrite>

  delay(1500);
}
 808053e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(1500);
 8080542:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8080546:	f000 bff3 	b.w	8081530 <delay>
 808054a:	bf00      	nop
 808054c:	20000010 	.word	0x20000010
 8080550:	20000014 	.word	0x20000014
 8080554:	20000018 	.word	0x20000018
 8080558:	2000001c 	.word	0x2000001c

0808055c <loop>:
// loop() runs over and over again, as quickly as it can execute.
void loop()
{
 808055c:	b508      	push	{r3, lr}

  statusOne();
 808055e:	f7ff fe5f 	bl	8080220 <_Z9statusOnev>
  turrentCenter();
 8080562:	f7ff ff05 	bl	8080370 <_Z13turrentCenterv>
  riseArm2();
 8080566:	f7ff ff4d 	bl	8080404 <_Z8riseArm2v>
  riseArm2();
 808056a:	f7ff ff4b 	bl	8080404 <_Z8riseArm2v>
  //lowerArm1();
  riseArm2();
 808056e:	f7ff ff49 	bl	8080404 <_Z8riseArm2v>
  delay(1000);
 8080572:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080576:	f000 ffdb 	bl	8081530 <delay>

  openArm();
 808057a:	f7ff fed9 	bl	8080330 <_Z7openArmv>
  delay(2000);
 808057e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080582:	f000 ffd5 	bl	8081530 <delay>
  closeArm();
 8080586:	f7ff fec3 	bl	8080310 <_Z8closeArmv>
  delay(1000);
 808058a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808058e:	f000 ffcf 	bl	8081530 <delay>

  turrentLeft();
 8080592:	f7ff fedd 	bl	8080350 <_Z11turrentLeftv>
  statusTwo();
 8080596:	f7ff fe7f 	bl	8080298 <_Z9statusTwov>
  openArm();
 808059a:	f7ff fec9 	bl	8080330 <_Z7openArmv>
  lowerArm1();
 808059e:	f7ff ff07 	bl	80803b0 <_Z9lowerArm1v>
  lowerArm2();
 80805a2:	f7ff ff13 	bl	80803cc <_Z9lowerArm2v>
  lowerArm2();
 80805a6:	f7ff ff11 	bl	80803cc <_Z9lowerArm2v>
  lowerArm1();
 80805aa:	f7ff ff01 	bl	80803b0 <_Z9lowerArm1v>
  //lowerArm1();
  lowerArm2();
 80805ae:	f7ff ff0d 	bl	80803cc <_Z9lowerArm2v>
  riseArm1();
 80805b2:	f7ff ff19 	bl	80803e8 <_Z8riseArm1v>
  lowerArm2();
 80805b6:	f7ff ff09 	bl	80803cc <_Z9lowerArm2v>
  closeArm();
 80805ba:	f7ff fea9 	bl	8080310 <_Z8closeArmv>
  delay(1000);
 80805be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80805c2:	f000 ffb5 	bl	8081530 <delay>
  riseArm2();
 80805c6:	f7ff ff1d 	bl	8080404 <_Z8riseArm2v>
  riseArm2();
 80805ca:	f7ff ff1b 	bl	8080404 <_Z8riseArm2v>
  riseArm1();
 80805ce:	f7ff ff0b 	bl	80803e8 <_Z8riseArm1v>
  //riseArm1();
  turrentCenter();
 80805d2:	f7ff fecd 	bl	8080370 <_Z13turrentCenterv>

  front1();
 80805d6:	f7ff ff23 	bl	8080420 <_Z6front1v>
  right1();
 80805da:	f7ff ff77 	bl	80804cc <_Z6right1v>

  turrentRight();
 80805de:	f7ff fed7 	bl	8080390 <_Z12turrentRightv>
  delay(1000);
 80805e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80805e6:	f000 ffa3 	bl	8081530 <delay>
  lowerArm1();
 80805ea:	f7ff fee1 	bl	80803b0 <_Z9lowerArm1v>
  lowerArm2();
 80805ee:	f7ff feed 	bl	80803cc <_Z9lowerArm2v>
  lowerArm1();
 80805f2:	f7ff fedd 	bl	80803b0 <_Z9lowerArm1v>
  lowerArm2();
 80805f6:	f7ff fee9 	bl	80803cc <_Z9lowerArm2v>
  delay(1000);
 80805fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80805fe:	f000 ff97 	bl	8081530 <delay>
  openArm();
 8080602:	f7ff fe95 	bl	8080330 <_Z7openArmv>
  delay(2000);
 8080606:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808060a:	f000 ff91 	bl	8081530 <delay>
  riseArm2();
 808060e:	f7ff fef9 	bl	8080404 <_Z8riseArm2v>
  riseArm2();
 8080612:	f7ff fef7 	bl	8080404 <_Z8riseArm2v>
  riseArm1();
 8080616:	f7ff fee7 	bl	80803e8 <_Z8riseArm1v>
  riseArm2();
 808061a:	f7ff fef3 	bl	8080404 <_Z8riseArm2v>
  delay(1000);
 808061e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080622:	f000 ff85 	bl	8081530 <delay>

  statusTwo();
 8080626:	f7ff fe37 	bl	8080298 <_Z9statusTwov>
  left1();
 808062a:	f7ff ff73 	bl	8080514 <_Z5left1v>
  back1();
 808062e:	f7ff ff29 	bl	8080484 <_Z5back1v>
  right1();
 8080632:	f7ff ff4b 	bl	80804cc <_Z6right1v>

  turrentCenter();
 8080636:	f7ff fe9b 	bl	8080370 <_Z13turrentCenterv>

  openArm();
 808063a:	f7ff fe79 	bl	8080330 <_Z7openArmv>
  delay(2000);
 808063e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080642:	f000 ff75 	bl	8081530 <delay>
  closeArm();
 8080646:	f7ff fe63 	bl	8080310 <_Z8closeArmv>
  delay(1000);
 808064a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808064e:	f000 ff6f 	bl	8081530 <delay>

  delay(1000);
}
 8080652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(1000);
 8080656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808065a:	f000 bf69 	b.w	8081530 <delay>
	...

08080660 <_GLOBAL__sub_I_pos>:
}
 8080660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
AccelStepper stepper1(AccelStepper::FULL4WIRE, C5, C3, C4, C2);
 8080662:	2401      	movs	r4, #1
 8080664:	2320      	movs	r3, #32
 8080666:	e9cd 3401 	strd	r3, r4, [sp, #4]
 808066a:	2322      	movs	r3, #34	; 0x22
 808066c:	2223      	movs	r2, #35	; 0x23
 808066e:	9300      	str	r3, [sp, #0]
 8080670:	2104      	movs	r1, #4
 8080672:	2321      	movs	r3, #33	; 0x21
 8080674:	480b      	ldr	r0, [pc, #44]	; (80806a4 <_GLOBAL__sub_I_pos+0x44>)
 8080676:	f000 fa75 	bl	8080b64 <_ZN12AccelStepperC1Ehhhhhb>
AccelStepper stepper2(AccelStepper::FULL4WIRE, C1, A1, C0, A0);
 808067a:	231e      	movs	r3, #30
 808067c:	220a      	movs	r2, #10
 808067e:	2104      	movs	r1, #4
 8080680:	e9cd 3200 	strd	r3, r2, [sp]
 8080684:	9402      	str	r4, [sp, #8]
 8080686:	230b      	movs	r3, #11
 8080688:	221f      	movs	r2, #31
 808068a:	4807      	ldr	r0, [pc, #28]	; (80806a8 <_GLOBAL__sub_I_pos+0x48>)
 808068c:	f000 fa6a 	bl	8080b64 <_ZN12AccelStepperC1Ehhhhhb>
Servo myServo;
 8080690:	4806      	ldr	r0, [pc, #24]	; (80806ac <_GLOBAL__sub_I_pos+0x4c>)
 8080692:	f001 f921 	bl	80818d8 <_ZN5ServoC1Ev>
Servo myServo2;
 8080696:	4806      	ldr	r0, [pc, #24]	; (80806b0 <_GLOBAL__sub_I_pos+0x50>)
}
 8080698:	b004      	add	sp, #16
 808069a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Servo myServo2;
 808069e:	f001 b91b 	b.w	80818d8 <_ZN5ServoC1Ev>
 80806a2:	bf00      	nop
 80806a4:	200000c0 	.word	0x200000c0
 80806a8:	20000114 	.word	0x20000114
 80806ac:	200000a0 	.word	0x200000a0
 80806b0:	200000b0 	.word	0x200000b0

080806b4 <_ZN12AccelStepper4stepEl>:
}

// Subclasses can override
void AccelStepper::step(long step)
{
    switch (_interface)
 80806b4:	7903      	ldrb	r3, [r0, #4]
 80806b6:	2b08      	cmp	r3, #8
 80806b8:	d81b      	bhi.n	80806f2 <_ZN12AccelStepper4stepEl+0x3e>
 80806ba:	e8df f003 	tbb	[pc, r3]
 80806be:	0805      	.short	0x0805
 80806c0:	1a110e0b 	.word	0x1a110e0b
 80806c4:	1a14      	.short	0x1a14
 80806c6:	17          	.byte	0x17
 80806c7:	00          	.byte	0x00
    {
        case FUNCTION:
            step0(step);
 80806c8:	6803      	ldr	r3, [r0, #0]
 80806ca:	691b      	ldr	r3, [r3, #16]
	case HALF3WIRE:
	    step6(step);
	    break;

	case HALF4WIRE:
	    step8(step);
 80806cc:	4718      	bx	r3
	    step1(step);
 80806ce:	6803      	ldr	r3, [r0, #0]
 80806d0:	695b      	ldr	r3, [r3, #20]
 80806d2:	e7fb      	b.n	80806cc <_ZN12AccelStepper4stepEl+0x18>
	    step2(step);
 80806d4:	6803      	ldr	r3, [r0, #0]
 80806d6:	699b      	ldr	r3, [r3, #24]
 80806d8:	e7f8      	b.n	80806cc <_ZN12AccelStepper4stepEl+0x18>
	    step3(step);
 80806da:	6803      	ldr	r3, [r0, #0]
 80806dc:	69db      	ldr	r3, [r3, #28]
 80806de:	e7f5      	b.n	80806cc <_ZN12AccelStepper4stepEl+0x18>
	    step4(step);
 80806e0:	6803      	ldr	r3, [r0, #0]
 80806e2:	6a1b      	ldr	r3, [r3, #32]
 80806e4:	e7f2      	b.n	80806cc <_ZN12AccelStepper4stepEl+0x18>
	    step6(step);
 80806e6:	6803      	ldr	r3, [r0, #0]
 80806e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80806ea:	e7ef      	b.n	80806cc <_ZN12AccelStepper4stepEl+0x18>
	    step8(step);
 80806ec:	6803      	ldr	r3, [r0, #0]
 80806ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80806f0:	e7ec      	b.n	80806cc <_ZN12AccelStepper4stepEl+0x18>
	    break;
    }
}
 80806f2:	4770      	bx	lr

080806f4 <_ZN12AccelStepper5step6El>:
// 3 pin half step function
// This is passed the current step number (0 to 7)
// Subclasses can override
void AccelStepper::step6(long step)
{
    switch (step % 6)
 80806f4:	2306      	movs	r3, #6
 80806f6:	fb91 f2f3 	sdiv	r2, r1, r3
 80806fa:	fb02 1313 	mls	r3, r2, r3, r1
 80806fe:	2b05      	cmp	r3, #5
 8080700:	d81c      	bhi.n	808073c <_ZN12AccelStepper5step6El+0x48>
 8080702:	e8df f003 	tbb	[pc, r3]
 8080706:	0703      	.short	0x0703
 8080708:	17130f0b 	.word	0x17130f0b
    {
	case 0:    // 100
	    setOutputPins(0b100);
 808070c:	2104      	movs	r1, #4
 808070e:	6803      	ldr	r3, [r0, #0]
 8080710:	689b      	ldr	r3, [r3, #8]
	case 4:    // 010
	    setOutputPins(0b010);
            break;

	case 5:    // 011
	    setOutputPins(0b110);
 8080712:	4718      	bx	r3
	    setOutputPins(0b101);
 8080714:	6803      	ldr	r3, [r0, #0]
 8080716:	2105      	movs	r1, #5
 8080718:	689b      	ldr	r3, [r3, #8]
 808071a:	e7fa      	b.n	8080712 <_ZN12AccelStepper5step6El+0x1e>
	    setOutputPins(0b001);
 808071c:	6803      	ldr	r3, [r0, #0]
 808071e:	2101      	movs	r1, #1
 8080720:	689b      	ldr	r3, [r3, #8]
 8080722:	e7f6      	b.n	8080712 <_ZN12AccelStepper5step6El+0x1e>
	    setOutputPins(0b011);
 8080724:	6803      	ldr	r3, [r0, #0]
 8080726:	2103      	movs	r1, #3
 8080728:	689b      	ldr	r3, [r3, #8]
 808072a:	e7f2      	b.n	8080712 <_ZN12AccelStepper5step6El+0x1e>
	    setOutputPins(0b010);
 808072c:	6803      	ldr	r3, [r0, #0]
 808072e:	2102      	movs	r1, #2
 8080730:	689b      	ldr	r3, [r3, #8]
 8080732:	e7ee      	b.n	8080712 <_ZN12AccelStepper5step6El+0x1e>
	    setOutputPins(0b110);
 8080734:	6803      	ldr	r3, [r0, #0]
 8080736:	2106      	movs	r1, #6
 8080738:	689b      	ldr	r3, [r3, #8]
 808073a:	e7ea      	b.n	8080712 <_ZN12AccelStepper5step6El+0x1e>
            break;

    }
}
 808073c:	4770      	bx	lr

0808073e <_ZN12AccelStepper5step8El>:
// 4 pin half step function
// This is passed the current step number (0 to 7)
// Subclasses can override
void AccelStepper::step8(long step)
{
    switch (step & 0x7)
 808073e:	6803      	ldr	r3, [r0, #0]
 8080740:	f001 0107 	and.w	r1, r1, #7
 8080744:	3901      	subs	r1, #1
 8080746:	689b      	ldr	r3, [r3, #8]
 8080748:	2906      	cmp	r1, #6
 808074a:	d805      	bhi.n	8080758 <_ZN12AccelStepper5step8El+0x1a>
 808074c:	e8df f001 	tbb	[pc, r1]
 8080750:	0c0a0806 	.word	0x0c0a0806
 8080754:	100e      	.short	0x100e
 8080756:	12          	.byte	0x12
 8080757:	00          	.byte	0x00
    {
	case 0:    // 1000
	    setOutputPins(0b0001);
 8080758:	2101      	movs	r1, #1
	case 6:    // 0001
	    setOutputPins(0b1000);
            break;

        case 7:    //1001
	    setOutputPins(0b1001);
 808075a:	4718      	bx	r3
	    setOutputPins(0b0101);
 808075c:	2105      	movs	r1, #5
 808075e:	e7fc      	b.n	808075a <_ZN12AccelStepper5step8El+0x1c>
	    setOutputPins(0b0100);
 8080760:	2104      	movs	r1, #4
 8080762:	e7fa      	b.n	808075a <_ZN12AccelStepper5step8El+0x1c>
	    setOutputPins(0b0110);
 8080764:	2106      	movs	r1, #6
 8080766:	e7f8      	b.n	808075a <_ZN12AccelStepper5step8El+0x1c>
	    setOutputPins(0b0010);
 8080768:	2102      	movs	r1, #2
 808076a:	e7f6      	b.n	808075a <_ZN12AccelStepper5step8El+0x1c>
	    setOutputPins(0b1010);
 808076c:	210a      	movs	r1, #10
 808076e:	e7f4      	b.n	808075a <_ZN12AccelStepper5step8El+0x1c>
	    setOutputPins(0b1000);
 8080770:	2108      	movs	r1, #8
 8080772:	e7f2      	b.n	808075a <_ZN12AccelStepper5step8El+0x1c>
	    setOutputPins(0b1001);
 8080774:	2109      	movs	r1, #9
 8080776:	e7f0      	b.n	808075a <_ZN12AccelStepper5step8El+0x1c>

08080778 <_ZN12AccelStepper13setOutputPinsEh>:
{
 8080778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (_interface == FULL4WIRE || _interface == HALF4WIRE)
 808077a:	7905      	ldrb	r5, [r0, #4]
{
 808077c:	460f      	mov	r7, r1
    if (_interface == FULL4WIRE || _interface == HALF4WIRE)
 808077e:	2d04      	cmp	r5, #4
 8080780:	d007      	beq.n	8080792 <_ZN12AccelStepper13setOutputPinsEh+0x1a>
 8080782:	2d08      	cmp	r5, #8
 8080784:	d017      	beq.n	80807b6 <_ZN12AccelStepper13setOutputPinsEh+0x3e>
    else if (_interface == FULL3WIRE || _interface == HALF3WIRE)
 8080786:	2d03      	cmp	r5, #3
 8080788:	d003      	beq.n	8080792 <_ZN12AccelStepper13setOutputPinsEh+0x1a>
	numpins = 3;
 808078a:	2d06      	cmp	r5, #6
 808078c:	bf14      	ite	ne
 808078e:	2502      	movne	r5, #2
 8080790:	2503      	moveq	r5, #3
 8080792:	2600      	movs	r6, #0
 8080794:	1d44      	adds	r4, r0, #5
	digitalWrite(_pin[i], (mask & (1 << i)) ? (HIGH ^ _pinInverted[i]) : (LOW ^ _pinInverted[i]));
 8080796:	f814 0b01 	ldrb.w	r0, [r4], #1
 808079a:	fa47 f306 	asr.w	r3, r7, r6
 808079e:	78e1      	ldrb	r1, [r4, #3]
 80807a0:	07db      	lsls	r3, r3, #31
 80807a2:	bf48      	it	mi
 80807a4:	f081 0101 	eormi.w	r1, r1, #1
 80807a8:	3601      	adds	r6, #1
 80807aa:	f001 f980 	bl	8081aae <digitalWrite>
    for (i = 0; i < numpins; i++)
 80807ae:	b2f3      	uxtb	r3, r6
 80807b0:	429d      	cmp	r5, r3
 80807b2:	d8f0      	bhi.n	8080796 <_ZN12AccelStepper13setOutputPinsEh+0x1e>
}
 80807b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	numpins = 4;
 80807b6:	2504      	movs	r5, #4
 80807b8:	e7eb      	b.n	8080792 <_ZN12AccelStepper13setOutputPinsEh+0x1a>

080807ba <_ZN12AccelStepper5step1El>:
{
 80807ba:	b510      	push	{r4, lr}
 80807bc:	4604      	mov	r4, r0
    setOutputPins(_direction ? 0b10 : 0b00); // Set direction first else get rogue pulses
 80807be:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80807c2:	6803      	ldr	r3, [r0, #0]
 80807c4:	2a00      	cmp	r2, #0
 80807c6:	bf14      	ite	ne
 80807c8:	2102      	movne	r1, #2
 80807ca:	2100      	moveq	r1, #0
 80807cc:	689b      	ldr	r3, [r3, #8]
 80807ce:	4798      	blx	r3
    setOutputPins(_direction ? 0b11 : 0b01); // step HIGH
 80807d0:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 80807d4:	6823      	ldr	r3, [r4, #0]
 80807d6:	2a00      	cmp	r2, #0
 80807d8:	bf14      	ite	ne
 80807da:	2103      	movne	r1, #3
 80807dc:	2101      	moveq	r1, #1
 80807de:	4620      	mov	r0, r4
 80807e0:	689b      	ldr	r3, [r3, #8]
 80807e2:	4798      	blx	r3
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80807e4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80807e6:	f000 fb6f 	bl	8080ec8 <HAL_Delay_Microseconds>
    setOutputPins(_direction ? 0b10 : 0b00); // step LOW
 80807ea:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 80807ee:	6823      	ldr	r3, [r4, #0]
 80807f0:	2a00      	cmp	r2, #0
 80807f2:	4620      	mov	r0, r4
}
 80807f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setOutputPins(_direction ? 0b10 : 0b00); // step LOW
 80807f8:	bf14      	ite	ne
 80807fa:	2102      	movne	r1, #2
 80807fc:	2100      	moveq	r1, #0
 80807fe:	689b      	ldr	r3, [r3, #8]
 8080800:	4718      	bx	r3

08080802 <_ZN12AccelStepper5step0El>:
{
 8080802:	b510      	push	{r4, lr}
    if (_speed > 0)
 8080804:	2100      	movs	r1, #0
{
 8080806:	4604      	mov	r4, r0
    if (_speed > 0)
 8080808:	6980      	ldr	r0, [r0, #24]
 808080a:	f002 fa61 	bl	8082cd0 <__aeabi_fcmpgt>
 808080e:	b118      	cbz	r0, 8080818 <_ZN12AccelStepper5step0El+0x16>
	_forward();
 8080810:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 8080812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_backward();
 8080816:	4718      	bx	r3
 8080818:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808081a:	e7fa      	b.n	8080812 <_ZN12AccelStepper5step0El+0x10>

0808081c <_ZN12AccelStepper5step2El>:
    switch (step & 0x3)
 808081c:	6803      	ldr	r3, [r0, #0]
 808081e:	f001 0103 	and.w	r1, r1, #3
 8080822:	2902      	cmp	r1, #2
 8080824:	689b      	ldr	r3, [r3, #8]
 8080826:	d006      	beq.n	8080836 <_ZN12AccelStepper5step2El+0x1a>
 8080828:	2903      	cmp	r1, #3
 808082a:	d006      	beq.n	808083a <_ZN12AccelStepper5step2El+0x1e>
 808082c:	2901      	cmp	r1, #1
	    setOutputPins(0b10);
 808082e:	bf14      	ite	ne
 8080830:	2102      	movne	r1, #2
	    setOutputPins(0b11);
 8080832:	2103      	moveq	r1, #3
	    setOutputPins(0b00);
 8080834:	4718      	bx	r3
	    setOutputPins(0b01);
 8080836:	2101      	movs	r1, #1
 8080838:	e7fc      	b.n	8080834 <_ZN12AccelStepper5step2El+0x18>
	    setOutputPins(0b00);
 808083a:	2100      	movs	r1, #0
 808083c:	e7fa      	b.n	8080834 <_ZN12AccelStepper5step2El+0x18>

0808083e <_ZN12AccelStepper5step3El>:
    switch (step % 3)
 808083e:	2303      	movs	r3, #3
 8080840:	fb91 f3f3 	sdiv	r3, r1, r3
 8080844:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8080848:	1ac9      	subs	r1, r1, r3
 808084a:	2901      	cmp	r1, #1
{
 808084c:	4602      	mov	r2, r0
    switch (step % 3)
 808084e:	d006      	beq.n	808085e <_ZN12AccelStepper5step3El+0x20>
 8080850:	2902      	cmp	r1, #2
 8080852:	d004      	beq.n	808085e <_ZN12AccelStepper5step3El+0x20>
 8080854:	b931      	cbnz	r1, 8080864 <_ZN12AccelStepper5step3El+0x26>
	    setOutputPins(0b100);
 8080856:	2104      	movs	r1, #4
 8080858:	6803      	ldr	r3, [r0, #0]
 808085a:	689b      	ldr	r3, [r3, #8]
	    setOutputPins(0b010);
 808085c:	4718      	bx	r3
 808085e:	6813      	ldr	r3, [r2, #0]
 8080860:	689b      	ldr	r3, [r3, #8]
 8080862:	e7fb      	b.n	808085c <_ZN12AccelStepper5step3El+0x1e>
}
 8080864:	4770      	bx	lr

08080866 <_ZN12AccelStepper5step4El>:
    switch (step & 0x3)
 8080866:	6803      	ldr	r3, [r0, #0]
 8080868:	f001 0103 	and.w	r1, r1, #3
 808086c:	2902      	cmp	r1, #2
 808086e:	689b      	ldr	r3, [r3, #8]
 8080870:	d006      	beq.n	8080880 <_ZN12AccelStepper5step4El+0x1a>
 8080872:	2903      	cmp	r1, #3
 8080874:	d006      	beq.n	8080884 <_ZN12AccelStepper5step4El+0x1e>
 8080876:	2901      	cmp	r1, #1
	    setOutputPins(0b0101);
 8080878:	bf14      	ite	ne
 808087a:	2105      	movne	r1, #5
	    setOutputPins(0b0110);
 808087c:	2106      	moveq	r1, #6
	    setOutputPins(0b1001);
 808087e:	4718      	bx	r3
	    setOutputPins(0b1010);
 8080880:	210a      	movs	r1, #10
 8080882:	e7fc      	b.n	808087e <_ZN12AccelStepper5step4El+0x18>
	    setOutputPins(0b1001);
 8080884:	2109      	movs	r1, #9
 8080886:	e7fa      	b.n	808087e <_ZN12AccelStepper5step4El+0x18>

08080888 <_ZN12AccelStepper14disableOutputsEv>:
    }
}

// Prevents power consumption on the outputs
void    AccelStepper::disableOutputs()
{
 8080888:	b510      	push	{r4, lr}
    if (! _interface) return;
 808088a:	7903      	ldrb	r3, [r0, #4]
{
 808088c:	4604      	mov	r4, r0
    if (! _interface) return;
 808088e:	b193      	cbz	r3, 80808b6 <_ZN12AccelStepper14disableOutputsEv+0x2e>

    setOutputPins(0); // Handles inversion automatically
 8080890:	6803      	ldr	r3, [r0, #0]
 8080892:	2100      	movs	r1, #0
 8080894:	689b      	ldr	r3, [r3, #8]
 8080896:	4798      	blx	r3
    if (_enablePin != 0xff)
 8080898:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 808089c:	28ff      	cmp	r0, #255	; 0xff
 808089e:	d00a      	beq.n	80808b6 <_ZN12AccelStepper14disableOutputsEv+0x2e>
    {
        pinMode(_enablePin, OUTPUT);
 80808a0:	2101      	movs	r1, #1
 80808a2:	f001 f8f3 	bl	8081a8c <pinMode>
        digitalWrite(_enablePin, LOW ^ _enableInverted);
 80808a6:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 80808aa:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
    }
}
 80808ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(_enablePin, LOW ^ _enableInverted);
 80808b2:	f001 b8fc 	b.w	8081aae <digitalWrite>
}
 80808b6:	bd10      	pop	{r4, pc}

080808b8 <_ZN12AccelStepper13enableOutputsEv>:

void    AccelStepper::enableOutputs()
{
 80808b8:	b510      	push	{r4, lr}
    if (! _interface)
 80808ba:	7903      	ldrb	r3, [r0, #4]
{
 80808bc:	4604      	mov	r4, r0
    if (! _interface)
 80808be:	b363      	cbz	r3, 808091a <_ZN12AccelStepper13enableOutputsEv+0x62>
	return;

    pinMode(_pin[0], OUTPUT);
 80808c0:	2101      	movs	r1, #1
 80808c2:	7940      	ldrb	r0, [r0, #5]
 80808c4:	f001 f8e2 	bl	8081a8c <pinMode>
    pinMode(_pin[1], OUTPUT);
 80808c8:	2101      	movs	r1, #1
 80808ca:	79a0      	ldrb	r0, [r4, #6]
 80808cc:	f001 f8de 	bl	8081a8c <pinMode>
    if (_interface == FULL4WIRE || _interface == HALF4WIRE)
 80808d0:	7923      	ldrb	r3, [r4, #4]
 80808d2:	2b04      	cmp	r3, #4
 80808d4:	d001      	beq.n	80808da <_ZN12AccelStepper13enableOutputsEv+0x22>
 80808d6:	2b08      	cmp	r3, #8
 80808d8:	d118      	bne.n	808090c <_ZN12AccelStepper13enableOutputsEv+0x54>
    {
        pinMode(_pin[2], OUTPUT);
 80808da:	2101      	movs	r1, #1
 80808dc:	79e0      	ldrb	r0, [r4, #7]
 80808de:	f001 f8d5 	bl	8081a8c <pinMode>
        pinMode(_pin[3], OUTPUT);
 80808e2:	2101      	movs	r1, #1
 80808e4:	7a20      	ldrb	r0, [r4, #8]
    }
    else if (_interface == FULL3WIRE || _interface == HALF3WIRE)
    {
        pinMode(_pin[2], OUTPUT);
 80808e6:	f001 f8d1 	bl	8081a8c <pinMode>
    }

    if (_enablePin != 0xff)
 80808ea:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80808ee:	28ff      	cmp	r0, #255	; 0xff
 80808f0:	d013      	beq.n	808091a <_ZN12AccelStepper13enableOutputsEv+0x62>
    {
        pinMode(_enablePin, OUTPUT);
 80808f2:	2101      	movs	r1, #1
 80808f4:	f001 f8ca 	bl	8081a8c <pinMode>
        digitalWrite(_enablePin, HIGH ^ _enableInverted);
 80808f8:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 80808fc:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8080900:	f081 0101 	eor.w	r1, r1, #1
    }
}
 8080904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(_enablePin, HIGH ^ _enableInverted);
 8080908:	f001 b8d1 	b.w	8081aae <digitalWrite>
    else if (_interface == FULL3WIRE || _interface == HALF3WIRE)
 808090c:	2b03      	cmp	r3, #3
 808090e:	d001      	beq.n	8080914 <_ZN12AccelStepper13enableOutputsEv+0x5c>
 8080910:	2b06      	cmp	r3, #6
 8080912:	d1ea      	bne.n	80808ea <_ZN12AccelStepper13enableOutputsEv+0x32>
        pinMode(_pin[2], OUTPUT);
 8080914:	2101      	movs	r1, #1
 8080916:	79e0      	ldrb	r0, [r4, #7]
 8080918:	e7e5      	b.n	80808e6 <_ZN12AccelStepper13enableOutputsEv+0x2e>
}
 808091a:	bd10      	pop	{r4, pc}

0808091c <_ZN12AccelStepper8runSpeedEv>:
{
 808091c:	b538      	push	{r3, r4, r5, lr}
    if (!_stepInterval)
 808091e:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8080920:	4604      	mov	r4, r0
    if (!_stepInterval)
 8080922:	b90b      	cbnz	r3, 8080928 <_ZN12AccelStepper8runSpeedEv+0xc>
	return false;
 8080924:	2000      	movs	r0, #0
}
 8080926:	bd38      	pop	{r3, r4, r5, pc}
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 8080928:	f000 fad6 	bl	8080ed8 <HAL_Timer_Get_Micro_Seconds>
    if (time - _lastStepTime >= _stepInterval)
 808092c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808092e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8080930:	1ac3      	subs	r3, r0, r3
 8080932:	4293      	cmp	r3, r2
 8080934:	4605      	mov	r5, r0
 8080936:	d3f5      	bcc.n	8080924 <_ZN12AccelStepper8runSpeedEv+0x8>
	if (_direction == DIRECTION_CW)
 8080938:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 808093c:	6921      	ldr	r1, [r4, #16]
 808093e:	b143      	cbz	r3, 8080952 <_ZN12AccelStepper8runSpeedEv+0x36>
	    _currentPos += 1;
 8080940:	3101      	adds	r1, #1
	step(_currentPos);
 8080942:	6823      	ldr	r3, [r4, #0]
 8080944:	6121      	str	r1, [r4, #16]
 8080946:	4620      	mov	r0, r4
 8080948:	68db      	ldr	r3, [r3, #12]
 808094a:	4798      	blx	r3
	return true;
 808094c:	2001      	movs	r0, #1
	_lastStepTime = time; // Caution: does not account for costs in step()
 808094e:	62e5      	str	r5, [r4, #44]	; 0x2c
	return true;
 8080950:	e7e9      	b.n	8080926 <_ZN12AccelStepper8runSpeedEv+0xa>
	    _currentPos -= 1;
 8080952:	3901      	subs	r1, #1
 8080954:	e7f5      	b.n	8080942 <_ZN12AccelStepper8runSpeedEv+0x26>
	...

08080958 <_ZN12AccelStepper15computeNewSpeedEv>:
{
 8080958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    long stepsToStop = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
 808095c:	6981      	ldr	r1, [r0, #24]
{
 808095e:	4604      	mov	r4, r0
    return _targetPos - _currentPos;
 8080960:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    long stepsToStop = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
 8080964:	4608      	mov	r0, r1
 8080966:	f001 fff7 	bl	8082958 <__aeabi_fmul>
 808096a:	f001 fb47 	bl	8081ffc <__aeabi_f2d>
 808096e:	4680      	mov	r8, r0
 8080970:	6a20      	ldr	r0, [r4, #32]
 8080972:	4689      	mov	r9, r1
 8080974:	f001 fb42 	bl	8081ffc <__aeabi_f2d>
 8080978:	4602      	mov	r2, r0
 808097a:	460b      	mov	r3, r1
 808097c:	f001 f9e0 	bl	8081d40 <__adddf3>
 8080980:	4602      	mov	r2, r0
 8080982:	460b      	mov	r3, r1
 8080984:	4640      	mov	r0, r8
 8080986:	4649      	mov	r1, r9
 8080988:	f001 fcba 	bl	8082300 <__aeabi_ddiv>
    return _targetPos - _currentPos;
 808098c:	1bbd      	subs	r5, r7, r6
    long stepsToStop = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
 808098e:	f001 fe3d 	bl	808260c <__aeabi_d2iz>
    if (distanceTo == 0 && stepsToStop <= 1)
 8080992:	2d00      	cmp	r5, #0
 8080994:	d152      	bne.n	8080a3c <_ZN12AccelStepper15computeNewSpeedEv+0xe4>
 8080996:	2801      	cmp	r0, #1
 8080998:	dc5b      	bgt.n	8080a52 <_ZN12AccelStepper15computeNewSpeedEv+0xfa>
	_speed = 0.0;
 808099a:	2300      	movs	r3, #0
	_stepInterval = 0;
 808099c:	62a5      	str	r5, [r4, #40]	; 0x28
	_speed = 0.0;
 808099e:	61a3      	str	r3, [r4, #24]
	_n = 0;
 80809a0:	6425      	str	r5, [r4, #64]	; 0x40
}
 80809a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (_n > 0)
 80809a6:	2b00      	cmp	r3, #0
 80809a8:	dd08      	ble.n	80809bc <_ZN12AccelStepper15computeNewSpeedEv+0x64>
	    if ((stepsToStop >= distanceTo) || _direction == DIRECTION_CCW)
 80809aa:	42a8      	cmp	r0, r5
 80809ac:	da03      	bge.n	80809b6 <_ZN12AccelStepper15computeNewSpeedEv+0x5e>
 80809ae:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80809b2:	2b00      	cmp	r3, #0
 80809b4:	d14d      	bne.n	8080a52 <_ZN12AccelStepper15computeNewSpeedEv+0xfa>
		_n = -stepsToStop; // Start deceleration
 80809b6:	4240      	negs	r0, r0
 80809b8:	6420      	str	r0, [r4, #64]	; 0x40
 80809ba:	e04a      	b.n	8080a52 <_ZN12AccelStepper15computeNewSpeedEv+0xfa>
	else if (_n < 0)
 80809bc:	d049      	beq.n	8080a52 <_ZN12AccelStepper15computeNewSpeedEv+0xfa>
	    if ((stepsToStop < distanceTo) && _direction == DIRECTION_CW)
 80809be:	42a8      	cmp	r0, r5
 80809c0:	da47      	bge.n	8080a52 <_ZN12AccelStepper15computeNewSpeedEv+0xfa>
 80809c2:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 80809c6:	2a00      	cmp	r2, #0
 80809c8:	d043      	beq.n	8080a52 <_ZN12AccelStepper15computeNewSpeedEv+0xfa>
		_n = -_n; // Start accceleration
 80809ca:	425b      	negs	r3, r3
 80809cc:	6423      	str	r3, [r4, #64]	; 0x40
 80809ce:	e040      	b.n	8080a52 <_ZN12AccelStepper15computeNewSpeedEv+0xfa>
	else if (_n < 0)
 80809d0:	d03f      	beq.n	8080a52 <_ZN12AccelStepper15computeNewSpeedEv+0xfa>
	    if ((stepsToStop < -distanceTo) && _direction == DIRECTION_CCW)
 80809d2:	1bf6      	subs	r6, r6, r7
 80809d4:	4286      	cmp	r6, r0
 80809d6:	dd3c      	ble.n	8080a52 <_ZN12AccelStepper15computeNewSpeedEv+0xfa>
 80809d8:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 80809dc:	2a00      	cmp	r2, #0
 80809de:	d138      	bne.n	8080a52 <_ZN12AccelStepper15computeNewSpeedEv+0xfa>
 80809e0:	e7f3      	b.n	80809ca <_ZN12AccelStepper15computeNewSpeedEv+0x72>
	_cn = _cn - ((2.0 * _cn) / ((4.0 * _n) + 1)); // Equation 13
 80809e2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80809e4:	f001 fb0a 	bl	8081ffc <__aeabi_f2d>
 80809e8:	4602      	mov	r2, r0
 80809ea:	460b      	mov	r3, r1
 80809ec:	4606      	mov	r6, r0
 80809ee:	460f      	mov	r7, r1
 80809f0:	f001 f9a6 	bl	8081d40 <__adddf3>
 80809f4:	4680      	mov	r8, r0
 80809f6:	4650      	mov	r0, sl
 80809f8:	4689      	mov	r9, r1
 80809fa:	f001 faed 	bl	8081fd8 <__aeabi_i2d>
 80809fe:	2200      	movs	r2, #0
 8080a00:	4b25      	ldr	r3, [pc, #148]	; (8080a98 <_ZN12AccelStepper15computeNewSpeedEv+0x140>)
 8080a02:	f001 fb53 	bl	80820ac <__aeabi_dmul>
 8080a06:	2200      	movs	r2, #0
 8080a08:	4b24      	ldr	r3, [pc, #144]	; (8080a9c <_ZN12AccelStepper15computeNewSpeedEv+0x144>)
 8080a0a:	f001 f999 	bl	8081d40 <__adddf3>
 8080a0e:	4602      	mov	r2, r0
 8080a10:	460b      	mov	r3, r1
 8080a12:	4640      	mov	r0, r8
 8080a14:	4649      	mov	r1, r9
 8080a16:	f001 fc73 	bl	8082300 <__aeabi_ddiv>
 8080a1a:	4602      	mov	r2, r0
 8080a1c:	460b      	mov	r3, r1
 8080a1e:	4630      	mov	r0, r6
 8080a20:	4639      	mov	r1, r7
 8080a22:	f001 f98b 	bl	8081d3c <__aeabi_dsub>
 8080a26:	f001 fe39 	bl	808269c <__aeabi_d2f>
	_cn = max(_cn, _cmin);
 8080a2a:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
	_cn = _cn - ((2.0 * _cn) / ((4.0 * _n) + 1)); // Equation 13
 8080a2c:	4605      	mov	r5, r0
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
 8080a2e:	4631      	mov	r1, r6
 8080a30:	f002 f94e 	bl	8082cd0 <__aeabi_fcmpgt>
 8080a34:	b900      	cbnz	r0, 8080a38 <_ZN12AccelStepper15computeNewSpeedEv+0xe0>
 8080a36:	4635      	mov	r5, r6
	_cn = max(_cn, _cmin);
 8080a38:	64a5      	str	r5, [r4, #72]	; 0x48
 8080a3a:	e017      	b.n	8080a6c <_ZN12AccelStepper15computeNewSpeedEv+0x114>
    if (distanceTo > 0)
 8080a3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8080a3e:	dcb2      	bgt.n	80809a6 <_ZN12AccelStepper15computeNewSpeedEv+0x4e>
	if (_n > 0)
 8080a40:	2b00      	cmp	r3, #0
 8080a42:	ddc5      	ble.n	80809d0 <_ZN12AccelStepper15computeNewSpeedEv+0x78>
	    if ((stepsToStop >= -distanceTo) || _direction == DIRECTION_CW)
 8080a44:	1bf6      	subs	r6, r6, r7
 8080a46:	4286      	cmp	r6, r0
 8080a48:	ddb5      	ble.n	80809b6 <_ZN12AccelStepper15computeNewSpeedEv+0x5e>
 8080a4a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8080a4e:	2b00      	cmp	r3, #0
 8080a50:	d1b1      	bne.n	80809b6 <_ZN12AccelStepper15computeNewSpeedEv+0x5e>
    if (_n == 0)
 8080a52:	f8d4 a040 	ldr.w	sl, [r4, #64]	; 0x40
 8080a56:	f1ba 0f00 	cmp.w	sl, #0
 8080a5a:	d1c2      	bne.n	80809e2 <_ZN12AccelStepper15computeNewSpeedEv+0x8a>
	_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
 8080a5c:	2d00      	cmp	r5, #0
 8080a5e:	bfd4      	ite	le
 8080a60:	2500      	movle	r5, #0
 8080a62:	2501      	movgt	r5, #1
	_cn = _c0;
 8080a64:	6c63      	ldr	r3, [r4, #68]	; 0x44
	_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
 8080a66:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
	_cn = _c0;
 8080a6a:	64a3      	str	r3, [r4, #72]	; 0x48
    _stepInterval = _cn;
 8080a6c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    _n++;
 8080a6e:	f10a 0301 	add.w	r3, sl, #1
 8080a72:	6423      	str	r3, [r4, #64]	; 0x40
    _stepInterval = _cn;
 8080a74:	4628      	mov	r0, r5
 8080a76:	f002 f95b 	bl	8082d30 <__aeabi_f2uiz>
    _speed = 1000000.0 / _cn;
 8080a7a:	4629      	mov	r1, r5
    _stepInterval = _cn;
 8080a7c:	62a0      	str	r0, [r4, #40]	; 0x28
    _speed = 1000000.0 / _cn;
 8080a7e:	4808      	ldr	r0, [pc, #32]	; (8080aa0 <_ZN12AccelStepper15computeNewSpeedEv+0x148>)
 8080a80:	f002 f81e 	bl	8082ac0 <__aeabi_fdiv>
    if (_direction == DIRECTION_CCW)
 8080a84:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    _speed = 1000000.0 / _cn;
 8080a88:	61a0      	str	r0, [r4, #24]
    if (_direction == DIRECTION_CCW)
 8080a8a:	2b00      	cmp	r3, #0
 8080a8c:	d189      	bne.n	80809a2 <_ZN12AccelStepper15computeNewSpeedEv+0x4a>
	_speed = -_speed;
 8080a8e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8080a92:	61a0      	str	r0, [r4, #24]
 8080a94:	e785      	b.n	80809a2 <_ZN12AccelStepper15computeNewSpeedEv+0x4a>
 8080a96:	bf00      	nop
 8080a98:	40100000 	.word	0x40100000
 8080a9c:	3ff00000 	.word	0x3ff00000
 8080aa0:	49742400 	.word	0x49742400

08080aa4 <_ZN12AccelStepper6moveToEl>:
    if (_targetPos != absolute)
 8080aa4:	6942      	ldr	r2, [r0, #20]
 8080aa6:	428a      	cmp	r2, r1
 8080aa8:	d002      	beq.n	8080ab0 <_ZN12AccelStepper6moveToEl+0xc>
	_targetPos = absolute;
 8080aaa:	6141      	str	r1, [r0, #20]
	computeNewSpeed();
 8080aac:	f7ff bf54 	b.w	8080958 <_ZN12AccelStepper15computeNewSpeedEv>
}
 8080ab0:	4770      	bx	lr
 8080ab2:	0000      	movs	r0, r0
 8080ab4:	0000      	movs	r0, r0
	...

08080ab8 <_ZN12AccelStepper15setAccelerationEf.part.0>:
void AccelStepper::setAcceleration(float acceleration)
 8080ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (_acceleration != acceleration)
 8080aba:	6a07      	ldr	r7, [r0, #32]
void AccelStepper::setAcceleration(float acceleration)
 8080abc:	4604      	mov	r4, r0
    if (_acceleration != acceleration)
 8080abe:	4638      	mov	r0, r7
void AccelStepper::setAcceleration(float acceleration)
 8080ac0:	460d      	mov	r5, r1
    if (_acceleration != acceleration)
 8080ac2:	f002 f8dd 	bl	8082c80 <__aeabi_fcmpeq>
 8080ac6:	bb68      	cbnz	r0, 8080b24 <_ZN12AccelStepper15setAccelerationEf.part.0+0x6c>
	_n = _n * (_acceleration / acceleration);
 8080ac8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8080aca:	f001 fef1 	bl	80828b0 <__aeabi_i2f>
 8080ace:	4629      	mov	r1, r5
 8080ad0:	4606      	mov	r6, r0
 8080ad2:	4638      	mov	r0, r7
 8080ad4:	f001 fff4 	bl	8082ac0 <__aeabi_fdiv>
 8080ad8:	4601      	mov	r1, r0
 8080ada:	4630      	mov	r0, r6
 8080adc:	f001 ff3c 	bl	8082958 <__aeabi_fmul>
 8080ae0:	f002 f900 	bl	8082ce4 <__aeabi_f2iz>
 8080ae4:	6420      	str	r0, [r4, #64]	; 0x40
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
 8080ae6:	4628      	mov	r0, r5
 8080ae8:	f001 fa88 	bl	8081ffc <__aeabi_f2d>
 8080aec:	4602      	mov	r2, r0
 8080aee:	460b      	mov	r3, r1
 8080af0:	2000      	movs	r0, #0
 8080af2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8080af6:	f001 fc03 	bl	8082300 <__aeabi_ddiv>
 8080afa:	f000 fff5 	bl	8081ae8 <sqrt>
 8080afe:	a30a      	add	r3, pc, #40	; (adr r3, 8080b28 <_ZN12AccelStepper15setAccelerationEf.part.0+0x70>)
 8080b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080b04:	f001 fad2 	bl	80820ac <__aeabi_dmul>
 8080b08:	a309      	add	r3, pc, #36	; (adr r3, 8080b30 <_ZN12AccelStepper15setAccelerationEf.part.0+0x78>)
 8080b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080b0e:	f001 facd 	bl	80820ac <__aeabi_dmul>
 8080b12:	f001 fdc3 	bl	808269c <__aeabi_d2f>
	_acceleration = acceleration;
 8080b16:	6225      	str	r5, [r4, #32]
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
 8080b18:	6460      	str	r0, [r4, #68]	; 0x44
	computeNewSpeed();
 8080b1a:	4620      	mov	r0, r4
}
 8080b1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	computeNewSpeed();
 8080b20:	f7ff bf1a 	b.w	8080958 <_ZN12AccelStepper15computeNewSpeedEv>
}
 8080b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8080b26:	bf00      	nop
 8080b28:	c083126f 	.word	0xc083126f
 8080b2c:	3fe5a1ca 	.word	0x3fe5a1ca
 8080b30:	00000000 	.word	0x00000000
 8080b34:	412e8480 	.word	0x412e8480

08080b38 <_ZN12AccelStepper3runEv>:
{
 8080b38:	b510      	push	{r4, lr}
 8080b3a:	4604      	mov	r4, r0
    if (runSpeed())
 8080b3c:	f7ff feee 	bl	808091c <_ZN12AccelStepper8runSpeedEv>
 8080b40:	b110      	cbz	r0, 8080b48 <_ZN12AccelStepper3runEv+0x10>
	computeNewSpeed();
 8080b42:	4620      	mov	r0, r4
 8080b44:	f7ff ff08 	bl	8080958 <_ZN12AccelStepper15computeNewSpeedEv>
    return _speed != 0.0 || distanceToGo() != 0;
 8080b48:	2100      	movs	r1, #0
 8080b4a:	69a0      	ldr	r0, [r4, #24]
 8080b4c:	f002 f898 	bl	8082c80 <__aeabi_fcmpeq>
 8080b50:	b128      	cbz	r0, 8080b5e <_ZN12AccelStepper3runEv+0x26>
 8080b52:	e9d4 3004 	ldrd	r3, r0, [r4, #16]
 8080b56:	1ac0      	subs	r0, r0, r3
 8080b58:	bf18      	it	ne
 8080b5a:	2001      	movne	r0, #1
}
 8080b5c:	bd10      	pop	{r4, pc}
    return _speed != 0.0 || distanceToGo() != 0;
 8080b5e:	2001      	movs	r0, #1
 8080b60:	e7fc      	b.n	8080b5c <_ZN12AccelStepper3runEv+0x24>
	...

08080b64 <_ZN12AccelStepperC1Ehhhhhb>:
    _minPulseWidth = 1;
 8080b64:	f04f 0c01 	mov.w	ip, #1
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
 8080b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080b6a:	4d19      	ldr	r5, [pc, #100]	; (8080bd0 <_ZN12AccelStepperC1Ehhhhhb+0x6c>)
    _maxSpeed = 1.0;
 8080b6c:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
 8080b70:	6005      	str	r5, [r0, #0]
    _interface = interface;
 8080b72:	7101      	strb	r1, [r0, #4]
    _speed = 0.0;
 8080b74:	2500      	movs	r5, #0
    _currentPos = 0;
 8080b76:	2100      	movs	r1, #0
    _minPulseWidth = 1;
 8080b78:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
    _enablePin = 0xff;
 8080b7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    _pin[1] = pin2;
 8080b80:	7183      	strb	r3, [r0, #6]
    _pin[2] = pin3;
 8080b82:	f89d 3018 	ldrb.w	r3, [sp, #24]
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
 8080b86:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _pin[2] = pin3;
 8080b8a:	71c3      	strb	r3, [r0, #7]
    _pin[3] = pin4;
 8080b8c:	f89d 301c 	ldrb.w	r3, [sp, #28]
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
 8080b90:	4604      	mov	r4, r0
    _targetPos = 0;
 8080b92:	e9c0 1104 	strd	r1, r1, [r0, #16]
    _speed = 0.0;
 8080b96:	6185      	str	r5, [r0, #24]
    _maxSpeed = 1.0;
 8080b98:	61c6      	str	r6, [r0, #28]
    _acceleration = 0.0;
 8080b9a:	6205      	str	r5, [r0, #32]
    _sqrt_twoa = 1.0;
 8080b9c:	6246      	str	r6, [r0, #36]	; 0x24
    _stepInterval = 0;
 8080b9e:	6281      	str	r1, [r0, #40]	; 0x28
    _enablePin = 0xff;
 8080ba0:	f880 c035 	strb.w	ip, [r0, #53]	; 0x35
    _lastStepTime = 0;
 8080ba4:	62c1      	str	r1, [r0, #44]	; 0x2c
    _pin[0] = pin1;
 8080ba6:	7142      	strb	r2, [r0, #5]
    _pin[3] = pin4;
 8080ba8:	7203      	strb	r3, [r0, #8]
    _n = 0;
 8080baa:	6401      	str	r1, [r0, #64]	; 0x40
    _c0 = 0.0;
 8080bac:	6445      	str	r5, [r0, #68]	; 0x44
    _cn = 0.0;
 8080bae:	6485      	str	r5, [r0, #72]	; 0x48
    _cmin = 1.0;
 8080bb0:	64c6      	str	r6, [r0, #76]	; 0x4c
    _direction = DIRECTION_CCW;
 8080bb2:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
	_pinInverted[i] = 0;
 8080bb6:	7241      	strb	r1, [r0, #9]
 8080bb8:	8141      	strh	r1, [r0, #10]
 8080bba:	7301      	strb	r1, [r0, #12]
    if (enable)
 8080bbc:	b10f      	cbz	r7, 8080bc2 <_ZN12AccelStepperC1Ehhhhhb+0x5e>
	enableOutputs();
 8080bbe:	f7ff fe7b 	bl	80808b8 <_ZN12AccelStepper13enableOutputsEv>
    if (acceleration == 0.0)
 8080bc2:	4620      	mov	r0, r4
 8080bc4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8080bc8:	f7ff ff76 	bl	8080ab8 <_ZN12AccelStepper15setAccelerationEf.part.0>
}
 8080bcc:	4620      	mov	r0, r4
 8080bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8080bd0:	08082eec 	.word	0x08082eec

08080bd4 <_ZN12AccelStepper11setMaxSpeedEf>:
{
 8080bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080bd6:	4604      	mov	r4, r0
    if (_maxSpeed != speed)
 8080bd8:	69c0      	ldr	r0, [r0, #28]
{
 8080bda:	460d      	mov	r5, r1
    if (_maxSpeed != speed)
 8080bdc:	f002 f850 	bl	8082c80 <__aeabi_fcmpeq>
 8080be0:	bb28      	cbnz	r0, 8080c2e <_ZN12AccelStepper11setMaxSpeedEf+0x5a>
	_cmin = 1000000.0 / speed;
 8080be2:	4629      	mov	r1, r5
 8080be4:	4812      	ldr	r0, [pc, #72]	; (8080c30 <_ZN12AccelStepper11setMaxSpeedEf+0x5c>)
	_maxSpeed = speed;
 8080be6:	61e5      	str	r5, [r4, #28]
	_cmin = 1000000.0 / speed;
 8080be8:	f001 ff6a 	bl	8082ac0 <__aeabi_fdiv>
	if (_n > 0)
 8080bec:	6c23      	ldr	r3, [r4, #64]	; 0x40
	_cmin = 1000000.0 / speed;
 8080bee:	64e0      	str	r0, [r4, #76]	; 0x4c
	if (_n > 0)
 8080bf0:	2b00      	cmp	r3, #0
 8080bf2:	dd1c      	ble.n	8080c2e <_ZN12AccelStepper11setMaxSpeedEf+0x5a>
	    _n = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
 8080bf4:	69a1      	ldr	r1, [r4, #24]
 8080bf6:	4608      	mov	r0, r1
 8080bf8:	f001 feae 	bl	8082958 <__aeabi_fmul>
 8080bfc:	f001 f9fe 	bl	8081ffc <__aeabi_f2d>
 8080c00:	4606      	mov	r6, r0
 8080c02:	6a20      	ldr	r0, [r4, #32]
 8080c04:	460f      	mov	r7, r1
 8080c06:	f001 f9f9 	bl	8081ffc <__aeabi_f2d>
 8080c0a:	4602      	mov	r2, r0
 8080c0c:	460b      	mov	r3, r1
 8080c0e:	f001 f897 	bl	8081d40 <__adddf3>
 8080c12:	460b      	mov	r3, r1
 8080c14:	4602      	mov	r2, r0
 8080c16:	4639      	mov	r1, r7
 8080c18:	4630      	mov	r0, r6
 8080c1a:	f001 fb71 	bl	8082300 <__aeabi_ddiv>
 8080c1e:	f001 fcf5 	bl	808260c <__aeabi_d2iz>
 8080c22:	6420      	str	r0, [r4, #64]	; 0x40
	    computeNewSpeed();
 8080c24:	4620      	mov	r0, r4
}
 8080c26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	    computeNewSpeed();
 8080c2a:	f7ff be95 	b.w	8080958 <_ZN12AccelStepper15computeNewSpeedEv>
}
 8080c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8080c30:	49742400 	.word	0x49742400

08080c34 <_ZN12AccelStepper15setAccelerationEf>:
{
 8080c34:	b538      	push	{r3, r4, r5, lr}
 8080c36:	460c      	mov	r4, r1
 8080c38:	4605      	mov	r5, r0
    if (acceleration == 0.0)
 8080c3a:	2100      	movs	r1, #0
 8080c3c:	4620      	mov	r0, r4
 8080c3e:	f002 f81f 	bl	8082c80 <__aeabi_fcmpeq>
 8080c42:	b928      	cbnz	r0, 8080c50 <_ZN12AccelStepper15setAccelerationEf+0x1c>
 8080c44:	4621      	mov	r1, r4
 8080c46:	4628      	mov	r0, r5
}
 8080c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8080c4c:	f7ff bf34 	b.w	8080ab8 <_ZN12AccelStepper15setAccelerationEf.part.0>
 8080c50:	bd38      	pop	{r3, r4, r5, pc}
 8080c52:	0000      	movs	r0, r0
 8080c54:	0000      	movs	r0, r0
	...

08080c58 <_ZN12AccelStepper8setSpeedEf>:
{
 8080c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080c5a:	4604      	mov	r4, r0
    if (speed == _speed)
 8080c5c:	6980      	ldr	r0, [r0, #24]
{
 8080c5e:	460e      	mov	r6, r1
    if (speed == _speed)
 8080c60:	f002 f80e 	bl	8082c80 <__aeabi_fcmpeq>
 8080c64:	b9a8      	cbnz	r0, 8080c92 <_ZN12AccelStepper8setSpeedEf+0x3a>
    speed = constrain(speed, -_maxSpeed, _maxSpeed);
 8080c66:	69e7      	ldr	r7, [r4, #28]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 8080c68:	4630      	mov	r0, r6
 8080c6a:	f107 4500 	add.w	r5, r7, #2147483648	; 0x80000000
 8080c6e:	4629      	mov	r1, r5
 8080c70:	f002 f810 	bl	8082c94 <__aeabi_fcmplt>
 8080c74:	b928      	cbnz	r0, 8080c82 <_ZN12AccelStepper8setSpeedEf+0x2a>
 8080c76:	4639      	mov	r1, r7
 8080c78:	4630      	mov	r0, r6
 8080c7a:	f002 f829 	bl	8082cd0 <__aeabi_fcmpgt>
 8080c7e:	b948      	cbnz	r0, 8080c94 <_ZN12AccelStepper8setSpeedEf+0x3c>
 8080c80:	4635      	mov	r5, r6
    if (speed == 0.0)
 8080c82:	2100      	movs	r1, #0
 8080c84:	4628      	mov	r0, r5
 8080c86:	f001 fffb 	bl	8082c80 <__aeabi_fcmpeq>
 8080c8a:	b128      	cbz	r0, 8080c98 <_ZN12AccelStepper8setSpeedEf+0x40>
	_stepInterval = 0;
 8080c8c:	2300      	movs	r3, #0
 8080c8e:	62a3      	str	r3, [r4, #40]	; 0x28
    _speed = speed;
 8080c90:	61a5      	str	r5, [r4, #24]
}
 8080c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8080c94:	463d      	mov	r5, r7
 8080c96:	e7f4      	b.n	8080c82 <_ZN12AccelStepper8setSpeedEf+0x2a>
	_stepInterval = fabs(1000000.0 / speed);
 8080c98:	4628      	mov	r0, r5
 8080c9a:	f001 f9af 	bl	8081ffc <__aeabi_f2d>
 8080c9e:	4602      	mov	r2, r0
 8080ca0:	460b      	mov	r3, r1
 8080ca2:	a10b      	add	r1, pc, #44	; (adr r1, 8080cd0 <_ZN12AccelStepper8setSpeedEf+0x78>)
 8080ca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8080ca8:	f001 fb2a 	bl	8082300 <__aeabi_ddiv>
 8080cac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8080cb0:	4619      	mov	r1, r3
 8080cb2:	f001 fcd3 	bl	808265c <__aeabi_d2uiz>
	_direction = (speed > 0.0) ? DIRECTION_CW : DIRECTION_CCW;
 8080cb6:	2100      	movs	r1, #0
	_stepInterval = fabs(1000000.0 / speed);
 8080cb8:	62a0      	str	r0, [r4, #40]	; 0x28
	_direction = (speed > 0.0) ? DIRECTION_CW : DIRECTION_CCW;
 8080cba:	4628      	mov	r0, r5
 8080cbc:	f002 f808 	bl	8082cd0 <__aeabi_fcmpgt>
 8080cc0:	3800      	subs	r0, #0
 8080cc2:	bf18      	it	ne
 8080cc4:	2001      	movne	r0, #1
 8080cc6:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
 8080cca:	e7e1      	b.n	8080c90 <_ZN12AccelStepper8setSpeedEf+0x38>
 8080ccc:	f3af 8000 	nop.w
 8080cd0:	00000000 	.word	0x00000000
 8080cd4:	412e8480 	.word	0x412e8480

08080cd8 <_ZN12AccelStepper13runToPositionEv>:
    _enableInverted = enableInvert;
}

// Blocks until the target position is reached and stopped
void AccelStepper::runToPosition()
{
 8080cd8:	b510      	push	{r4, lr}
 8080cda:	4604      	mov	r4, r0
    while (run())
 8080cdc:	4620      	mov	r0, r4
 8080cde:	f7ff ff2b 	bl	8080b38 <_ZN12AccelStepper3runEv>
 8080ce2:	2800      	cmp	r0, #0
 8080ce4:	d1fa      	bne.n	8080cdc <_ZN12AccelStepper13runToPositionEv+0x4>
	;
}
 8080ce6:	bd10      	pop	{r4, pc}

08080ce8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8080ce8:	b508      	push	{r3, lr}
 8080cea:	4b02      	ldr	r3, [pc, #8]	; (8080cf4 <HAL_USB_USART_Init+0xc>)
 8080cec:	681b      	ldr	r3, [r3, #0]
 8080cee:	681b      	ldr	r3, [r3, #0]
 8080cf0:	9301      	str	r3, [sp, #4]
 8080cf2:	bd08      	pop	{r3, pc}
 8080cf4:	0806001c 	.word	0x0806001c

08080cf8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8080cf8:	b508      	push	{r3, lr}
 8080cfa:	4b02      	ldr	r3, [pc, #8]	; (8080d04 <HAL_USB_USART_Available_Data+0xc>)
 8080cfc:	681b      	ldr	r3, [r3, #0]
 8080cfe:	691b      	ldr	r3, [r3, #16]
 8080d00:	9301      	str	r3, [sp, #4]
 8080d02:	bd08      	pop	{r3, pc}
 8080d04:	0806001c 	.word	0x0806001c

08080d08 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8080d08:	b508      	push	{r3, lr}
 8080d0a:	4b02      	ldr	r3, [pc, #8]	; (8080d14 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8080d0c:	681b      	ldr	r3, [r3, #0]
 8080d0e:	695b      	ldr	r3, [r3, #20]
 8080d10:	9301      	str	r3, [sp, #4]
 8080d12:	bd08      	pop	{r3, pc}
 8080d14:	0806001c 	.word	0x0806001c

08080d18 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080d18:	b508      	push	{r3, lr}
 8080d1a:	4b02      	ldr	r3, [pc, #8]	; (8080d24 <HAL_USB_USART_Receive_Data+0xc>)
 8080d1c:	681b      	ldr	r3, [r3, #0]
 8080d1e:	699b      	ldr	r3, [r3, #24]
 8080d20:	9301      	str	r3, [sp, #4]
 8080d22:	bd08      	pop	{r3, pc}
 8080d24:	0806001c 	.word	0x0806001c

08080d28 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080d28:	b508      	push	{r3, lr}
 8080d2a:	4b02      	ldr	r3, [pc, #8]	; (8080d34 <HAL_USB_USART_Send_Data+0xc>)
 8080d2c:	681b      	ldr	r3, [r3, #0]
 8080d2e:	69db      	ldr	r3, [r3, #28]
 8080d30:	9301      	str	r3, [sp, #4]
 8080d32:	bd08      	pop	{r3, pc}
 8080d34:	0806001c 	.word	0x0806001c

08080d38 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080d38:	b508      	push	{r3, lr}
 8080d3a:	4b02      	ldr	r3, [pc, #8]	; (8080d44 <HAL_USB_USART_Flush_Data+0xc>)
 8080d3c:	681b      	ldr	r3, [r3, #0]
 8080d3e:	6a1b      	ldr	r3, [r3, #32]
 8080d40:	9301      	str	r3, [sp, #4]
 8080d42:	bd08      	pop	{r3, pc}
 8080d44:	0806001c 	.word	0x0806001c

08080d48 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
 8080d48:	b508      	push	{r3, lr}
 8080d4a:	4b02      	ldr	r3, [pc, #8]	; (8080d54 <HAL_Servo_Attach+0xc>)
 8080d4c:	681b      	ldr	r3, [r3, #0]
 8080d4e:	691b      	ldr	r3, [r3, #16]
 8080d50:	9301      	str	r3, [sp, #4]
 8080d52:	bd08      	pop	{r3, pc}
 8080d54:	080401a8 	.word	0x080401a8

08080d58 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
 8080d58:	b508      	push	{r3, lr}
 8080d5a:	4b02      	ldr	r3, [pc, #8]	; (8080d64 <HAL_Servo_Detach+0xc>)
 8080d5c:	681b      	ldr	r3, [r3, #0]
 8080d5e:	695b      	ldr	r3, [r3, #20]
 8080d60:	9301      	str	r3, [sp, #4]
 8080d62:	bd08      	pop	{r3, pc}
 8080d64:	080401a8 	.word	0x080401a8

08080d68 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
 8080d68:	b508      	push	{r3, lr}
 8080d6a:	4b02      	ldr	r3, [pc, #8]	; (8080d74 <HAL_Servo_Write_Pulse_Width+0xc>)
 8080d6c:	681b      	ldr	r3, [r3, #0]
 8080d6e:	699b      	ldr	r3, [r3, #24]
 8080d70:	9301      	str	r3, [sp, #4]
 8080d72:	bd08      	pop	{r3, pc}
 8080d74:	080401a8 	.word	0x080401a8

08080d78 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8080d78:	b508      	push	{r3, lr}
 8080d7a:	4b02      	ldr	r3, [pc, #8]	; (8080d84 <inet_gethostbyname+0xc>)
 8080d7c:	681b      	ldr	r3, [r3, #0]
 8080d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080d80:	9301      	str	r3, [sp, #4]
 8080d82:	bd08      	pop	{r3, pc}
 8080d84:	08060020 	.word	0x08060020

08080d88 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 8080d88:	b508      	push	{r3, lr}
 8080d8a:	4b02      	ldr	r3, [pc, #8]	; (8080d94 <hal_spi_init+0xc>)
 8080d8c:	681b      	ldr	r3, [r3, #0]
 8080d8e:	69db      	ldr	r3, [r3, #28]
 8080d90:	9301      	str	r3, [sp, #4]
 8080d92:	bd08      	pop	{r3, pc}
 8080d94:	080401b4 	.word	0x080401b4

08080d98 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 8080d98:	b508      	push	{r3, lr}
 8080d9a:	4b02      	ldr	r3, [pc, #8]	; (8080da4 <hal_spi_is_enabled+0xc>)
 8080d9c:	681b      	ldr	r3, [r3, #0]
 8080d9e:	6a1b      	ldr	r3, [r3, #32]
 8080da0:	9301      	str	r3, [sp, #4]
 8080da2:	bd08      	pop	{r3, pc}
 8080da4:	080401b4 	.word	0x080401b4

08080da8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 8080da8:	b508      	push	{r3, lr}
 8080daa:	4b02      	ldr	r3, [pc, #8]	; (8080db4 <hal_i2c_write+0xc>)
 8080dac:	681b      	ldr	r3, [r3, #0]
 8080dae:	6a1b      	ldr	r3, [r3, #32]
 8080db0:	9301      	str	r3, [sp, #4]
 8080db2:	bd08      	pop	{r3, pc}
 8080db4:	080401ac 	.word	0x080401ac

08080db8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 8080db8:	b508      	push	{r3, lr}
 8080dba:	4b02      	ldr	r3, [pc, #8]	; (8080dc4 <hal_i2c_available+0xc>)
 8080dbc:	681b      	ldr	r3, [r3, #0]
 8080dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080dc0:	9301      	str	r3, [sp, #4]
 8080dc2:	bd08      	pop	{r3, pc}
 8080dc4:	080401ac 	.word	0x080401ac

08080dc8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 8080dc8:	b508      	push	{r3, lr}
 8080dca:	4b02      	ldr	r3, [pc, #8]	; (8080dd4 <hal_i2c_read+0xc>)
 8080dcc:	681b      	ldr	r3, [r3, #0]
 8080dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080dd0:	9301      	str	r3, [sp, #4]
 8080dd2:	bd08      	pop	{r3, pc}
 8080dd4:	080401ac 	.word	0x080401ac

08080dd8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 8080dd8:	b508      	push	{r3, lr}
 8080dda:	4b02      	ldr	r3, [pc, #8]	; (8080de4 <hal_i2c_peek+0xc>)
 8080ddc:	681b      	ldr	r3, [r3, #0]
 8080dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080de0:	9301      	str	r3, [sp, #4]
 8080de2:	bd08      	pop	{r3, pc}
 8080de4:	080401ac 	.word	0x080401ac

08080de8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 8080de8:	b508      	push	{r3, lr}
 8080dea:	4b02      	ldr	r3, [pc, #8]	; (8080df4 <hal_i2c_flush+0xc>)
 8080dec:	681b      	ldr	r3, [r3, #0]
 8080dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080df0:	9301      	str	r3, [sp, #4]
 8080df2:	bd08      	pop	{r3, pc}
 8080df4:	080401ac 	.word	0x080401ac

08080df8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 8080df8:	b508      	push	{r3, lr}
 8080dfa:	4b02      	ldr	r3, [pc, #8]	; (8080e04 <hal_i2c_is_enabled+0xc>)
 8080dfc:	681b      	ldr	r3, [r3, #0]
 8080dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080e00:	9301      	str	r3, [sp, #4]
 8080e02:	bd08      	pop	{r3, pc}
 8080e04:	080401ac 	.word	0x080401ac

08080e08 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 8080e08:	b508      	push	{r3, lr}
 8080e0a:	4b02      	ldr	r3, [pc, #8]	; (8080e14 <hal_i2c_init+0xc>)
 8080e0c:	681b      	ldr	r3, [r3, #0]
 8080e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080e10:	9301      	str	r3, [sp, #4]
 8080e12:	bd08      	pop	{r3, pc}
 8080e14:	080401ac 	.word	0x080401ac

08080e18 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 8080e18:	b508      	push	{r3, lr}
 8080e1a:	4b02      	ldr	r3, [pc, #8]	; (8080e24 <hal_usart_init+0xc>)
 8080e1c:	681b      	ldr	r3, [r3, #0]
 8080e1e:	699b      	ldr	r3, [r3, #24]
 8080e20:	9301      	str	r3, [sp, #4]
 8080e22:	bd08      	pop	{r3, pc}
 8080e24:	080401c4 	.word	0x080401c4

08080e28 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 8080e28:	b508      	push	{r3, lr}
 8080e2a:	4b02      	ldr	r3, [pc, #8]	; (8080e34 <hal_usart_write+0xc>)
 8080e2c:	681b      	ldr	r3, [r3, #0]
 8080e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080e30:	9301      	str	r3, [sp, #4]
 8080e32:	bd08      	pop	{r3, pc}
 8080e34:	080401c4 	.word	0x080401c4

08080e38 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 8080e38:	b508      	push	{r3, lr}
 8080e3a:	4b02      	ldr	r3, [pc, #8]	; (8080e44 <hal_usart_available+0xc>)
 8080e3c:	681b      	ldr	r3, [r3, #0]
 8080e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080e40:	9301      	str	r3, [sp, #4]
 8080e42:	bd08      	pop	{r3, pc}
 8080e44:	080401c4 	.word	0x080401c4

08080e48 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8080e48:	b508      	push	{r3, lr}
 8080e4a:	4b02      	ldr	r3, [pc, #8]	; (8080e54 <hal_usart_read+0xc>)
 8080e4c:	681b      	ldr	r3, [r3, #0]
 8080e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080e50:	9301      	str	r3, [sp, #4]
 8080e52:	bd08      	pop	{r3, pc}
 8080e54:	080401c4 	.word	0x080401c4

08080e58 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 8080e58:	b508      	push	{r3, lr}
 8080e5a:	4b02      	ldr	r3, [pc, #8]	; (8080e64 <hal_usart_peek+0xc>)
 8080e5c:	681b      	ldr	r3, [r3, #0]
 8080e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080e60:	9301      	str	r3, [sp, #4]
 8080e62:	bd08      	pop	{r3, pc}
 8080e64:	080401c4 	.word	0x080401c4

08080e68 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8080e68:	b508      	push	{r3, lr}
 8080e6a:	4b02      	ldr	r3, [pc, #8]	; (8080e74 <hal_usart_flush+0xc>)
 8080e6c:	681b      	ldr	r3, [r3, #0]
 8080e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080e70:	9301      	str	r3, [sp, #4]
 8080e72:	bd08      	pop	{r3, pc}
 8080e74:	080401c4 	.word	0x080401c4

08080e78 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 8080e78:	b508      	push	{r3, lr}
 8080e7a:	4b02      	ldr	r3, [pc, #8]	; (8080e84 <hal_usart_is_enabled+0xc>)
 8080e7c:	681b      	ldr	r3, [r3, #0]
 8080e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8080e80:	9301      	str	r3, [sp, #4]
 8080e82:	bd08      	pop	{r3, pc}
 8080e84:	080401c4 	.word	0x080401c4

08080e88 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8080e88:	b508      	push	{r3, lr}
 8080e8a:	4b02      	ldr	r3, [pc, #8]	; (8080e94 <hal_usart_available_data_for_write+0xc>)
 8080e8c:	681b      	ldr	r3, [r3, #0]
 8080e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080e90:	9301      	str	r3, [sp, #4]
 8080e92:	bd08      	pop	{r3, pc}
 8080e94:	080401c4 	.word	0x080401c4

08080e98 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8080e98:	b508      	push	{r3, lr}
 8080e9a:	4b02      	ldr	r3, [pc, #8]	; (8080ea4 <os_mutex_recursive_create+0xc>)
 8080e9c:	681b      	ldr	r3, [r3, #0]
 8080e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080ea0:	9301      	str	r3, [sp, #4]
 8080ea2:	bd08      	pop	{r3, pc}
 8080ea4:	080401d0 	.word	0x080401d0

08080ea8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8080ea8:	b508      	push	{r3, lr}
 8080eaa:	4b02      	ldr	r3, [pc, #8]	; (8080eb4 <os_mutex_recursive_destroy+0xc>)
 8080eac:	681b      	ldr	r3, [r3, #0]
 8080eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8080eb0:	9301      	str	r3, [sp, #4]
 8080eb2:	bd08      	pop	{r3, pc}
 8080eb4:	080401d0 	.word	0x080401d0

08080eb8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8080eb8:	b508      	push	{r3, lr}
 8080eba:	4b02      	ldr	r3, [pc, #8]	; (8080ec4 <HAL_RNG_GetRandomNumber+0xc>)
 8080ebc:	681b      	ldr	r3, [r3, #0]
 8080ebe:	685b      	ldr	r3, [r3, #4]
 8080ec0:	9301      	str	r3, [sp, #4]
 8080ec2:	bd08      	pop	{r3, pc}
 8080ec4:	0804019c 	.word	0x0804019c

08080ec8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8080ec8:	b508      	push	{r3, lr}
 8080eca:	4b02      	ldr	r3, [pc, #8]	; (8080ed4 <HAL_Delay_Microseconds+0xc>)
 8080ecc:	681b      	ldr	r3, [r3, #0]
 8080ece:	68db      	ldr	r3, [r3, #12]
 8080ed0:	9301      	str	r3, [sp, #4]
 8080ed2:	bd08      	pop	{r3, pc}
 8080ed4:	0804019c 	.word	0x0804019c

08080ed8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 8080ed8:	b508      	push	{r3, lr}
 8080eda:	4b02      	ldr	r3, [pc, #8]	; (8080ee4 <HAL_Timer_Get_Micro_Seconds+0xc>)
 8080edc:	681b      	ldr	r3, [r3, #0]
 8080ede:	691b      	ldr	r3, [r3, #16]
 8080ee0:	9301      	str	r3, [sp, #4]
 8080ee2:	bd08      	pop	{r3, pc}
 8080ee4:	0804019c 	.word	0x0804019c

08080ee8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8080ee8:	b508      	push	{r3, lr}
 8080eea:	4b02      	ldr	r3, [pc, #8]	; (8080ef4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8080eec:	681b      	ldr	r3, [r3, #0]
 8080eee:	695b      	ldr	r3, [r3, #20]
 8080ef0:	9301      	str	r3, [sp, #4]
 8080ef2:	bd08      	pop	{r3, pc}
 8080ef4:	0804019c 	.word	0x0804019c

08080ef8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8080ef8:	b508      	push	{r3, lr}
 8080efa:	4b02      	ldr	r3, [pc, #8]	; (8080f04 <HAL_Validate_Pin_Function+0xc>)
 8080efc:	681b      	ldr	r3, [r3, #0]
 8080efe:	685b      	ldr	r3, [r3, #4]
 8080f00:	9301      	str	r3, [sp, #4]
 8080f02:	bd08      	pop	{r3, pc}
 8080f04:	080401b0 	.word	0x080401b0

08080f08 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8080f08:	b508      	push	{r3, lr}
 8080f0a:	4b02      	ldr	r3, [pc, #8]	; (8080f14 <HAL_Pin_Mode+0xc>)
 8080f0c:	681b      	ldr	r3, [r3, #0]
 8080f0e:	689b      	ldr	r3, [r3, #8]
 8080f10:	9301      	str	r3, [sp, #4]
 8080f12:	bd08      	pop	{r3, pc}
 8080f14:	080401b0 	.word	0x080401b0

08080f18 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8080f18:	b508      	push	{r3, lr}
 8080f1a:	4b02      	ldr	r3, [pc, #8]	; (8080f24 <HAL_Get_Pin_Mode+0xc>)
 8080f1c:	681b      	ldr	r3, [r3, #0]
 8080f1e:	68db      	ldr	r3, [r3, #12]
 8080f20:	9301      	str	r3, [sp, #4]
 8080f22:	bd08      	pop	{r3, pc}
 8080f24:	080401b0 	.word	0x080401b0

08080f28 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8080f28:	b508      	push	{r3, lr}
 8080f2a:	4b02      	ldr	r3, [pc, #8]	; (8080f34 <HAL_GPIO_Write+0xc>)
 8080f2c:	681b      	ldr	r3, [r3, #0]
 8080f2e:	691b      	ldr	r3, [r3, #16]
 8080f30:	9301      	str	r3, [sp, #4]
 8080f32:	bd08      	pop	{r3, pc}
 8080f34:	080401b0 	.word	0x080401b0

08080f38 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8080f38:	b508      	push	{r3, lr}
 8080f3a:	4b02      	ldr	r3, [pc, #8]	; (8080f44 <spark_set_random_seed_from_cloud_handler+0xc>)
 8080f3c:	681b      	ldr	r3, [r3, #0]
 8080f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080f40:	9301      	str	r3, [sp, #4]
 8080f42:	bd08      	pop	{r3, pc}
 8080f44:	080401cc 	.word	0x080401cc

08080f48 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8080f48:	b508      	push	{r3, lr}
 8080f4a:	4b02      	ldr	r3, [pc, #8]	; (8080f54 <network_connect+0xc>)
 8080f4c:	681b      	ldr	r3, [r3, #0]
 8080f4e:	685b      	ldr	r3, [r3, #4]
 8080f50:	9301      	str	r3, [sp, #4]
 8080f52:	bd08      	pop	{r3, pc}
 8080f54:	080401c8 	.word	0x080401c8

08080f58 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8080f58:	b508      	push	{r3, lr}
 8080f5a:	4b02      	ldr	r3, [pc, #8]	; (8080f64 <network_connecting+0xc>)
 8080f5c:	681b      	ldr	r3, [r3, #0]
 8080f5e:	689b      	ldr	r3, [r3, #8]
 8080f60:	9301      	str	r3, [sp, #4]
 8080f62:	bd08      	pop	{r3, pc}
 8080f64:	080401c8 	.word	0x080401c8

08080f68 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8080f68:	b508      	push	{r3, lr}
 8080f6a:	4b02      	ldr	r3, [pc, #8]	; (8080f74 <network_disconnect+0xc>)
 8080f6c:	681b      	ldr	r3, [r3, #0]
 8080f6e:	68db      	ldr	r3, [r3, #12]
 8080f70:	9301      	str	r3, [sp, #4]
 8080f72:	bd08      	pop	{r3, pc}
 8080f74:	080401c8 	.word	0x080401c8

08080f78 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8080f78:	b508      	push	{r3, lr}
 8080f7a:	4b02      	ldr	r3, [pc, #8]	; (8080f84 <network_ready+0xc>)
 8080f7c:	681b      	ldr	r3, [r3, #0]
 8080f7e:	691b      	ldr	r3, [r3, #16]
 8080f80:	9301      	str	r3, [sp, #4]
 8080f82:	bd08      	pop	{r3, pc}
 8080f84:	080401c8 	.word	0x080401c8

08080f88 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8080f88:	b508      	push	{r3, lr}
 8080f8a:	4b02      	ldr	r3, [pc, #8]	; (8080f94 <network_on+0xc>)
 8080f8c:	681b      	ldr	r3, [r3, #0]
 8080f8e:	695b      	ldr	r3, [r3, #20]
 8080f90:	9301      	str	r3, [sp, #4]
 8080f92:	bd08      	pop	{r3, pc}
 8080f94:	080401c8 	.word	0x080401c8

08080f98 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8080f98:	b508      	push	{r3, lr}
 8080f9a:	4b02      	ldr	r3, [pc, #8]	; (8080fa4 <network_off+0xc>)
 8080f9c:	681b      	ldr	r3, [r3, #0]
 8080f9e:	699b      	ldr	r3, [r3, #24]
 8080fa0:	9301      	str	r3, [sp, #4]
 8080fa2:	bd08      	pop	{r3, pc}
 8080fa4:	080401c8 	.word	0x080401c8

08080fa8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8080fa8:	b508      	push	{r3, lr}
 8080faa:	4b02      	ldr	r3, [pc, #8]	; (8080fb4 <network_listen+0xc>)
 8080fac:	681b      	ldr	r3, [r3, #0]
 8080fae:	69db      	ldr	r3, [r3, #28]
 8080fb0:	9301      	str	r3, [sp, #4]
 8080fb2:	bd08      	pop	{r3, pc}
 8080fb4:	080401c8 	.word	0x080401c8

08080fb8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8080fb8:	b508      	push	{r3, lr}
 8080fba:	4b02      	ldr	r3, [pc, #8]	; (8080fc4 <network_listening+0xc>)
 8080fbc:	681b      	ldr	r3, [r3, #0]
 8080fbe:	6a1b      	ldr	r3, [r3, #32]
 8080fc0:	9301      	str	r3, [sp, #4]
 8080fc2:	bd08      	pop	{r3, pc}
 8080fc4:	080401c8 	.word	0x080401c8

08080fc8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8080fc8:	b508      	push	{r3, lr}
 8080fca:	4b02      	ldr	r3, [pc, #8]	; (8080fd4 <network_set_listen_timeout+0xc>)
 8080fcc:	681b      	ldr	r3, [r3, #0]
 8080fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080fd0:	9301      	str	r3, [sp, #4]
 8080fd2:	bd08      	pop	{r3, pc}
 8080fd4:	080401c8 	.word	0x080401c8

08080fd8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8080fd8:	b508      	push	{r3, lr}
 8080fda:	4b02      	ldr	r3, [pc, #8]	; (8080fe4 <network_get_listen_timeout+0xc>)
 8080fdc:	681b      	ldr	r3, [r3, #0]
 8080fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080fe0:	9301      	str	r3, [sp, #4]
 8080fe2:	bd08      	pop	{r3, pc}
 8080fe4:	080401c8 	.word	0x080401c8

08080fe8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 8080fe8:	b508      	push	{r3, lr}
 8080fea:	4b02      	ldr	r3, [pc, #8]	; (8080ff4 <network_is_on+0xc>)
 8080fec:	681b      	ldr	r3, [r3, #0]
 8080fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080ff0:	9301      	str	r3, [sp, #4]
 8080ff2:	bd08      	pop	{r3, pc}
 8080ff4:	080401c8 	.word	0x080401c8

08080ff8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 8080ff8:	b508      	push	{r3, lr}
 8080ffa:	4b02      	ldr	r3, [pc, #8]	; (8081004 <network_is_off+0xc>)
 8080ffc:	681b      	ldr	r3, [r3, #0]
 8080ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081000:	9301      	str	r3, [sp, #4]
 8081002:	bd08      	pop	{r3, pc}
 8081004:	080401c8 	.word	0x080401c8

08081008 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8081008:	b508      	push	{r3, lr}
 808100a:	4b02      	ldr	r3, [pc, #8]	; (8081014 <set_system_mode+0xc>)
 808100c:	681b      	ldr	r3, [r3, #0]
 808100e:	685b      	ldr	r3, [r3, #4]
 8081010:	9301      	str	r3, [sp, #4]
 8081012:	bd08      	pop	{r3, pc}
 8081014:	080401a4 	.word	0x080401a4

08081018 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081018:	b508      	push	{r3, lr}
 808101a:	4b02      	ldr	r3, [pc, #8]	; (8081024 <system_delay_ms+0xc>)
 808101c:	681b      	ldr	r3, [r3, #0]
 808101e:	695b      	ldr	r3, [r3, #20]
 8081020:	9301      	str	r3, [sp, #4]
 8081022:	bd08      	pop	{r3, pc}
 8081024:	080401a4 	.word	0x080401a4

08081028 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081028:	b508      	push	{r3, lr}
 808102a:	4b03      	ldr	r3, [pc, #12]	; (8081038 <system_ctrl_set_app_request_handler+0x10>)
 808102c:	681b      	ldr	r3, [r3, #0]
 808102e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8081032:	9301      	str	r3, [sp, #4]
 8081034:	bd08      	pop	{r3, pc}
 8081036:	0000      	.short	0x0000
 8081038:	080401a4 	.word	0x080401a4

0808103c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 808103c:	b508      	push	{r3, lr}
 808103e:	4b03      	ldr	r3, [pc, #12]	; (808104c <system_ctrl_set_result+0x10>)
 8081040:	681b      	ldr	r3, [r3, #0]
 8081042:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8081046:	9301      	str	r3, [sp, #4]
 8081048:	bd08      	pop	{r3, pc}
 808104a:	0000      	.short	0x0000
 808104c:	080401a4 	.word	0x080401a4

08081050 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8081050:	b508      	push	{r3, lr}
 8081052:	4b02      	ldr	r3, [pc, #8]	; (808105c <malloc+0xc>)
 8081054:	681b      	ldr	r3, [r3, #0]
 8081056:	681b      	ldr	r3, [r3, #0]
 8081058:	9301      	str	r3, [sp, #4]
 808105a:	bd08      	pop	{r3, pc}
 808105c:	080401a0 	.word	0x080401a0

08081060 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8081060:	b508      	push	{r3, lr}
 8081062:	4b02      	ldr	r3, [pc, #8]	; (808106c <free+0xc>)
 8081064:	681b      	ldr	r3, [r3, #0]
 8081066:	685b      	ldr	r3, [r3, #4]
 8081068:	9301      	str	r3, [sp, #4]
 808106a:	bd08      	pop	{r3, pc}
 808106c:	080401a0 	.word	0x080401a0

08081070 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 8081070:	b508      	push	{r3, lr}
 8081072:	4b02      	ldr	r3, [pc, #8]	; (808107c <__errno+0xc>)
 8081074:	681b      	ldr	r3, [r3, #0]
 8081076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081078:	9301      	str	r3, [sp, #4]
 808107a:	bd08      	pop	{r3, pc}
 808107c:	080401a0 	.word	0x080401a0

08081080 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8081080:	b508      	push	{r3, lr}
 8081082:	4b02      	ldr	r3, [pc, #8]	; (808108c <newlib_impure_ptr_callback+0xc>)
 8081084:	681b      	ldr	r3, [r3, #0]
 8081086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081088:	9301      	str	r3, [sp, #4]
 808108a:	bd08      	pop	{r3, pc}
 808108c:	080401a0 	.word	0x080401a0

08081090 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8081090:	2300      	movs	r3, #0
 8081092:	6840      	ldr	r0, [r0, #4]
 8081094:	461a      	mov	r2, r3
 8081096:	f7ff bf57 	b.w	8080f48 <network_connect>

0808109a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808109a:	2200      	movs	r2, #0
 808109c:	2102      	movs	r1, #2
 808109e:	6840      	ldr	r0, [r0, #4]
 80810a0:	f7ff bf62 	b.w	8080f68 <network_disconnect>

080810a4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80810a4:	2200      	movs	r2, #0
 80810a6:	6840      	ldr	r0, [r0, #4]
 80810a8:	4611      	mov	r1, r2
 80810aa:	f7ff bf55 	b.w	8080f58 <network_connecting>

080810ae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80810ae:	2200      	movs	r2, #0
 80810b0:	6840      	ldr	r0, [r0, #4]
 80810b2:	4611      	mov	r1, r2
 80810b4:	f7ff bf60 	b.w	8080f78 <network_ready>

080810b8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80810b8:	2300      	movs	r3, #0
 80810ba:	6840      	ldr	r0, [r0, #4]
 80810bc:	461a      	mov	r2, r3
 80810be:	4619      	mov	r1, r3
 80810c0:	f7ff bf62 	b.w	8080f88 <network_on>

080810c4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80810c4:	2300      	movs	r3, #0
 80810c6:	6840      	ldr	r0, [r0, #4]
 80810c8:	461a      	mov	r2, r3
 80810ca:	4619      	mov	r1, r3
 80810cc:	f7ff bf64 	b.w	8080f98 <network_off>

080810d0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80810d0:	2100      	movs	r1, #0
 80810d2:	6840      	ldr	r0, [r0, #4]
 80810d4:	f7ff bf88 	b.w	8080fe8 <network_is_on>

080810d8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80810d8:	2100      	movs	r1, #0
 80810da:	6840      	ldr	r0, [r0, #4]
 80810dc:	f7ff bf8c 	b.w	8080ff8 <network_is_off>

080810e0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80810e0:	2200      	movs	r2, #0
 80810e2:	6840      	ldr	r0, [r0, #4]
 80810e4:	f081 0101 	eor.w	r1, r1, #1
 80810e8:	f7ff bf5e 	b.w	8080fa8 <network_listen>

080810ec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80810ec:	2200      	movs	r2, #0
 80810ee:	6840      	ldr	r0, [r0, #4]
 80810f0:	f7ff bf6a 	b.w	8080fc8 <network_set_listen_timeout>

080810f4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80810f4:	2200      	movs	r2, #0
 80810f6:	6840      	ldr	r0, [r0, #4]
 80810f8:	4611      	mov	r1, r2
 80810fa:	f7ff bf6d 	b.w	8080fd8 <network_get_listen_timeout>

080810fe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80810fe:	2200      	movs	r2, #0
 8081100:	6840      	ldr	r0, [r0, #4]
 8081102:	4611      	mov	r1, r2
 8081104:	f7ff bf58 	b.w	8080fb8 <network_listening>

08081108 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8081108:	b570      	push	{r4, r5, r6, lr}
 808110a:	4615      	mov	r5, r2
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808110c:	2600      	movs	r6, #0
 808110e:	b086      	sub	sp, #24
 8081110:	4604      	mov	r4, r0
    IPAddress addr;
 8081112:	a804      	add	r0, sp, #16
 8081114:	f000 f9d2 	bl	80814bc <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081118:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 808111a:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808111c:	f001 fe68 	bl	8082df0 <strlen>
 8081120:	4b0a      	ldr	r3, [pc, #40]	; (808114c <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 8081122:	9600      	str	r6, [sp, #0]
 8081124:	b281      	uxth	r1, r0
 8081126:	685b      	ldr	r3, [r3, #4]
 8081128:	4628      	mov	r0, r5
 808112a:	aa03      	add	r2, sp, #12
 808112c:	f7ff fe24 	bl	8080d78 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081130:	b130      	cbz	r0, 8081140 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8081132:	4631      	mov	r1, r6
 8081134:	4620      	mov	r0, r4
 8081136:	f000 f9d1 	bl	80814dc <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808113a:	4620      	mov	r0, r4
 808113c:	b006      	add	sp, #24
 808113e:	bd70      	pop	{r4, r5, r6, pc}
 8081140:	4620      	mov	r0, r4
 8081142:	a903      	add	r1, sp, #12
 8081144:	f000 f9c2 	bl	80814cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8081148:	e7f7      	b.n	808113a <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 808114a:	bf00      	nop
 808114c:	200005cc 	.word	0x200005cc

08081150 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8081150:	4b02      	ldr	r3, [pc, #8]	; (808115c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8081152:	4a03      	ldr	r2, [pc, #12]	; (8081160 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8081154:	601a      	str	r2, [r3, #0]
 8081156:	2200      	movs	r2, #0
 8081158:	605a      	str	r2, [r3, #4]

} // spark
 808115a:	4770      	bx	lr
 808115c:	20000168 	.word	0x20000168
 8081160:	08082f20 	.word	0x08082f20

08081164 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 8081164:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 8081166:	2600      	movs	r6, #0
 8081168:	4604      	mov	r4, r0
 808116a:	460d      	mov	r5, r1
 808116c:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 8081170:	f7ff fe92 	bl	8080e98 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 8081174:	4628      	mov	r0, r5
    _spi = spi;
 8081176:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 8081178:	f7ff fe06 	bl	8080d88 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 808117c:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 808117e:	6066      	str	r6, [r4, #4]
}
 8081180:	bd70      	pop	{r4, r5, r6, pc}

08081182 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8081182:	4770      	bx	lr

08081184 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081184:	7441      	strb	r1, [r0, #17]
}
 8081186:	4770      	bx	lr

08081188 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8081188:	4770      	bx	lr

0808118a <_ZN11USARTSerial17availableForWriteEv>:
{
 808118a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 808118c:	7c00      	ldrb	r0, [r0, #16]
 808118e:	f7ff fe7b 	bl	8080e88 <hal_usart_available_data_for_write>
}
 8081192:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081196:	bd08      	pop	{r3, pc}

08081198 <_ZN11USARTSerial9availableEv>:
{
 8081198:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 808119a:	7c00      	ldrb	r0, [r0, #16]
 808119c:	f7ff fe4c 	bl	8080e38 <hal_usart_available>
}
 80811a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80811a4:	bd08      	pop	{r3, pc}

080811a6 <_ZN11USARTSerial4peekEv>:
{
 80811a6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80811a8:	7c00      	ldrb	r0, [r0, #16]
 80811aa:	f7ff fe55 	bl	8080e58 <hal_usart_peek>
}
 80811ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80811b2:	bd08      	pop	{r3, pc}

080811b4 <_ZN11USARTSerial4readEv>:
{
 80811b4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80811b6:	7c00      	ldrb	r0, [r0, #16]
 80811b8:	f7ff fe46 	bl	8080e48 <hal_usart_read>
}
 80811bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80811c0:	bd08      	pop	{r3, pc}

080811c2 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80811c2:	7c00      	ldrb	r0, [r0, #16]
 80811c4:	f7ff be50 	b.w	8080e68 <hal_usart_flush>

080811c8 <_ZN11USARTSerial5writeEh>:
{
 80811c8:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80811ca:	7c46      	ldrb	r6, [r0, #17]
{
 80811cc:	4604      	mov	r4, r0
 80811ce:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80811d0:	b12e      	cbz	r6, 80811de <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80811d2:	4629      	mov	r1, r5
 80811d4:	7c20      	ldrb	r0, [r4, #16]
}
 80811d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80811da:	f7ff be25 	b.w	8080e28 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80811de:	7c00      	ldrb	r0, [r0, #16]
 80811e0:	f7ff fe52 	bl	8080e88 <hal_usart_available_data_for_write>
 80811e4:	2800      	cmp	r0, #0
 80811e6:	dcf4      	bgt.n	80811d2 <_ZN11USARTSerial5writeEh+0xa>
}
 80811e8:	4630      	mov	r0, r6
 80811ea:	bd70      	pop	{r4, r5, r6, pc}

080811ec <_ZN11USARTSerialD0Ev>:
 80811ec:	b510      	push	{r4, lr}
 80811ee:	4604      	mov	r4, r0
 80811f0:	2114      	movs	r1, #20
 80811f2:	f000 fc75 	bl	8081ae0 <_ZdlPvj>
 80811f6:	4620      	mov	r0, r4
 80811f8:	bd10      	pop	{r4, pc}
	...

080811fc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80811fc:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8081200:	b510      	push	{r4, lr}
 8081202:	4604      	mov	r4, r0
 8081204:	4608      	mov	r0, r1
 8081206:	4611      	mov	r1, r2
 8081208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808120c:	e9c4 c201 	strd	ip, r2, [r4, #4]
 8081210:	4a04      	ldr	r2, [pc, #16]	; (8081224 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 8081212:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8081214:	6022      	str	r2, [r4, #0]
  _blocking = true;
 8081216:	2201      	movs	r2, #1
 8081218:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 808121a:	461a      	mov	r2, r3
 808121c:	f7ff fdfc 	bl	8080e18 <hal_usart_init>
}
 8081220:	4620      	mov	r0, r4
 8081222:	bd10      	pop	{r4, pc}
 8081224:	08082f5c 	.word	0x08082f5c

08081228 <_Z22__fetch_global_Serial1v>:
{
 8081228:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808122a:	4d0c      	ldr	r5, [pc, #48]	; (808125c <_Z22__fetch_global_Serial1v+0x34>)
 808122c:	7829      	ldrb	r1, [r5, #0]
 808122e:	f3bf 8f5b 	dmb	ish
 8081232:	f011 0401 	ands.w	r4, r1, #1
 8081236:	d10f      	bne.n	8081258 <_Z22__fetch_global_Serial1v+0x30>
 8081238:	4628      	mov	r0, r5
 808123a:	f7fe ff32 	bl	80800a2 <__cxa_guard_acquire>
 808123e:	b158      	cbz	r0, 8081258 <_Z22__fetch_global_Serial1v+0x30>
 8081240:	4621      	mov	r1, r4
 8081242:	4b07      	ldr	r3, [pc, #28]	; (8081260 <_Z22__fetch_global_Serial1v+0x38>)
 8081244:	4a07      	ldr	r2, [pc, #28]	; (8081264 <_Z22__fetch_global_Serial1v+0x3c>)
 8081246:	4808      	ldr	r0, [pc, #32]	; (8081268 <_Z22__fetch_global_Serial1v+0x40>)
 8081248:	f7ff ffd8 	bl	80811fc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 808124c:	4628      	mov	r0, r5
 808124e:	f7fe ff2d 	bl	80800ac <__cxa_guard_release>
 8081252:	4806      	ldr	r0, [pc, #24]	; (808126c <_Z22__fetch_global_Serial1v+0x44>)
 8081254:	f001 fd8c 	bl	8082d70 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8081258:	4803      	ldr	r0, [pc, #12]	; (8081268 <_Z22__fetch_global_Serial1v+0x40>)
 808125a:	bd38      	pop	{r3, r4, r5, pc}
 808125c:	20000170 	.word	0x20000170
 8081260:	200001f8 	.word	0x200001f8
 8081264:	20000174 	.word	0x20000174
 8081268:	2000027c 	.word	0x2000027c
 808126c:	08081189 	.word	0x08081189

08081270 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 8081270:	4770      	bx	lr

08081272 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8081272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081274:	4606      	mov	r6, r0
 8081276:	4615      	mov	r5, r2
 8081278:	460c      	mov	r4, r1
 808127a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808127c:	42bc      	cmp	r4, r7
 808127e:	d006      	beq.n	808128e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8081280:	6833      	ldr	r3, [r6, #0]
 8081282:	4630      	mov	r0, r6
 8081284:	689b      	ldr	r3, [r3, #8]
 8081286:	f814 1b01 	ldrb.w	r1, [r4], #1
 808128a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 808128c:	e7f6      	b.n	808127c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 808128e:	4628      	mov	r0, r5
 8081290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081292 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 8081292:	2200      	movs	r2, #0
 8081294:	7c00      	ldrb	r0, [r0, #16]
 8081296:	f7ff bd87 	b.w	8080da8 <hal_i2c_write>

0808129a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 808129a:	2100      	movs	r1, #0
 808129c:	7c00      	ldrb	r0, [r0, #16]
 808129e:	f7ff bd8b 	b.w	8080db8 <hal_i2c_available>

080812a2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80812a2:	2100      	movs	r1, #0
 80812a4:	7c00      	ldrb	r0, [r0, #16]
 80812a6:	f7ff bd8f 	b.w	8080dc8 <hal_i2c_read>

080812aa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80812aa:	2100      	movs	r1, #0
 80812ac:	7c00      	ldrb	r0, [r0, #16]
 80812ae:	f7ff bd93 	b.w	8080dd8 <hal_i2c_peek>

080812b2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80812b2:	2100      	movs	r1, #0
 80812b4:	7c00      	ldrb	r0, [r0, #16]
 80812b6:	f7ff bd97 	b.w	8080de8 <hal_i2c_flush>

080812ba <_ZN7TwoWireD0Ev>:
 80812ba:	b510      	push	{r4, lr}
 80812bc:	4604      	mov	r4, r0
 80812be:	2114      	movs	r1, #20
 80812c0:	f000 fc0e 	bl	8081ae0 <_ZdlPvj>
 80812c4:	4620      	mov	r0, r4
 80812c6:	bd10      	pop	{r4, pc}

080812c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80812c8:	b510      	push	{r4, lr}
 80812ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80812ce:	4604      	mov	r4, r0
 80812d0:	4608      	mov	r0, r1
 80812d2:	2100      	movs	r1, #0
 80812d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80812d8:	4b03      	ldr	r3, [pc, #12]	; (80812e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80812da:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80812dc:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80812de:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80812e0:	f7ff fd92 	bl	8080e08 <hal_i2c_init>
}
 80812e4:	4620      	mov	r0, r4
 80812e6:	bd10      	pop	{r4, pc}
 80812e8:	08082f8c 	.word	0x08082f8c

080812ec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80812ec:	7441      	strb	r1, [r0, #17]
}
 80812ee:	4770      	bx	lr

080812f0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80812f0:	4770      	bx	lr

080812f2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80812f2:	4770      	bx	lr

080812f4 <_ZN9USBSerial4readEv>:
{
 80812f4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80812f6:	2100      	movs	r1, #0
 80812f8:	7c00      	ldrb	r0, [r0, #16]
 80812fa:	f7ff fd0d 	bl	8080d18 <HAL_USB_USART_Receive_Data>
}
 80812fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8081302:	bd08      	pop	{r3, pc}

08081304 <_ZN9USBSerial4peekEv>:
{
 8081304:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8081306:	2101      	movs	r1, #1
 8081308:	7c00      	ldrb	r0, [r0, #16]
 808130a:	f7ff fd05 	bl	8080d18 <HAL_USB_USART_Receive_Data>
}
 808130e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8081312:	bd08      	pop	{r3, pc}

08081314 <_ZN9USBSerial17availableForWriteEv>:
{
 8081314:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8081316:	7c00      	ldrb	r0, [r0, #16]
 8081318:	f7ff fcf6 	bl	8080d08 <HAL_USB_USART_Available_Data_For_Write>
}
 808131c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081320:	bd08      	pop	{r3, pc}

08081322 <_ZN9USBSerial9availableEv>:
{
 8081322:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8081324:	7c00      	ldrb	r0, [r0, #16]
 8081326:	f7ff fce7 	bl	8080cf8 <HAL_USB_USART_Available_Data>
}
 808132a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808132e:	bd08      	pop	{r3, pc}

08081330 <_ZN9USBSerial5writeEh>:
{
 8081330:	b538      	push	{r3, r4, r5, lr}
 8081332:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081334:	7c00      	ldrb	r0, [r0, #16]
{
 8081336:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081338:	f7ff fce6 	bl	8080d08 <HAL_USB_USART_Available_Data_For_Write>
 808133c:	2800      	cmp	r0, #0
 808133e:	dc01      	bgt.n	8081344 <_ZN9USBSerial5writeEh+0x14>
 8081340:	7c60      	ldrb	r0, [r4, #17]
 8081342:	b128      	cbz	r0, 8081350 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8081344:	4629      	mov	r1, r5
 8081346:	7c20      	ldrb	r0, [r4, #16]
 8081348:	f7ff fcee 	bl	8080d28 <HAL_USB_USART_Send_Data>
 808134c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8081350:	bd38      	pop	{r3, r4, r5, pc}

08081352 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8081352:	7c00      	ldrb	r0, [r0, #16]
 8081354:	f7ff bcf0 	b.w	8080d38 <HAL_USB_USART_Flush_Data>

08081358 <_ZN9USBSerialD0Ev>:
 8081358:	b510      	push	{r4, lr}
 808135a:	4604      	mov	r4, r0
 808135c:	2114      	movs	r1, #20
 808135e:	f000 fbbf 	bl	8081ae0 <_ZdlPvj>
 8081362:	4620      	mov	r0, r4
 8081364:	bd10      	pop	{r4, pc}

08081366 <__tcf_1>:
 8081366:	4770      	bx	lr

08081368 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8081368:	b510      	push	{r4, lr}
 808136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808136e:	4604      	mov	r4, r0
 8081370:	4608      	mov	r0, r1
 8081372:	2100      	movs	r1, #0
 8081374:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8081378:	4b04      	ldr	r3, [pc, #16]	; (808138c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 808137a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808137c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 808137e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8081380:	4611      	mov	r1, r2
  _blocking = true;
 8081382:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8081384:	f7ff fcb0 	bl	8080ce8 <HAL_USB_USART_Init>
}
 8081388:	4620      	mov	r0, r4
 808138a:	bd10      	pop	{r4, pc}
 808138c:	08082fb4 	.word	0x08082fb4

08081390 <_Z19acquireSerialBufferv>:
{
 8081390:	b510      	push	{r4, lr}
 8081392:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081394:	2214      	movs	r2, #20
 8081396:	2100      	movs	r1, #0
 8081398:	f001 fcfe 	bl	8082d98 <memset>
  conf.rx_buffer = serial_rx_buffer;
 808139c:	4b05      	ldr	r3, [pc, #20]	; (80813b4 <_Z19acquireSerialBufferv+0x24>)
}
 808139e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80813a0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80813a2:	4b05      	ldr	r3, [pc, #20]	; (80813b8 <_Z19acquireSerialBufferv+0x28>)
 80813a4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80813a6:	f240 1301 	movw	r3, #257	; 0x101
 80813aa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80813ac:	2381      	movs	r3, #129	; 0x81
 80813ae:	8223      	strh	r3, [r4, #16]
}
 80813b0:	bd10      	pop	{r4, pc}
 80813b2:	bf00      	nop
 80813b4:	200002c0 	.word	0x200002c0
 80813b8:	200003c1 	.word	0x200003c1

080813bc <_Z16_fetch_usbserialv>:
{
 80813bc:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80813be:	4d0e      	ldr	r5, [pc, #56]	; (80813f8 <_Z16_fetch_usbserialv+0x3c>)
{
 80813c0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80813c2:	a801      	add	r0, sp, #4
 80813c4:	f7ff ffe4 	bl	8081390 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80813c8:	7829      	ldrb	r1, [r5, #0]
 80813ca:	f3bf 8f5b 	dmb	ish
 80813ce:	f011 0401 	ands.w	r4, r1, #1
 80813d2:	d10e      	bne.n	80813f2 <_Z16_fetch_usbserialv+0x36>
 80813d4:	4628      	mov	r0, r5
 80813d6:	f7fe fe64 	bl	80800a2 <__cxa_guard_acquire>
 80813da:	b150      	cbz	r0, 80813f2 <_Z16_fetch_usbserialv+0x36>
 80813dc:	4621      	mov	r1, r4
 80813de:	aa01      	add	r2, sp, #4
 80813e0:	4806      	ldr	r0, [pc, #24]	; (80813fc <_Z16_fetch_usbserialv+0x40>)
 80813e2:	f7ff ffc1 	bl	8081368 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80813e6:	4628      	mov	r0, r5
 80813e8:	f7fe fe60 	bl	80800ac <__cxa_guard_release>
 80813ec:	4804      	ldr	r0, [pc, #16]	; (8081400 <_Z16_fetch_usbserialv+0x44>)
 80813ee:	f001 fcbf 	bl	8082d70 <atexit>
	return _usbserial;
}
 80813f2:	4802      	ldr	r0, [pc, #8]	; (80813fc <_Z16_fetch_usbserialv+0x40>)
 80813f4:	b007      	add	sp, #28
 80813f6:	bd30      	pop	{r4, r5, pc}
 80813f8:	20000290 	.word	0x20000290
 80813fc:	20000298 	.word	0x20000298
 8081400:	080812f1 	.word	0x080812f1

08081404 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8081404:	b510      	push	{r4, lr}
 8081406:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081408:	2214      	movs	r2, #20
 808140a:	2100      	movs	r1, #0
 808140c:	f001 fcc4 	bl	8082d98 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081410:	4b05      	ldr	r3, [pc, #20]	; (8081428 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081412:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 8081414:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8081416:	4b05      	ldr	r3, [pc, #20]	; (808142c <_Z23acquireUSBSerial1Bufferv+0x28>)
 8081418:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808141a:	f240 1301 	movw	r3, #257	; 0x101
 808141e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081420:	2381      	movs	r3, #129	; 0x81
 8081422:	8223      	strh	r3, [r4, #16]
}
 8081424:	bd10      	pop	{r4, pc}
 8081426:	bf00      	nop
 8081428:	20000442 	.word	0x20000442
 808142c:	20000543 	.word	0x20000543

08081430 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8081430:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081432:	4c0e      	ldr	r4, [pc, #56]	; (808146c <_Z17_fetch_usbserial1v+0x3c>)
{
 8081434:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8081436:	a801      	add	r0, sp, #4
 8081438:	f7ff ffe4 	bl	8081404 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808143c:	7823      	ldrb	r3, [r4, #0]
 808143e:	f3bf 8f5b 	dmb	ish
 8081442:	07db      	lsls	r3, r3, #31
 8081444:	d40e      	bmi.n	8081464 <_Z17_fetch_usbserial1v+0x34>
 8081446:	4620      	mov	r0, r4
 8081448:	f7fe fe2b 	bl	80800a2 <__cxa_guard_acquire>
 808144c:	b150      	cbz	r0, 8081464 <_Z17_fetch_usbserial1v+0x34>
 808144e:	2101      	movs	r1, #1
 8081450:	aa01      	add	r2, sp, #4
 8081452:	4807      	ldr	r0, [pc, #28]	; (8081470 <_Z17_fetch_usbserial1v+0x40>)
 8081454:	f7ff ff88 	bl	8081368 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081458:	4620      	mov	r0, r4
 808145a:	f7fe fe27 	bl	80800ac <__cxa_guard_release>
 808145e:	4805      	ldr	r0, [pc, #20]	; (8081474 <_Z17_fetch_usbserial1v+0x44>)
 8081460:	f001 fc86 	bl	8082d70 <atexit>
  return _usbserial1;
}
 8081464:	4802      	ldr	r0, [pc, #8]	; (8081470 <_Z17_fetch_usbserial1v+0x40>)
 8081466:	b006      	add	sp, #24
 8081468:	bd10      	pop	{r4, pc}
 808146a:	bf00      	nop
 808146c:	20000294 	.word	0x20000294
 8081470:	200002ac 	.word	0x200002ac
 8081474:	08081367 	.word	0x08081367

08081478 <_ZN9IPAddressD1Ev>:
 8081478:	4770      	bx	lr

0808147a <_ZN9IPAddressD0Ev>:
 808147a:	b510      	push	{r4, lr}
 808147c:	4604      	mov	r4, r0
 808147e:	2108      	movs	r1, #8
 8081480:	f000 fb2e 	bl	8081ae0 <_ZdlPvj>
 8081484:	4620      	mov	r0, r4
 8081486:	bd10      	pop	{r4, pc}

08081488 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8081488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808148a:	460e      	mov	r6, r1
 808148c:	2400      	movs	r4, #0
 808148e:	f100 0708 	add.w	r7, r0, #8
 8081492:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8081494:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8081498:	220a      	movs	r2, #10
 808149a:	4630      	mov	r0, r6
 808149c:	f000 f9b3 	bl	8081806 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80814a0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80814a2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80814a4:	d101      	bne.n	80814aa <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80814a6:	4620      	mov	r0, r4
 80814a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80814aa:	2c00      	cmp	r4, #0
 80814ac:	d0f2      	beq.n	8081494 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80814ae:	212e      	movs	r1, #46	; 0x2e
 80814b0:	4630      	mov	r0, r6
 80814b2:	f000 f9a5 	bl	8081800 <_ZN5Print5printEc>
 80814b6:	4404      	add	r4, r0
 80814b8:	e7ec      	b.n	8081494 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080814bc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80814bc:	4a02      	ldr	r2, [pc, #8]	; (80814c8 <_ZN9IPAddressC1Ev+0xc>)
 80814be:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80814c0:	2200      	movs	r2, #0
 80814c2:	6042      	str	r2, [r0, #4]
}
 80814c4:	4770      	bx	lr
 80814c6:	bf00      	nop
 80814c8:	08082fe4 	.word	0x08082fe4

080814cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80814cc:	4a02      	ldr	r2, [pc, #8]	; (80814d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80814ce:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 80814d0:	680a      	ldr	r2, [r1, #0]
 80814d2:	6042      	str	r2, [r0, #4]
}
 80814d4:	4770      	bx	lr
 80814d6:	bf00      	nop
 80814d8:	08082fe4 	.word	0x08082fe4

080814dc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80814dc:	4a01      	ldr	r2, [pc, #4]	; (80814e4 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 80814de:	e9c0 2100 	strd	r2, r1, [r0]
}
 80814e2:	4770      	bx	lr
 80814e4:	08082fe4 	.word	0x08082fe4

080814e8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80814e8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80814ea:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80814ee:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80814f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80814f6:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80814fa:	6044      	str	r4, [r0, #4]
}
 80814fc:	bd10      	pop	{r4, pc}
	...

08081500 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8081500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8081502:	4d04      	ldr	r5, [pc, #16]	; (8081514 <_ZN9IPAddressC1Ehhhh+0x14>)
 8081504:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8081506:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808150a:	9500      	str	r5, [sp, #0]
 808150c:	f7ff ffec 	bl	80814e8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8081510:	b003      	add	sp, #12
 8081512:	bd30      	pop	{r4, r5, pc}
 8081514:	08082fe4 	.word	0x08082fe4

08081518 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 8081518:	428a      	cmp	r2, r1
{
 808151a:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
 808151c:	d007      	beq.n	808152e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 808151e:	9c02      	ldr	r4, [sp, #8]
 8081520:	1a40      	subs	r0, r0, r1
 8081522:	1ae4      	subs	r4, r4, r3
 8081524:	4360      	muls	r0, r4
 8081526:	1a52      	subs	r2, r2, r1
 8081528:	fb90 f0f2 	sdiv	r0, r0, r2
 808152c:	4418      	add	r0, r3
}
 808152e:	bd10      	pop	{r4, pc}

08081530 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8081530:	2100      	movs	r1, #0
 8081532:	f7ff bd71 	b.w	8081018 <system_delay_ms>
	...

08081538 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8081538:	4b01      	ldr	r3, [pc, #4]	; (8081540 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 808153a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 808153c:	4770      	bx	lr
 808153e:	bf00      	nop
 8081540:	20000038 	.word	0x20000038

08081544 <serialEventRun>:
{
 8081544:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8081546:	4b17      	ldr	r3, [pc, #92]	; (80815a4 <serialEventRun+0x60>)
 8081548:	b143      	cbz	r3, 808155c <serialEventRun+0x18>
 808154a:	f7ff ff37 	bl	80813bc <_Z16_fetch_usbserialv>
 808154e:	6803      	ldr	r3, [r0, #0]
 8081550:	691b      	ldr	r3, [r3, #16]
 8081552:	4798      	blx	r3
 8081554:	2800      	cmp	r0, #0
 8081556:	dd01      	ble.n	808155c <serialEventRun+0x18>
        serialEvent();
 8081558:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 808155c:	4b12      	ldr	r3, [pc, #72]	; (80815a8 <serialEventRun+0x64>)
 808155e:	b143      	cbz	r3, 8081572 <serialEventRun+0x2e>
 8081560:	f7ff fe62 	bl	8081228 <_Z22__fetch_global_Serial1v>
 8081564:	6803      	ldr	r3, [r0, #0]
 8081566:	691b      	ldr	r3, [r3, #16]
 8081568:	4798      	blx	r3
 808156a:	2800      	cmp	r0, #0
 808156c:	dd01      	ble.n	8081572 <serialEventRun+0x2e>
        serialEvent1();
 808156e:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8081572:	4b0e      	ldr	r3, [pc, #56]	; (80815ac <serialEventRun+0x68>)
 8081574:	b10b      	cbz	r3, 808157a <serialEventRun+0x36>
 8081576:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 808157a:	4b0d      	ldr	r3, [pc, #52]	; (80815b0 <serialEventRun+0x6c>)
 808157c:	b10b      	cbz	r3, 8081582 <serialEventRun+0x3e>
 808157e:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 8081582:	4b0c      	ldr	r3, [pc, #48]	; (80815b4 <serialEventRun+0x70>)
 8081584:	b10b      	cbz	r3, 808158a <serialEventRun+0x46>
 8081586:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 808158a:	4b0b      	ldr	r3, [pc, #44]	; (80815b8 <serialEventRun+0x74>)
 808158c:	b143      	cbz	r3, 80815a0 <serialEventRun+0x5c>
 808158e:	f7ff ff4f 	bl	8081430 <_Z17_fetch_usbserial1v>
 8081592:	6803      	ldr	r3, [r0, #0]
 8081594:	691b      	ldr	r3, [r3, #16]
 8081596:	4798      	blx	r3
 8081598:	2800      	cmp	r0, #0
 808159a:	dd01      	ble.n	80815a0 <serialEventRun+0x5c>
        usbSerialEvent1();
 808159c:	f3af 8000 	nop.w
}
 80815a0:	bd08      	pop	{r3, pc}
 80815a2:	bf00      	nop
	...

080815bc <_post_loop>:
{
 80815bc:	b508      	push	{r3, lr}
	serialEventRun();
 80815be:	f7ff ffc1 	bl	8081544 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80815c2:	f7ff fc91 	bl	8080ee8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80815c6:	4b01      	ldr	r3, [pc, #4]	; (80815cc <_post_loop+0x10>)
 80815c8:	6018      	str	r0, [r3, #0]
}
 80815ca:	bd08      	pop	{r3, pc}
 80815cc:	20000644 	.word	0x20000644

080815d0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80815d0:	4805      	ldr	r0, [pc, #20]	; (80815e8 <_Z33system_initialize_user_backup_ramv+0x18>)
 80815d2:	4a06      	ldr	r2, [pc, #24]	; (80815ec <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80815d4:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80815d6:	1a12      	subs	r2, r2, r0
 80815d8:	4905      	ldr	r1, [pc, #20]	; (80815f0 <_Z33system_initialize_user_backup_ramv+0x20>)
 80815da:	f001 fbcf 	bl	8082d7c <memcpy>
    __backup_sram_signature = signature;
 80815de:	4b05      	ldr	r3, [pc, #20]	; (80815f4 <_Z33system_initialize_user_backup_ramv+0x24>)
 80815e0:	4a05      	ldr	r2, [pc, #20]	; (80815f8 <_Z33system_initialize_user_backup_ramv+0x28>)
 80815e2:	601a      	str	r2, [r3, #0]
}
 80815e4:	bd08      	pop	{r3, pc}
 80815e6:	bf00      	nop
 80815e8:	40024000 	.word	0x40024000
 80815ec:	40024004 	.word	0x40024004
 80815f0:	08083080 	.word	0x08083080
 80815f4:	40024000 	.word	0x40024000
 80815f8:	9a271c1e 	.word	0x9a271c1e

080815fc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80815fc:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80815fe:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081600:	461a      	mov	r2, r3
 8081602:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081606:	9300      	str	r3, [sp, #0]
 8081608:	f7ff fd18 	bl	808103c <system_ctrl_set_result>
}
 808160c:	b003      	add	sp, #12
 808160e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08081614 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8081614:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8081616:	8843      	ldrh	r3, [r0, #2]
 8081618:	2b0a      	cmp	r3, #10
 808161a:	d008      	beq.n	808162e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 808161c:	2b50      	cmp	r3, #80	; 0x50
 808161e:	d10b      	bne.n	8081638 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8081620:	4b09      	ldr	r3, [pc, #36]	; (8081648 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8081622:	681b      	ldr	r3, [r3, #0]
 8081624:	b14b      	cbz	r3, 808163a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8081626:	b003      	add	sp, #12
 8081628:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 808162c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 808162e:	f7ff ffe5 	bl	80815fc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8081632:	b003      	add	sp, #12
 8081634:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081638:	2300      	movs	r3, #0
 808163a:	461a      	mov	r2, r3
 808163c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081640:	9300      	str	r3, [sp, #0]
 8081642:	f7ff fcfb 	bl	808103c <system_ctrl_set_result>
}
 8081646:	e7f4      	b.n	8081632 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8081648:	200005c8 	.word	0x200005c8

0808164c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 808164c:	2100      	movs	r1, #0
{
 808164e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8081650:	4811      	ldr	r0, [pc, #68]	; (8081698 <module_user_init_hook+0x4c>)
 8081652:	f7ff fd15 	bl	8081080 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 8081656:	4b11      	ldr	r3, [pc, #68]	; (808169c <module_user_init_hook+0x50>)
 8081658:	681a      	ldr	r2, [r3, #0]
 808165a:	4b11      	ldr	r3, [pc, #68]	; (80816a0 <module_user_init_hook+0x54>)
 808165c:	429a      	cmp	r2, r3
 808165e:	bf0c      	ite	eq
 8081660:	2201      	moveq	r2, #1
 8081662:	2200      	movne	r2, #0
 8081664:	4b0f      	ldr	r3, [pc, #60]	; (80816a4 <module_user_init_hook+0x58>)
 8081666:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8081668:	d001      	beq.n	808166e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 808166a:	f7ff ffb1 	bl	80815d0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 808166e:	f7ff fc23 	bl	8080eb8 <HAL_RNG_GetRandomNumber>
 8081672:	4604      	mov	r4, r0
    srand(seed);
 8081674:	f001 fb98 	bl	8082da8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8081678:	4b0b      	ldr	r3, [pc, #44]	; (80816a8 <module_user_init_hook+0x5c>)
 808167a:	b113      	cbz	r3, 8081682 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 808167c:	4620      	mov	r0, r4
 808167e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8081682:	2100      	movs	r1, #0
 8081684:	4808      	ldr	r0, [pc, #32]	; (80816a8 <module_user_init_hook+0x5c>)
 8081686:	f7ff fc57 	bl	8080f38 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 808168a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 808168e:	2100      	movs	r1, #0
 8081690:	4806      	ldr	r0, [pc, #24]	; (80816ac <module_user_init_hook+0x60>)
 8081692:	f7ff bcc9 	b.w	8081028 <system_ctrl_set_app_request_handler>
 8081696:	bf00      	nop
 8081698:	08081539 	.word	0x08081539
 808169c:	40024000 	.word	0x40024000
 80816a0:	9a271c1e 	.word	0x9a271c1e
 80816a4:	200005c4 	.word	0x200005c4
 80816a8:	00000000 	.word	0x00000000
 80816ac:	08081615 	.word	0x08081615

080816b0 <_ZN5spark13CellularClass5readyEv>:
        return network_ready(*this, 0,  NULL);
 80816b0:	2200      	movs	r2, #0
 80816b2:	6840      	ldr	r0, [r0, #4]
 80816b4:	4611      	mov	r1, r2
 80816b6:	f7ff bc5f 	b.w	8080f78 <network_ready>

080816ba <_ZN5spark13CellularClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80816ba:	b5f0      	push	{r4, r5, r6, r7, lr}
        HAL_IPAddress ip = {0};
 80816bc:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 80816be:	b085      	sub	sp, #20
 80816c0:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80816c2:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 80816c4:	460f      	mov	r7, r1
 80816c6:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 80816c8:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80816ca:	f001 fb91 	bl	8082df0 <strlen>
 80816ce:	687b      	ldr	r3, [r7, #4]
 80816d0:	b281      	uxth	r1, r0
 80816d2:	9600      	str	r6, [sp, #0]
 80816d4:	4628      	mov	r0, r5
 80816d6:	aa03      	add	r2, sp, #12
 80816d8:	f7ff fb4e 	bl	8080d78 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80816dc:	b130      	cbz	r0, 80816ec <_ZN5spark13CellularClass7resolveEPKc+0x32>
 80816de:	4631      	mov	r1, r6
 80816e0:	4620      	mov	r0, r4
 80816e2:	f7ff fefb 	bl	80814dc <_ZN9IPAddressC1Em>
    }
 80816e6:	4620      	mov	r0, r4
 80816e8:	b005      	add	sp, #20
 80816ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80816ec:	4620      	mov	r0, r4
 80816ee:	a903      	add	r1, sp, #12
 80816f0:	f7ff feec 	bl	80814cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80816f4:	e7f7      	b.n	80816e6 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

080816f6 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80816f6:	2200      	movs	r2, #0
 80816f8:	6840      	ldr	r0, [r0, #4]
 80816fa:	4611      	mov	r1, r2
 80816fc:	f7ff bc5c 	b.w	8080fb8 <network_listening>

08081700 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 8081700:	2200      	movs	r2, #0
 8081702:	6840      	ldr	r0, [r0, #4]
 8081704:	4611      	mov	r1, r2
 8081706:	f7ff bc67 	b.w	8080fd8 <network_get_listen_timeout>

0808170a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 808170a:	2200      	movs	r2, #0
 808170c:	6840      	ldr	r0, [r0, #4]
 808170e:	f7ff bc5b 	b.w	8080fc8 <network_set_listen_timeout>

08081712 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 8081712:	2200      	movs	r2, #0
 8081714:	6840      	ldr	r0, [r0, #4]
 8081716:	f081 0101 	eor.w	r1, r1, #1
 808171a:	f7ff bc45 	b.w	8080fa8 <network_listen>

0808171e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 808171e:	2300      	movs	r3, #0
 8081720:	6840      	ldr	r0, [r0, #4]
 8081722:	461a      	mov	r2, r3
 8081724:	4619      	mov	r1, r3
 8081726:	f7ff bc37 	b.w	8080f98 <network_off>

0808172a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 808172a:	2300      	movs	r3, #0
 808172c:	6840      	ldr	r0, [r0, #4]
 808172e:	461a      	mov	r2, r3
 8081730:	4619      	mov	r1, r3
 8081732:	f7ff bc29 	b.w	8080f88 <network_on>

08081736 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 8081736:	2200      	movs	r2, #0
 8081738:	6840      	ldr	r0, [r0, #4]
 808173a:	4611      	mov	r1, r2
 808173c:	f7ff bc0c 	b.w	8080f58 <network_connecting>

08081740 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8081740:	2200      	movs	r2, #0
 8081742:	2102      	movs	r1, #2
 8081744:	6840      	ldr	r0, [r0, #4]
 8081746:	f7ff bc0f 	b.w	8080f68 <network_disconnect>

0808174a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 808174a:	2300      	movs	r3, #0
 808174c:	6840      	ldr	r0, [r0, #4]
 808174e:	461a      	mov	r2, r3
 8081750:	f7ff bbfa 	b.w	8080f48 <network_connect>

08081754 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8081754:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8081756:	2428      	movs	r4, #40	; 0x28
 8081758:	4b07      	ldr	r3, [pc, #28]	; (8081778 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 808175a:	4622      	mov	r2, r4
 808175c:	4618      	mov	r0, r3
 808175e:	2100      	movs	r1, #0
 8081760:	f001 fb1a 	bl	8082d98 <memset>
        cid = -1;
 8081764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8081768:	6042      	str	r2, [r0, #4]
 808176a:	2204      	movs	r2, #4
 808176c:	4b03      	ldr	r3, [pc, #12]	; (808177c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 808176e:	8004      	strh	r4, [r0, #0]
 8081770:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8081772:	4a03      	ldr	r2, [pc, #12]	; (8081780 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 8081774:	601a      	str	r2, [r3, #0]
 8081776:	bd10      	pop	{r4, pc}
 8081778:	200005d4 	.word	0x200005d4
 808177c:	200005cc 	.word	0x200005cc
 8081780:	08082ff8 	.word	0x08082ff8

08081784 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8081784:	2200      	movs	r2, #0
 8081786:	4b01      	ldr	r3, [pc, #4]	; (808178c <_GLOBAL__sub_I_RGB+0x8>)
 8081788:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 808178a:	4770      	bx	lr
 808178c:	200005fc 	.word	0x200005fc

08081790 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8081790:	4b02      	ldr	r3, [pc, #8]	; (808179c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8081792:	681a      	ldr	r2, [r3, #0]
 8081794:	4b02      	ldr	r3, [pc, #8]	; (80817a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8081796:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8081798:	4770      	bx	lr
 808179a:	bf00      	nop
 808179c:	20000030 	.word	0x20000030
 80817a0:	2000060c 	.word	0x2000060c

080817a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80817a4:	4b01      	ldr	r3, [pc, #4]	; (80817ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80817a6:	4a02      	ldr	r2, [pc, #8]	; (80817b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80817a8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80817aa:	4770      	bx	lr
 80817ac:	20000610 	.word	0x20000610
 80817b0:	08083048 	.word	0x08083048

080817b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80817b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80817b6:	4606      	mov	r6, r0
 80817b8:	460d      	mov	r5, r1
  size_t n = 0;
 80817ba:	2400      	movs	r4, #0
 80817bc:	188f      	adds	r7, r1, r2
  while (size--) {
 80817be:	42bd      	cmp	r5, r7
 80817c0:	d00c      	beq.n	80817dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80817c2:	6833      	ldr	r3, [r6, #0]
 80817c4:	4630      	mov	r0, r6
 80817c6:	689b      	ldr	r3, [r3, #8]
 80817c8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80817cc:	4798      	blx	r3
     if (chunk>=0)
 80817ce:	1e03      	subs	r3, r0, #0
 80817d0:	db01      	blt.n	80817d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80817d2:	441c      	add	r4, r3
  while (size--) {
 80817d4:	e7f3      	b.n	80817be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80817d6:	2c00      	cmp	r4, #0
 80817d8:	bf08      	it	eq
 80817da:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80817dc:	4620      	mov	r0, r4
 80817de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080817e0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80817e0:	b570      	push	{r4, r5, r6, lr}
 80817e2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80817e4:	460c      	mov	r4, r1
    }
 80817e6:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80817e8:	b149      	cbz	r1, 80817fe <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80817ea:	f001 fb01 	bl	8082df0 <strlen>
 80817ee:	682b      	ldr	r3, [r5, #0]
 80817f0:	4602      	mov	r2, r0
 80817f2:	4621      	mov	r1, r4
 80817f4:	4628      	mov	r0, r5
    }
 80817f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80817fa:	68db      	ldr	r3, [r3, #12]
 80817fc:	4718      	bx	r3
    }
 80817fe:	bd70      	pop	{r4, r5, r6, pc}

08081800 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8081800:	6803      	ldr	r3, [r0, #0]
 8081802:	689b      	ldr	r3, [r3, #8]
 8081804:	4718      	bx	r3

08081806 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8081806:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8081808:	2a01      	cmp	r2, #1
 808180a:	bf98      	it	ls
 808180c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 808180e:	b530      	push	{r4, r5, lr}
 8081810:	b08b      	sub	sp, #44	; 0x2c
 8081812:	460c      	mov	r4, r1
  *str = '\0';
 8081814:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8081818:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 808181a:	4625      	mov	r5, r4
 808181c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 8081820:	fb04 5312 	mls	r3, r4, r2, r5
 8081824:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8081826:	2b09      	cmp	r3, #9
 8081828:	bf94      	ite	ls
 808182a:	3330      	addls	r3, #48	; 0x30
 808182c:	3337      	addhi	r3, #55	; 0x37
 808182e:	b2db      	uxtb	r3, r3
  } while(n);
 8081830:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8081832:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8081836:	d9f0      	bls.n	808181a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8081838:	f7ff ffd2 	bl	80817e0 <_ZN5Print5writeEPKc>
}
 808183c:	b00b      	add	sp, #44	; 0x2c
 808183e:	bd30      	pop	{r4, r5, pc}

08081840 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8081840:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8081842:	2000      	movs	r0, #0
 8081844:	4b04      	ldr	r3, [pc, #16]	; (8081858 <_GLOBAL__sub_I_System+0x18>)
 8081846:	601a      	str	r2, [r3, #0]
 8081848:	4b04      	ldr	r3, [pc, #16]	; (808185c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 808184a:	4a05      	ldr	r2, [pc, #20]	; (8081860 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 808184c:	6018      	str	r0, [r3, #0]
 808184e:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 8081850:	7198      	strb	r0, [r3, #6]
 8081852:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081854:	f7ff bbd8 	b.w	8081008 <set_system_mode>
 8081858:	20000620 	.word	0x20000620
 808185c:	20000614 	.word	0x20000614
 8081860:	ffff0000 	.word	0xffff0000

08081864 <_ZN5Servo17writeMicrosecondsEt>:
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
 8081864:	f9b0 2000 	ldrsh.w	r2, [r0]
{
 8081868:	460b      	mov	r3, r1
  if (!this->attached())
 808186a:	1c51      	adds	r1, r2, #1
 808186c:	d00a      	beq.n	8081884 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
 808186e:	8841      	ldrh	r1, [r0, #2]
 8081870:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 8081872:	4299      	cmp	r1, r3
 8081874:	d803      	bhi.n	808187e <_ZN5Servo17writeMicrosecondsEt+0x1a>
 8081876:	4298      	cmp	r0, r3
 8081878:	4601      	mov	r1, r0
 808187a:	bf28      	it	cs
 808187c:	4619      	movcs	r1, r3

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
 808187e:	b290      	uxth	r0, r2
 8081880:	f7ff ba72 	b.w	8080d68 <HAL_Servo_Write_Pulse_Width>
}
 8081884:	4770      	bx	lr

08081886 <_ZN5Servo5writeEi>:
{
 8081886:	b513      	push	{r0, r1, r4, lr}
 8081888:	4604      	mov	r4, r0
 808188a:	4608      	mov	r0, r1
 808188c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8081890:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8081894:	4288      	cmp	r0, r1
 8081896:	db10      	blt.n	80818ba <_ZN5Servo5writeEi+0x34>
 8081898:	4290      	cmp	r0, r2
 808189a:	bfa8      	it	ge
 808189c:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
 808189e:	88a3      	ldrh	r3, [r4, #4]
 80818a0:	9300      	str	r3, [sp, #0]
 80818a2:	8863      	ldrh	r3, [r4, #2]
 80818a4:	f7ff fe38 	bl	8081518 <_Z3mapiiiii>
 80818a8:	68e1      	ldr	r1, [r4, #12]
 80818aa:	4401      	add	r1, r0
 80818ac:	4620      	mov	r0, r4
 80818ae:	b289      	uxth	r1, r1
}
 80818b0:	b002      	add	sp, #8
 80818b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
 80818b6:	f7ff bfd5 	b.w	8081864 <_ZN5Servo17writeMicrosecondsEt>
 80818ba:	4608      	mov	r0, r1
 80818bc:	e7ef      	b.n	808189e <_ZN5Servo5writeEi+0x18>
	...

080818c0 <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80818c0:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80818c4:	4a03      	ldr	r2, [pc, #12]	; (80818d4 <_ZN5Servo11resetFieldsEv+0x14>)
 80818c6:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
 80818ca:	23b4      	movs	r3, #180	; 0xb4
 80818cc:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
 80818ce:	2300      	movs	r3, #0
 80818d0:	60c3      	str	r3, [r0, #12]
}
 80818d2:	4770      	bx	lr
 80818d4:	0220ffff 	.word	0x0220ffff

080818d8 <_ZN5ServoC1Ev>:
Servo::Servo()
 80818d8:	b508      	push	{r3, lr}
  this->resetFields();
 80818da:	f7ff fff1 	bl	80818c0 <_ZN5Servo11resetFieldsEv>
}
 80818de:	bd08      	pop	{r3, pc}

080818e0 <_ZN5Servo6detachEv>:
{
 80818e0:	b510      	push	{r4, lr}
 80818e2:	4604      	mov	r4, r0
  if (!this->attached())
 80818e4:	f9b0 0000 	ldrsh.w	r0, [r0]
 80818e8:	1c43      	adds	r3, r0, #1
 80818ea:	d007      	beq.n	80818fc <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
 80818ec:	b280      	uxth	r0, r0
 80818ee:	f7ff fa33 	bl	8080d58 <HAL_Servo_Detach>
  this->resetFields();
 80818f2:	4620      	mov	r0, r4
 80818f4:	f7ff ffe4 	bl	80818c0 <_ZN5Servo11resetFieldsEv>
  return true;
 80818f8:	2001      	movs	r0, #1
}
 80818fa:	bd10      	pop	{r4, pc}
    return false;
 80818fc:	2000      	movs	r0, #0
 80818fe:	e7fc      	b.n	80818fa <_ZN5Servo6detachEv+0x1a>

08081900 <_ZN5Servo6attachEtttss>:
{
 8081900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081904:	460d      	mov	r5, r1
 8081906:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 8081908:	2102      	movs	r1, #2
 808190a:	4628      	mov	r0, r5
{
 808190c:	4690      	mov	r8, r2
 808190e:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 8081910:	f7ff faf2 	bl	8080ef8 <HAL_Validate_Pin_Function>
 8081914:	2802      	cmp	r0, #2
 8081916:	d003      	beq.n	8081920 <_ZN5Servo6attachEtttss+0x20>
    return false;
 8081918:	2600      	movs	r6, #0
}
 808191a:	4630      	mov	r0, r6
 808191c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
 8081920:	4628      	mov	r0, r5
 8081922:	f000 f871 	bl	8081a08 <pinAvailable>
 8081926:	4606      	mov	r6, r0
 8081928:	2800      	cmp	r0, #0
 808192a:	d0f5      	beq.n	8081918 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
 808192c:	f9b4 3000 	ldrsh.w	r3, [r4]
 8081930:	3301      	adds	r3, #1
 8081932:	d002      	beq.n	808193a <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
 8081934:	4620      	mov	r0, r4
 8081936:	f7ff ffd3 	bl	80818e0 <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
 808193a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  HAL_Servo_Attach(this->pin);
 808193e:	4628      	mov	r0, r5
  this->minAngle = minAngle;
 8081940:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
 8081942:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
 8081946:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
 8081948:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
 808194c:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
 808194e:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
 8081950:	f7ff f9fa 	bl	8080d48 <HAL_Servo_Attach>
  return true;
 8081954:	e7e1      	b.n	808191a <_ZN5Servo6attachEtttss+0x1a>

08081956 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8081956:	4770      	bx	lr

08081958 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
	hal_i2c_config_t config = {
 8081958:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 808195a:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 808195c:	2520      	movs	r5, #32
 808195e:	8043      	strh	r3, [r0, #2]
 8081960:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8081962:	4e08      	ldr	r6, [pc, #32]	; (8081984 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 8081964:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 8081966:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8081968:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 808196a:	6085      	str	r5, [r0, #8]
 808196c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808196e:	4628      	mov	r0, r5
 8081970:	f000 f8b8 	bl	8081ae4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8081974:	4631      	mov	r1, r6
	};
 8081976:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8081978:	4628      	mov	r0, r5
 808197a:	f000 f8b3 	bl	8081ae4 <_ZnajRKSt9nothrow_t>
	};
 808197e:	60e0      	str	r0, [r4, #12]
}
 8081980:	4620      	mov	r0, r4
 8081982:	bd70      	pop	{r4, r5, r6, pc}
 8081984:	0808304c 	.word	0x0808304c

08081988 <_Z17acquireWireBufferv>:
{
 8081988:	b510      	push	{r4, lr}
 808198a:	4604      	mov	r4, r0
	return defaultWireConfig();
 808198c:	f7ff ffe4 	bl	8081958 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8081990:	4620      	mov	r0, r4
 8081992:	bd10      	pop	{r4, pc}

08081994 <_Z19__fetch_global_Wirev>:
{
 8081994:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8081996:	4d0e      	ldr	r5, [pc, #56]	; (80819d0 <_Z19__fetch_global_Wirev+0x3c>)
{
 8081998:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808199a:	7829      	ldrb	r1, [r5, #0]
 808199c:	f3bf 8f5b 	dmb	ish
 80819a0:	f011 0401 	ands.w	r4, r1, #1
 80819a4:	d111      	bne.n	80819ca <_Z19__fetch_global_Wirev+0x36>
 80819a6:	4628      	mov	r0, r5
 80819a8:	f7fe fb7b 	bl	80800a2 <__cxa_guard_acquire>
 80819ac:	b168      	cbz	r0, 80819ca <_Z19__fetch_global_Wirev+0x36>
 80819ae:	a801      	add	r0, sp, #4
 80819b0:	f7ff ffea 	bl	8081988 <_Z17acquireWireBufferv>
 80819b4:	4621      	mov	r1, r4
 80819b6:	aa01      	add	r2, sp, #4
 80819b8:	4806      	ldr	r0, [pc, #24]	; (80819d4 <_Z19__fetch_global_Wirev+0x40>)
 80819ba:	f7ff fc85 	bl	80812c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80819be:	4628      	mov	r0, r5
 80819c0:	f7fe fb74 	bl	80800ac <__cxa_guard_release>
 80819c4:	4804      	ldr	r0, [pc, #16]	; (80819d8 <_Z19__fetch_global_Wirev+0x44>)
 80819c6:	f001 f9d3 	bl	8082d70 <atexit>
	return wire;
}
 80819ca:	4802      	ldr	r0, [pc, #8]	; (80819d4 <_Z19__fetch_global_Wirev+0x40>)
 80819cc:	b007      	add	sp, #28
 80819ce:	bd30      	pop	{r4, r5, pc}
 80819d0:	20000624 	.word	0x20000624
 80819d4:	20000628 	.word	0x20000628
 80819d8:	08081957 	.word	0x08081957

080819dc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80819dc:	2300      	movs	r3, #0
 80819de:	b507      	push	{r0, r1, r2, lr}
 80819e0:	461a      	mov	r2, r3
 80819e2:	4619      	mov	r1, r3
 80819e4:	9300      	str	r3, [sp, #0]
 80819e6:	4803      	ldr	r0, [pc, #12]	; (80819f4 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80819e8:	f7ff fd8a 	bl	8081500 <_ZN9IPAddressC1Ehhhh>
 80819ec:	b003      	add	sp, #12
 80819ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80819f2:	bf00      	nop
 80819f4:	2000063c 	.word	0x2000063c

080819f8 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80819f8:	4b02      	ldr	r3, [pc, #8]	; (8081a04 <__tcf_0+0xc>)
 80819fa:	6898      	ldr	r0, [r3, #8]
 80819fc:	b108      	cbz	r0, 8081a02 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80819fe:	f7ff ba53 	b.w	8080ea8 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8081a02:	4770      	bx	lr
 8081a04:	2000064c 	.word	0x2000064c

08081a08 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 8081a08:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 8081a0a:	b570      	push	{r4, r5, r6, lr}
 8081a0c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 8081a0e:	d901      	bls.n	8081a14 <pinAvailable+0xc>
    return false;
 8081a10:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 8081a12:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8081a14:	f1a0 030d 	sub.w	r3, r0, #13
 8081a18:	2b02      	cmp	r3, #2
 8081a1a:	d90b      	bls.n	8081a34 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 8081a1c:	2801      	cmp	r0, #1
 8081a1e:	d824      	bhi.n	8081a6a <pinAvailable+0x62>
 8081a20:	f7ff ffb8 	bl	8081994 <_Z19__fetch_global_Wirev>
 8081a24:	2100      	movs	r1, #0
 8081a26:	7c00      	ldrb	r0, [r0, #16]
 8081a28:	f7ff f9e6 	bl	8080df8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8081a2c:	f080 0001 	eor.w	r0, r0, #1
 8081a30:	b2c0      	uxtb	r0, r0
 8081a32:	e7ee      	b.n	8081a12 <pinAvailable+0xa>
 8081a34:	4e12      	ldr	r6, [pc, #72]	; (8081a80 <pinAvailable+0x78>)
 8081a36:	7831      	ldrb	r1, [r6, #0]
 8081a38:	f3bf 8f5b 	dmb	ish
 8081a3c:	f011 0501 	ands.w	r5, r1, #1
 8081a40:	d10d      	bne.n	8081a5e <pinAvailable+0x56>
 8081a42:	4630      	mov	r0, r6
 8081a44:	f7fe fb2d 	bl	80800a2 <__cxa_guard_acquire>
 8081a48:	b148      	cbz	r0, 8081a5e <pinAvailable+0x56>
 8081a4a:	4629      	mov	r1, r5
 8081a4c:	480d      	ldr	r0, [pc, #52]	; (8081a84 <pinAvailable+0x7c>)
 8081a4e:	f7ff fb89 	bl	8081164 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8081a52:	4630      	mov	r0, r6
 8081a54:	f7fe fb2a 	bl	80800ac <__cxa_guard_release>
 8081a58:	480b      	ldr	r0, [pc, #44]	; (8081a88 <pinAvailable+0x80>)
 8081a5a:	f001 f989 	bl	8082d70 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8081a5e:	4b09      	ldr	r3, [pc, #36]	; (8081a84 <pinAvailable+0x7c>)
 8081a60:	7818      	ldrb	r0, [r3, #0]
 8081a62:	f7ff f999 	bl	8080d98 <hal_spi_is_enabled>
 8081a66:	2800      	cmp	r0, #0
 8081a68:	d1d2      	bne.n	8081a10 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8081a6a:	3c12      	subs	r4, #18
 8081a6c:	2c01      	cmp	r4, #1
 8081a6e:	d805      	bhi.n	8081a7c <pinAvailable+0x74>
 8081a70:	f7ff fbda 	bl	8081228 <_Z22__fetch_global_Serial1v>
 8081a74:	7c00      	ldrb	r0, [r0, #16]
 8081a76:	f7ff f9ff 	bl	8080e78 <hal_usart_is_enabled>
 8081a7a:	e7d7      	b.n	8081a2c <pinAvailable+0x24>
  return true; // 'pin' is available
 8081a7c:	2001      	movs	r0, #1
 8081a7e:	e7c8      	b.n	8081a12 <pinAvailable+0xa>
 8081a80:	20000648 	.word	0x20000648
 8081a84:	2000064c 	.word	0x2000064c
 8081a88:	080819f9 	.word	0x080819f9

08081a8c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8081a8c:	282e      	cmp	r0, #46	; 0x2e
{
 8081a8e:	b538      	push	{r3, r4, r5, lr}
 8081a90:	4604      	mov	r4, r0
 8081a92:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8081a94:	d80a      	bhi.n	8081aac <pinMode+0x20>
 8081a96:	29ff      	cmp	r1, #255	; 0xff
 8081a98:	d008      	beq.n	8081aac <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 8081a9a:	f7ff ffb5 	bl	8081a08 <pinAvailable>
 8081a9e:	b128      	cbz	r0, 8081aac <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 8081aa0:	4629      	mov	r1, r5
 8081aa2:	4620      	mov	r0, r4
}
 8081aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 8081aa8:	f7ff ba2e 	b.w	8080f08 <HAL_Pin_Mode>
}
 8081aac:	bd38      	pop	{r3, r4, r5, pc}

08081aae <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8081aae:	b538      	push	{r3, r4, r5, lr}
 8081ab0:	4604      	mov	r4, r0
 8081ab2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8081ab4:	f7ff fa30 	bl	8080f18 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8081ab8:	28ff      	cmp	r0, #255	; 0xff
 8081aba:	d010      	beq.n	8081ade <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 8081abc:	2806      	cmp	r0, #6
 8081abe:	d804      	bhi.n	8081aca <digitalWrite+0x1c>
 8081ac0:	234d      	movs	r3, #77	; 0x4d
 8081ac2:	fa23 f000 	lsr.w	r0, r3, r0
 8081ac6:	07c3      	lsls	r3, r0, #31
 8081ac8:	d409      	bmi.n	8081ade <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8081aca:	4620      	mov	r0, r4
 8081acc:	f7ff ff9c 	bl	8081a08 <pinAvailable>
 8081ad0:	b128      	cbz	r0, 8081ade <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8081ad2:	4629      	mov	r1, r5
 8081ad4:	4620      	mov	r0, r4
}
 8081ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 8081ada:	f7ff ba25 	b.w	8080f28 <HAL_GPIO_Write>
}
 8081ade:	bd38      	pop	{r3, r4, r5, pc}

08081ae0 <_ZdlPvj>:
 8081ae0:	f7fe badd 	b.w	808009e <_ZdlPv>

08081ae4 <_ZnajRKSt9nothrow_t>:
 8081ae4:	f7fe bad9 	b.w	808009a <_Znaj>

08081ae8 <sqrt>:
 8081ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081aec:	b08b      	sub	sp, #44	; 0x2c
 8081aee:	4604      	mov	r4, r0
 8081af0:	460d      	mov	r5, r1
 8081af2:	f000 f859 	bl	8081ba8 <__ieee754_sqrt>
 8081af6:	4b2a      	ldr	r3, [pc, #168]	; (8081ba0 <sqrt+0xb8>)
 8081af8:	4606      	mov	r6, r0
 8081afa:	f993 b000 	ldrsb.w	fp, [r3]
 8081afe:	460f      	mov	r7, r1
 8081b00:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8081b04:	d012      	beq.n	8081b2c <sqrt+0x44>
 8081b06:	4622      	mov	r2, r4
 8081b08:	462b      	mov	r3, r5
 8081b0a:	4620      	mov	r0, r4
 8081b0c:	4629      	mov	r1, r5
 8081b0e:	f000 fd67 	bl	80825e0 <__aeabi_dcmpun>
 8081b12:	4682      	mov	sl, r0
 8081b14:	b950      	cbnz	r0, 8081b2c <sqrt+0x44>
 8081b16:	f04f 0800 	mov.w	r8, #0
 8081b1a:	f04f 0900 	mov.w	r9, #0
 8081b1e:	4620      	mov	r0, r4
 8081b20:	4629      	mov	r1, r5
 8081b22:	4642      	mov	r2, r8
 8081b24:	464b      	mov	r3, r9
 8081b26:	f000 fd33 	bl	8082590 <__aeabi_dcmplt>
 8081b2a:	b920      	cbnz	r0, 8081b36 <sqrt+0x4e>
 8081b2c:	4630      	mov	r0, r6
 8081b2e:	4639      	mov	r1, r7
 8081b30:	b00b      	add	sp, #44	; 0x2c
 8081b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081b36:	2201      	movs	r2, #1
 8081b38:	4b1a      	ldr	r3, [pc, #104]	; (8081ba4 <sqrt+0xbc>)
 8081b3a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8081b3e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8081b42:	e9cd 2300 	strd	r2, r3, [sp]
 8081b46:	f8cd a020 	str.w	sl, [sp, #32]
 8081b4a:	f1bb 0f00 	cmp.w	fp, #0
 8081b4e:	d017      	beq.n	8081b80 <sqrt+0x98>
 8081b50:	4642      	mov	r2, r8
 8081b52:	464b      	mov	r3, r9
 8081b54:	4640      	mov	r0, r8
 8081b56:	4649      	mov	r1, r9
 8081b58:	f000 fbd2 	bl	8082300 <__aeabi_ddiv>
 8081b5c:	f1bb 0f02 	cmp.w	fp, #2
 8081b60:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8081b64:	d10e      	bne.n	8081b84 <sqrt+0x9c>
 8081b66:	f7ff fa83 	bl	8081070 <__errno>
 8081b6a:	2321      	movs	r3, #33	; 0x21
 8081b6c:	6003      	str	r3, [r0, #0]
 8081b6e:	9b08      	ldr	r3, [sp, #32]
 8081b70:	b983      	cbnz	r3, 8081b94 <sqrt+0xac>
 8081b72:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8081b76:	4630      	mov	r0, r6
 8081b78:	4639      	mov	r1, r7
 8081b7a:	b00b      	add	sp, #44	; 0x2c
 8081b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081b80:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8081b84:	4668      	mov	r0, sp
 8081b86:	f000 f8d3 	bl	8081d30 <matherr>
 8081b8a:	2800      	cmp	r0, #0
 8081b8c:	d0eb      	beq.n	8081b66 <sqrt+0x7e>
 8081b8e:	9b08      	ldr	r3, [sp, #32]
 8081b90:	2b00      	cmp	r3, #0
 8081b92:	d0ee      	beq.n	8081b72 <sqrt+0x8a>
 8081b94:	f7ff fa6c 	bl	8081070 <__errno>
 8081b98:	9b08      	ldr	r3, [sp, #32]
 8081b9a:	6003      	str	r3, [r0, #0]
 8081b9c:	e7e9      	b.n	8081b72 <sqrt+0x8a>
 8081b9e:	bf00      	nop
 8081ba0:	20000034 	.word	0x20000034
 8081ba4:	08083050 	.word	0x08083050

08081ba8 <__ieee754_sqrt>:
 8081ba8:	4a60      	ldr	r2, [pc, #384]	; (8081d2c <__ieee754_sqrt+0x184>)
 8081baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081bae:	438a      	bics	r2, r1
 8081bb0:	460e      	mov	r6, r1
 8081bb2:	4605      	mov	r5, r0
 8081bb4:	f000 8097 	beq.w	8081ce6 <__ieee754_sqrt+0x13e>
 8081bb8:	2900      	cmp	r1, #0
 8081bba:	460b      	mov	r3, r1
 8081bbc:	4604      	mov	r4, r0
 8081bbe:	dd4e      	ble.n	8081c5e <__ieee754_sqrt+0xb6>
 8081bc0:	1509      	asrs	r1, r1, #20
 8081bc2:	d05a      	beq.n	8081c7a <__ieee754_sqrt+0xd2>
 8081bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8081bc8:	07ca      	lsls	r2, r1, #31
 8081bca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8081bce:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
 8081bd2:	d403      	bmi.n	8081bdc <__ieee754_sqrt+0x34>
 8081bd4:	005b      	lsls	r3, r3, #1
 8081bd6:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8081bda:	0064      	lsls	r4, r4, #1
 8081bdc:	f04f 0c00 	mov.w	ip, #0
 8081be0:	2516      	movs	r5, #22
 8081be2:	4666      	mov	r6, ip
 8081be4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8081be8:	0fe1      	lsrs	r1, r4, #31
 8081bea:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 8081bee:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8081bf2:	0064      	lsls	r4, r4, #1
 8081bf4:	18b1      	adds	r1, r6, r2
 8081bf6:	4299      	cmp	r1, r3
 8081bf8:	dc02      	bgt.n	8081c00 <__ieee754_sqrt+0x58>
 8081bfa:	1a5b      	subs	r3, r3, r1
 8081bfc:	188e      	adds	r6, r1, r2
 8081bfe:	4494      	add	ip, r2
 8081c00:	005b      	lsls	r3, r3, #1
 8081c02:	3d01      	subs	r5, #1
 8081c04:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8081c08:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8081c0c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8081c10:	d1f0      	bne.n	8081bf4 <__ieee754_sqrt+0x4c>
 8081c12:	462f      	mov	r7, r5
 8081c14:	2020      	movs	r0, #32
 8081c16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8081c1a:	e009      	b.n	8081c30 <__ieee754_sqrt+0x88>
 8081c1c:	d03d      	beq.n	8081c9a <__ieee754_sqrt+0xf2>
 8081c1e:	0fe1      	lsrs	r1, r4, #31
 8081c20:	3801      	subs	r0, #1
 8081c22:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8081c26:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8081c2a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8081c2e:	d03d      	beq.n	8081cac <__ieee754_sqrt+0x104>
 8081c30:	42b3      	cmp	r3, r6
 8081c32:	eb02 0105 	add.w	r1, r2, r5
 8081c36:	ddf1      	ble.n	8081c1c <__ieee754_sqrt+0x74>
 8081c38:	2900      	cmp	r1, #0
 8081c3a:	eb01 0502 	add.w	r5, r1, r2
 8081c3e:	db09      	blt.n	8081c54 <__ieee754_sqrt+0xac>
 8081c40:	46b0      	mov	r8, r6
 8081c42:	1b9b      	subs	r3, r3, r6
 8081c44:	42a1      	cmp	r1, r4
 8081c46:	bf88      	it	hi
 8081c48:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8081c4c:	4646      	mov	r6, r8
 8081c4e:	1a64      	subs	r4, r4, r1
 8081c50:	4417      	add	r7, r2
 8081c52:	e7e4      	b.n	8081c1e <__ieee754_sqrt+0x76>
 8081c54:	2d00      	cmp	r5, #0
 8081c56:	dbf3      	blt.n	8081c40 <__ieee754_sqrt+0x98>
 8081c58:	f106 0801 	add.w	r8, r6, #1
 8081c5c:	e7f1      	b.n	8081c42 <__ieee754_sqrt+0x9a>
 8081c5e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8081c62:	4302      	orrs	r2, r0
 8081c64:	d057      	beq.n	8081d16 <__ieee754_sqrt+0x16e>
 8081c66:	2900      	cmp	r1, #0
 8081c68:	d14b      	bne.n	8081d02 <__ieee754_sqrt+0x15a>
 8081c6a:	0ae2      	lsrs	r2, r4, #11
 8081c6c:	4613      	mov	r3, r2
 8081c6e:	3915      	subs	r1, #21
 8081c70:	0564      	lsls	r4, r4, #21
 8081c72:	2a00      	cmp	r2, #0
 8081c74:	d0f9      	beq.n	8081c6a <__ieee754_sqrt+0xc2>
 8081c76:	02d7      	lsls	r7, r2, #11
 8081c78:	d452      	bmi.n	8081d20 <__ieee754_sqrt+0x178>
 8081c7a:	2000      	movs	r0, #0
 8081c7c:	005b      	lsls	r3, r3, #1
 8081c7e:	02de      	lsls	r6, r3, #11
 8081c80:	4605      	mov	r5, r0
 8081c82:	f100 0001 	add.w	r0, r0, #1
 8081c86:	d5f9      	bpl.n	8081c7c <__ieee754_sqrt+0xd4>
 8081c88:	461a      	mov	r2, r3
 8081c8a:	4623      	mov	r3, r4
 8081c8c:	4084      	lsls	r4, r0
 8081c8e:	f1c0 0020 	rsb	r0, r0, #32
 8081c92:	40c3      	lsrs	r3, r0
 8081c94:	4313      	orrs	r3, r2
 8081c96:	1b49      	subs	r1, r1, r5
 8081c98:	e794      	b.n	8081bc4 <__ieee754_sqrt+0x1c>
 8081c9a:	42a1      	cmp	r1, r4
 8081c9c:	d8bf      	bhi.n	8081c1e <__ieee754_sqrt+0x76>
 8081c9e:	2900      	cmp	r1, #0
 8081ca0:	eb01 0502 	add.w	r5, r1, r2
 8081ca4:	dbd6      	blt.n	8081c54 <__ieee754_sqrt+0xac>
 8081ca6:	4698      	mov	r8, r3
 8081ca8:	2300      	movs	r3, #0
 8081caa:	e7cf      	b.n	8081c4c <__ieee754_sqrt+0xa4>
 8081cac:	4323      	orrs	r3, r4
 8081cae:	d113      	bne.n	8081cd8 <__ieee754_sqrt+0x130>
 8081cb0:	0878      	lsrs	r0, r7, #1
 8081cb2:	ea4f 036c 	mov.w	r3, ip, asr #1
 8081cb6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8081cba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8081cbe:	f01c 0f01 	tst.w	ip, #1
 8081cc2:	bf18      	it	ne
 8081cc4:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
 8081cc8:	eb03 550e 	add.w	r5, r3, lr, lsl #20
 8081ccc:	4602      	mov	r2, r0
 8081cce:	462b      	mov	r3, r5
 8081cd0:	4610      	mov	r0, r2
 8081cd2:	4619      	mov	r1, r3
 8081cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081cd8:	1c7b      	adds	r3, r7, #1
 8081cda:	bf16      	itet	ne
 8081cdc:	1c78      	addne	r0, r7, #1
 8081cde:	f10c 0c01 	addeq.w	ip, ip, #1
 8081ce2:	0840      	lsrne	r0, r0, #1
 8081ce4:	e7e5      	b.n	8081cb2 <__ieee754_sqrt+0x10a>
 8081ce6:	4602      	mov	r2, r0
 8081ce8:	460b      	mov	r3, r1
 8081cea:	f000 f9df 	bl	80820ac <__aeabi_dmul>
 8081cee:	462a      	mov	r2, r5
 8081cf0:	4633      	mov	r3, r6
 8081cf2:	f000 f825 	bl	8081d40 <__adddf3>
 8081cf6:	4602      	mov	r2, r0
 8081cf8:	460b      	mov	r3, r1
 8081cfa:	4610      	mov	r0, r2
 8081cfc:	4619      	mov	r1, r3
 8081cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081d02:	4602      	mov	r2, r0
 8081d04:	f000 f81a 	bl	8081d3c <__aeabi_dsub>
 8081d08:	4602      	mov	r2, r0
 8081d0a:	460b      	mov	r3, r1
 8081d0c:	f000 faf8 	bl	8082300 <__aeabi_ddiv>
 8081d10:	4602      	mov	r2, r0
 8081d12:	460b      	mov	r3, r1
 8081d14:	e7dc      	b.n	8081cd0 <__ieee754_sqrt+0x128>
 8081d16:	4602      	mov	r2, r0
 8081d18:	4619      	mov	r1, r3
 8081d1a:	4610      	mov	r0, r2
 8081d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081d20:	4623      	mov	r3, r4
 8081d22:	2020      	movs	r0, #32
 8081d24:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8081d28:	e7b3      	b.n	8081c92 <__ieee754_sqrt+0xea>
 8081d2a:	bf00      	nop
 8081d2c:	7ff00000 	.word	0x7ff00000

08081d30 <matherr>:
 8081d30:	2000      	movs	r0, #0
 8081d32:	4770      	bx	lr

08081d34 <__aeabi_drsub>:
 8081d34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8081d38:	e002      	b.n	8081d40 <__adddf3>
 8081d3a:	bf00      	nop

08081d3c <__aeabi_dsub>:
 8081d3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08081d40 <__adddf3>:
 8081d40:	b530      	push	{r4, r5, lr}
 8081d42:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8081d46:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8081d4a:	ea94 0f05 	teq	r4, r5
 8081d4e:	bf08      	it	eq
 8081d50:	ea90 0f02 	teqeq	r0, r2
 8081d54:	bf1f      	itttt	ne
 8081d56:	ea54 0c00 	orrsne.w	ip, r4, r0
 8081d5a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8081d5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8081d62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8081d66:	f000 80e2 	beq.w	8081f2e <__adddf3+0x1ee>
 8081d6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8081d6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8081d72:	bfb8      	it	lt
 8081d74:	426d      	neglt	r5, r5
 8081d76:	dd0c      	ble.n	8081d92 <__adddf3+0x52>
 8081d78:	442c      	add	r4, r5
 8081d7a:	ea80 0202 	eor.w	r2, r0, r2
 8081d7e:	ea81 0303 	eor.w	r3, r1, r3
 8081d82:	ea82 0000 	eor.w	r0, r2, r0
 8081d86:	ea83 0101 	eor.w	r1, r3, r1
 8081d8a:	ea80 0202 	eor.w	r2, r0, r2
 8081d8e:	ea81 0303 	eor.w	r3, r1, r3
 8081d92:	2d36      	cmp	r5, #54	; 0x36
 8081d94:	bf88      	it	hi
 8081d96:	bd30      	pophi	{r4, r5, pc}
 8081d98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8081d9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8081da0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8081da4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8081da8:	d002      	beq.n	8081db0 <__adddf3+0x70>
 8081daa:	4240      	negs	r0, r0
 8081dac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8081db0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8081db4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8081db8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8081dbc:	d002      	beq.n	8081dc4 <__adddf3+0x84>
 8081dbe:	4252      	negs	r2, r2
 8081dc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8081dc4:	ea94 0f05 	teq	r4, r5
 8081dc8:	f000 80a7 	beq.w	8081f1a <__adddf3+0x1da>
 8081dcc:	f1a4 0401 	sub.w	r4, r4, #1
 8081dd0:	f1d5 0e20 	rsbs	lr, r5, #32
 8081dd4:	db0d      	blt.n	8081df2 <__adddf3+0xb2>
 8081dd6:	fa02 fc0e 	lsl.w	ip, r2, lr
 8081dda:	fa22 f205 	lsr.w	r2, r2, r5
 8081dde:	1880      	adds	r0, r0, r2
 8081de0:	f141 0100 	adc.w	r1, r1, #0
 8081de4:	fa03 f20e 	lsl.w	r2, r3, lr
 8081de8:	1880      	adds	r0, r0, r2
 8081dea:	fa43 f305 	asr.w	r3, r3, r5
 8081dee:	4159      	adcs	r1, r3
 8081df0:	e00e      	b.n	8081e10 <__adddf3+0xd0>
 8081df2:	f1a5 0520 	sub.w	r5, r5, #32
 8081df6:	f10e 0e20 	add.w	lr, lr, #32
 8081dfa:	2a01      	cmp	r2, #1
 8081dfc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8081e00:	bf28      	it	cs
 8081e02:	f04c 0c02 	orrcs.w	ip, ip, #2
 8081e06:	fa43 f305 	asr.w	r3, r3, r5
 8081e0a:	18c0      	adds	r0, r0, r3
 8081e0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8081e10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8081e14:	d507      	bpl.n	8081e26 <__adddf3+0xe6>
 8081e16:	f04f 0e00 	mov.w	lr, #0
 8081e1a:	f1dc 0c00 	rsbs	ip, ip, #0
 8081e1e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8081e22:	eb6e 0101 	sbc.w	r1, lr, r1
 8081e26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8081e2a:	d31b      	bcc.n	8081e64 <__adddf3+0x124>
 8081e2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8081e30:	d30c      	bcc.n	8081e4c <__adddf3+0x10c>
 8081e32:	0849      	lsrs	r1, r1, #1
 8081e34:	ea5f 0030 	movs.w	r0, r0, rrx
 8081e38:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8081e3c:	f104 0401 	add.w	r4, r4, #1
 8081e40:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8081e44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8081e48:	f080 809a 	bcs.w	8081f80 <__adddf3+0x240>
 8081e4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8081e50:	bf08      	it	eq
 8081e52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8081e56:	f150 0000 	adcs.w	r0, r0, #0
 8081e5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8081e5e:	ea41 0105 	orr.w	r1, r1, r5
 8081e62:	bd30      	pop	{r4, r5, pc}
 8081e64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8081e68:	4140      	adcs	r0, r0
 8081e6a:	eb41 0101 	adc.w	r1, r1, r1
 8081e6e:	3c01      	subs	r4, #1
 8081e70:	bf28      	it	cs
 8081e72:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8081e76:	d2e9      	bcs.n	8081e4c <__adddf3+0x10c>
 8081e78:	f091 0f00 	teq	r1, #0
 8081e7c:	bf04      	itt	eq
 8081e7e:	4601      	moveq	r1, r0
 8081e80:	2000      	moveq	r0, #0
 8081e82:	fab1 f381 	clz	r3, r1
 8081e86:	bf08      	it	eq
 8081e88:	3320      	addeq	r3, #32
 8081e8a:	f1a3 030b 	sub.w	r3, r3, #11
 8081e8e:	f1b3 0220 	subs.w	r2, r3, #32
 8081e92:	da0c      	bge.n	8081eae <__adddf3+0x16e>
 8081e94:	320c      	adds	r2, #12
 8081e96:	dd08      	ble.n	8081eaa <__adddf3+0x16a>
 8081e98:	f102 0c14 	add.w	ip, r2, #20
 8081e9c:	f1c2 020c 	rsb	r2, r2, #12
 8081ea0:	fa01 f00c 	lsl.w	r0, r1, ip
 8081ea4:	fa21 f102 	lsr.w	r1, r1, r2
 8081ea8:	e00c      	b.n	8081ec4 <__adddf3+0x184>
 8081eaa:	f102 0214 	add.w	r2, r2, #20
 8081eae:	bfd8      	it	le
 8081eb0:	f1c2 0c20 	rsble	ip, r2, #32
 8081eb4:	fa01 f102 	lsl.w	r1, r1, r2
 8081eb8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8081ebc:	bfdc      	itt	le
 8081ebe:	ea41 010c 	orrle.w	r1, r1, ip
 8081ec2:	4090      	lslle	r0, r2
 8081ec4:	1ae4      	subs	r4, r4, r3
 8081ec6:	bfa2      	ittt	ge
 8081ec8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8081ecc:	4329      	orrge	r1, r5
 8081ece:	bd30      	popge	{r4, r5, pc}
 8081ed0:	ea6f 0404 	mvn.w	r4, r4
 8081ed4:	3c1f      	subs	r4, #31
 8081ed6:	da1c      	bge.n	8081f12 <__adddf3+0x1d2>
 8081ed8:	340c      	adds	r4, #12
 8081eda:	dc0e      	bgt.n	8081efa <__adddf3+0x1ba>
 8081edc:	f104 0414 	add.w	r4, r4, #20
 8081ee0:	f1c4 0220 	rsb	r2, r4, #32
 8081ee4:	fa20 f004 	lsr.w	r0, r0, r4
 8081ee8:	fa01 f302 	lsl.w	r3, r1, r2
 8081eec:	ea40 0003 	orr.w	r0, r0, r3
 8081ef0:	fa21 f304 	lsr.w	r3, r1, r4
 8081ef4:	ea45 0103 	orr.w	r1, r5, r3
 8081ef8:	bd30      	pop	{r4, r5, pc}
 8081efa:	f1c4 040c 	rsb	r4, r4, #12
 8081efe:	f1c4 0220 	rsb	r2, r4, #32
 8081f02:	fa20 f002 	lsr.w	r0, r0, r2
 8081f06:	fa01 f304 	lsl.w	r3, r1, r4
 8081f0a:	ea40 0003 	orr.w	r0, r0, r3
 8081f0e:	4629      	mov	r1, r5
 8081f10:	bd30      	pop	{r4, r5, pc}
 8081f12:	fa21 f004 	lsr.w	r0, r1, r4
 8081f16:	4629      	mov	r1, r5
 8081f18:	bd30      	pop	{r4, r5, pc}
 8081f1a:	f094 0f00 	teq	r4, #0
 8081f1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8081f22:	bf06      	itte	eq
 8081f24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8081f28:	3401      	addeq	r4, #1
 8081f2a:	3d01      	subne	r5, #1
 8081f2c:	e74e      	b.n	8081dcc <__adddf3+0x8c>
 8081f2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8081f32:	bf18      	it	ne
 8081f34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8081f38:	d029      	beq.n	8081f8e <__adddf3+0x24e>
 8081f3a:	ea94 0f05 	teq	r4, r5
 8081f3e:	bf08      	it	eq
 8081f40:	ea90 0f02 	teqeq	r0, r2
 8081f44:	d005      	beq.n	8081f52 <__adddf3+0x212>
 8081f46:	ea54 0c00 	orrs.w	ip, r4, r0
 8081f4a:	bf04      	itt	eq
 8081f4c:	4619      	moveq	r1, r3
 8081f4e:	4610      	moveq	r0, r2
 8081f50:	bd30      	pop	{r4, r5, pc}
 8081f52:	ea91 0f03 	teq	r1, r3
 8081f56:	bf1e      	ittt	ne
 8081f58:	2100      	movne	r1, #0
 8081f5a:	2000      	movne	r0, #0
 8081f5c:	bd30      	popne	{r4, r5, pc}
 8081f5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8081f62:	d105      	bne.n	8081f70 <__adddf3+0x230>
 8081f64:	0040      	lsls	r0, r0, #1
 8081f66:	4149      	adcs	r1, r1
 8081f68:	bf28      	it	cs
 8081f6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8081f6e:	bd30      	pop	{r4, r5, pc}
 8081f70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8081f74:	bf3c      	itt	cc
 8081f76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8081f7a:	bd30      	popcc	{r4, r5, pc}
 8081f7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8081f80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8081f84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8081f88:	f04f 0000 	mov.w	r0, #0
 8081f8c:	bd30      	pop	{r4, r5, pc}
 8081f8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8081f92:	bf1a      	itte	ne
 8081f94:	4619      	movne	r1, r3
 8081f96:	4610      	movne	r0, r2
 8081f98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8081f9c:	bf1c      	itt	ne
 8081f9e:	460b      	movne	r3, r1
 8081fa0:	4602      	movne	r2, r0
 8081fa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8081fa6:	bf06      	itte	eq
 8081fa8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8081fac:	ea91 0f03 	teqeq	r1, r3
 8081fb0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8081fb4:	bd30      	pop	{r4, r5, pc}
 8081fb6:	bf00      	nop

08081fb8 <__aeabi_ui2d>:
 8081fb8:	f090 0f00 	teq	r0, #0
 8081fbc:	bf04      	itt	eq
 8081fbe:	2100      	moveq	r1, #0
 8081fc0:	4770      	bxeq	lr
 8081fc2:	b530      	push	{r4, r5, lr}
 8081fc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8081fc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8081fcc:	f04f 0500 	mov.w	r5, #0
 8081fd0:	f04f 0100 	mov.w	r1, #0
 8081fd4:	e750      	b.n	8081e78 <__adddf3+0x138>
 8081fd6:	bf00      	nop

08081fd8 <__aeabi_i2d>:
 8081fd8:	f090 0f00 	teq	r0, #0
 8081fdc:	bf04      	itt	eq
 8081fde:	2100      	moveq	r1, #0
 8081fe0:	4770      	bxeq	lr
 8081fe2:	b530      	push	{r4, r5, lr}
 8081fe4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8081fe8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8081fec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8081ff0:	bf48      	it	mi
 8081ff2:	4240      	negmi	r0, r0
 8081ff4:	f04f 0100 	mov.w	r1, #0
 8081ff8:	e73e      	b.n	8081e78 <__adddf3+0x138>
 8081ffa:	bf00      	nop

08081ffc <__aeabi_f2d>:
 8081ffc:	0042      	lsls	r2, r0, #1
 8081ffe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8082002:	ea4f 0131 	mov.w	r1, r1, rrx
 8082006:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808200a:	bf1f      	itttt	ne
 808200c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8082010:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8082014:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8082018:	4770      	bxne	lr
 808201a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 808201e:	bf08      	it	eq
 8082020:	4770      	bxeq	lr
 8082022:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8082026:	bf04      	itt	eq
 8082028:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 808202c:	4770      	bxeq	lr
 808202e:	b530      	push	{r4, r5, lr}
 8082030:	f44f 7460 	mov.w	r4, #896	; 0x380
 8082034:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082038:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808203c:	e71c      	b.n	8081e78 <__adddf3+0x138>
 808203e:	bf00      	nop

08082040 <__aeabi_ul2d>:
 8082040:	ea50 0201 	orrs.w	r2, r0, r1
 8082044:	bf08      	it	eq
 8082046:	4770      	bxeq	lr
 8082048:	b530      	push	{r4, r5, lr}
 808204a:	f04f 0500 	mov.w	r5, #0
 808204e:	e00a      	b.n	8082066 <__aeabi_l2d+0x16>

08082050 <__aeabi_l2d>:
 8082050:	ea50 0201 	orrs.w	r2, r0, r1
 8082054:	bf08      	it	eq
 8082056:	4770      	bxeq	lr
 8082058:	b530      	push	{r4, r5, lr}
 808205a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808205e:	d502      	bpl.n	8082066 <__aeabi_l2d+0x16>
 8082060:	4240      	negs	r0, r0
 8082062:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8082066:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808206a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808206e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8082072:	f43f aed8 	beq.w	8081e26 <__adddf3+0xe6>
 8082076:	f04f 0203 	mov.w	r2, #3
 808207a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808207e:	bf18      	it	ne
 8082080:	3203      	addne	r2, #3
 8082082:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8082086:	bf18      	it	ne
 8082088:	3203      	addne	r2, #3
 808208a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808208e:	f1c2 0320 	rsb	r3, r2, #32
 8082092:	fa00 fc03 	lsl.w	ip, r0, r3
 8082096:	fa20 f002 	lsr.w	r0, r0, r2
 808209a:	fa01 fe03 	lsl.w	lr, r1, r3
 808209e:	ea40 000e 	orr.w	r0, r0, lr
 80820a2:	fa21 f102 	lsr.w	r1, r1, r2
 80820a6:	4414      	add	r4, r2
 80820a8:	e6bd      	b.n	8081e26 <__adddf3+0xe6>
 80820aa:	bf00      	nop

080820ac <__aeabi_dmul>:
 80820ac:	b570      	push	{r4, r5, r6, lr}
 80820ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80820b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80820b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80820ba:	bf1d      	ittte	ne
 80820bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80820c0:	ea94 0f0c 	teqne	r4, ip
 80820c4:	ea95 0f0c 	teqne	r5, ip
 80820c8:	f000 f8de 	bleq	8082288 <__aeabi_dmul+0x1dc>
 80820cc:	442c      	add	r4, r5
 80820ce:	ea81 0603 	eor.w	r6, r1, r3
 80820d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80820d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80820da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80820de:	bf18      	it	ne
 80820e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80820e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80820e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80820ec:	d038      	beq.n	8082160 <__aeabi_dmul+0xb4>
 80820ee:	fba0 ce02 	umull	ip, lr, r0, r2
 80820f2:	f04f 0500 	mov.w	r5, #0
 80820f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80820fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80820fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 8082102:	f04f 0600 	mov.w	r6, #0
 8082106:	fbe1 5603 	umlal	r5, r6, r1, r3
 808210a:	f09c 0f00 	teq	ip, #0
 808210e:	bf18      	it	ne
 8082110:	f04e 0e01 	orrne.w	lr, lr, #1
 8082114:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8082118:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808211c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8082120:	d204      	bcs.n	808212c <__aeabi_dmul+0x80>
 8082122:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8082126:	416d      	adcs	r5, r5
 8082128:	eb46 0606 	adc.w	r6, r6, r6
 808212c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8082130:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8082134:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8082138:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808213c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8082140:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8082144:	bf88      	it	hi
 8082146:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808214a:	d81e      	bhi.n	808218a <__aeabi_dmul+0xde>
 808214c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8082150:	bf08      	it	eq
 8082152:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8082156:	f150 0000 	adcs.w	r0, r0, #0
 808215a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808215e:	bd70      	pop	{r4, r5, r6, pc}
 8082160:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8082164:	ea46 0101 	orr.w	r1, r6, r1
 8082168:	ea40 0002 	orr.w	r0, r0, r2
 808216c:	ea81 0103 	eor.w	r1, r1, r3
 8082170:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8082174:	bfc2      	ittt	gt
 8082176:	ebd4 050c 	rsbsgt	r5, r4, ip
 808217a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808217e:	bd70      	popgt	{r4, r5, r6, pc}
 8082180:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8082184:	f04f 0e00 	mov.w	lr, #0
 8082188:	3c01      	subs	r4, #1
 808218a:	f300 80ab 	bgt.w	80822e4 <__aeabi_dmul+0x238>
 808218e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8082192:	bfde      	ittt	le
 8082194:	2000      	movle	r0, #0
 8082196:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808219a:	bd70      	pople	{r4, r5, r6, pc}
 808219c:	f1c4 0400 	rsb	r4, r4, #0
 80821a0:	3c20      	subs	r4, #32
 80821a2:	da35      	bge.n	8082210 <__aeabi_dmul+0x164>
 80821a4:	340c      	adds	r4, #12
 80821a6:	dc1b      	bgt.n	80821e0 <__aeabi_dmul+0x134>
 80821a8:	f104 0414 	add.w	r4, r4, #20
 80821ac:	f1c4 0520 	rsb	r5, r4, #32
 80821b0:	fa00 f305 	lsl.w	r3, r0, r5
 80821b4:	fa20 f004 	lsr.w	r0, r0, r4
 80821b8:	fa01 f205 	lsl.w	r2, r1, r5
 80821bc:	ea40 0002 	orr.w	r0, r0, r2
 80821c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80821c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80821c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80821cc:	fa21 f604 	lsr.w	r6, r1, r4
 80821d0:	eb42 0106 	adc.w	r1, r2, r6
 80821d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80821d8:	bf08      	it	eq
 80821da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80821de:	bd70      	pop	{r4, r5, r6, pc}
 80821e0:	f1c4 040c 	rsb	r4, r4, #12
 80821e4:	f1c4 0520 	rsb	r5, r4, #32
 80821e8:	fa00 f304 	lsl.w	r3, r0, r4
 80821ec:	fa20 f005 	lsr.w	r0, r0, r5
 80821f0:	fa01 f204 	lsl.w	r2, r1, r4
 80821f4:	ea40 0002 	orr.w	r0, r0, r2
 80821f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80821fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8082200:	f141 0100 	adc.w	r1, r1, #0
 8082204:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8082208:	bf08      	it	eq
 808220a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808220e:	bd70      	pop	{r4, r5, r6, pc}
 8082210:	f1c4 0520 	rsb	r5, r4, #32
 8082214:	fa00 f205 	lsl.w	r2, r0, r5
 8082218:	ea4e 0e02 	orr.w	lr, lr, r2
 808221c:	fa20 f304 	lsr.w	r3, r0, r4
 8082220:	fa01 f205 	lsl.w	r2, r1, r5
 8082224:	ea43 0302 	orr.w	r3, r3, r2
 8082228:	fa21 f004 	lsr.w	r0, r1, r4
 808222c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082230:	fa21 f204 	lsr.w	r2, r1, r4
 8082234:	ea20 0002 	bic.w	r0, r0, r2
 8082238:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808223c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8082240:	bf08      	it	eq
 8082242:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8082246:	bd70      	pop	{r4, r5, r6, pc}
 8082248:	f094 0f00 	teq	r4, #0
 808224c:	d10f      	bne.n	808226e <__aeabi_dmul+0x1c2>
 808224e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8082252:	0040      	lsls	r0, r0, #1
 8082254:	eb41 0101 	adc.w	r1, r1, r1
 8082258:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808225c:	bf08      	it	eq
 808225e:	3c01      	subeq	r4, #1
 8082260:	d0f7      	beq.n	8082252 <__aeabi_dmul+0x1a6>
 8082262:	ea41 0106 	orr.w	r1, r1, r6
 8082266:	f095 0f00 	teq	r5, #0
 808226a:	bf18      	it	ne
 808226c:	4770      	bxne	lr
 808226e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8082272:	0052      	lsls	r2, r2, #1
 8082274:	eb43 0303 	adc.w	r3, r3, r3
 8082278:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808227c:	bf08      	it	eq
 808227e:	3d01      	subeq	r5, #1
 8082280:	d0f7      	beq.n	8082272 <__aeabi_dmul+0x1c6>
 8082282:	ea43 0306 	orr.w	r3, r3, r6
 8082286:	4770      	bx	lr
 8082288:	ea94 0f0c 	teq	r4, ip
 808228c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8082290:	bf18      	it	ne
 8082292:	ea95 0f0c 	teqne	r5, ip
 8082296:	d00c      	beq.n	80822b2 <__aeabi_dmul+0x206>
 8082298:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808229c:	bf18      	it	ne
 808229e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80822a2:	d1d1      	bne.n	8082248 <__aeabi_dmul+0x19c>
 80822a4:	ea81 0103 	eor.w	r1, r1, r3
 80822a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80822ac:	f04f 0000 	mov.w	r0, #0
 80822b0:	bd70      	pop	{r4, r5, r6, pc}
 80822b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80822b6:	bf06      	itte	eq
 80822b8:	4610      	moveq	r0, r2
 80822ba:	4619      	moveq	r1, r3
 80822bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80822c0:	d019      	beq.n	80822f6 <__aeabi_dmul+0x24a>
 80822c2:	ea94 0f0c 	teq	r4, ip
 80822c6:	d102      	bne.n	80822ce <__aeabi_dmul+0x222>
 80822c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80822cc:	d113      	bne.n	80822f6 <__aeabi_dmul+0x24a>
 80822ce:	ea95 0f0c 	teq	r5, ip
 80822d2:	d105      	bne.n	80822e0 <__aeabi_dmul+0x234>
 80822d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80822d8:	bf1c      	itt	ne
 80822da:	4610      	movne	r0, r2
 80822dc:	4619      	movne	r1, r3
 80822de:	d10a      	bne.n	80822f6 <__aeabi_dmul+0x24a>
 80822e0:	ea81 0103 	eor.w	r1, r1, r3
 80822e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80822e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80822ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80822f0:	f04f 0000 	mov.w	r0, #0
 80822f4:	bd70      	pop	{r4, r5, r6, pc}
 80822f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80822fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80822fe:	bd70      	pop	{r4, r5, r6, pc}

08082300 <__aeabi_ddiv>:
 8082300:	b570      	push	{r4, r5, r6, lr}
 8082302:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8082306:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808230a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808230e:	bf1d      	ittte	ne
 8082310:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8082314:	ea94 0f0c 	teqne	r4, ip
 8082318:	ea95 0f0c 	teqne	r5, ip
 808231c:	f000 f8a7 	bleq	808246e <__aeabi_ddiv+0x16e>
 8082320:	eba4 0405 	sub.w	r4, r4, r5
 8082324:	ea81 0e03 	eor.w	lr, r1, r3
 8082328:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808232c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8082330:	f000 8088 	beq.w	8082444 <__aeabi_ddiv+0x144>
 8082334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8082338:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808233c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8082340:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8082344:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8082348:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808234c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8082350:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8082354:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8082358:	429d      	cmp	r5, r3
 808235a:	bf08      	it	eq
 808235c:	4296      	cmpeq	r6, r2
 808235e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8082362:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8082366:	d202      	bcs.n	808236e <__aeabi_ddiv+0x6e>
 8082368:	085b      	lsrs	r3, r3, #1
 808236a:	ea4f 0232 	mov.w	r2, r2, rrx
 808236e:	1ab6      	subs	r6, r6, r2
 8082370:	eb65 0503 	sbc.w	r5, r5, r3
 8082374:	085b      	lsrs	r3, r3, #1
 8082376:	ea4f 0232 	mov.w	r2, r2, rrx
 808237a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808237e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8082382:	ebb6 0e02 	subs.w	lr, r6, r2
 8082386:	eb75 0e03 	sbcs.w	lr, r5, r3
 808238a:	bf22      	ittt	cs
 808238c:	1ab6      	subcs	r6, r6, r2
 808238e:	4675      	movcs	r5, lr
 8082390:	ea40 000c 	orrcs.w	r0, r0, ip
 8082394:	085b      	lsrs	r3, r3, #1
 8082396:	ea4f 0232 	mov.w	r2, r2, rrx
 808239a:	ebb6 0e02 	subs.w	lr, r6, r2
 808239e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80823a2:	bf22      	ittt	cs
 80823a4:	1ab6      	subcs	r6, r6, r2
 80823a6:	4675      	movcs	r5, lr
 80823a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80823ac:	085b      	lsrs	r3, r3, #1
 80823ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80823b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80823b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80823ba:	bf22      	ittt	cs
 80823bc:	1ab6      	subcs	r6, r6, r2
 80823be:	4675      	movcs	r5, lr
 80823c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80823c4:	085b      	lsrs	r3, r3, #1
 80823c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80823ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80823ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80823d2:	bf22      	ittt	cs
 80823d4:	1ab6      	subcs	r6, r6, r2
 80823d6:	4675      	movcs	r5, lr
 80823d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80823dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80823e0:	d018      	beq.n	8082414 <__aeabi_ddiv+0x114>
 80823e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80823e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80823ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80823ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80823f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80823f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80823fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80823fe:	d1c0      	bne.n	8082382 <__aeabi_ddiv+0x82>
 8082400:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082404:	d10b      	bne.n	808241e <__aeabi_ddiv+0x11e>
 8082406:	ea41 0100 	orr.w	r1, r1, r0
 808240a:	f04f 0000 	mov.w	r0, #0
 808240e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8082412:	e7b6      	b.n	8082382 <__aeabi_ddiv+0x82>
 8082414:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082418:	bf04      	itt	eq
 808241a:	4301      	orreq	r1, r0
 808241c:	2000      	moveq	r0, #0
 808241e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8082422:	bf88      	it	hi
 8082424:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8082428:	f63f aeaf 	bhi.w	808218a <__aeabi_dmul+0xde>
 808242c:	ebb5 0c03 	subs.w	ip, r5, r3
 8082430:	bf04      	itt	eq
 8082432:	ebb6 0c02 	subseq.w	ip, r6, r2
 8082436:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808243a:	f150 0000 	adcs.w	r0, r0, #0
 808243e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8082442:	bd70      	pop	{r4, r5, r6, pc}
 8082444:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8082448:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808244c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8082450:	bfc2      	ittt	gt
 8082452:	ebd4 050c 	rsbsgt	r5, r4, ip
 8082456:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808245a:	bd70      	popgt	{r4, r5, r6, pc}
 808245c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8082460:	f04f 0e00 	mov.w	lr, #0
 8082464:	3c01      	subs	r4, #1
 8082466:	e690      	b.n	808218a <__aeabi_dmul+0xde>
 8082468:	ea45 0e06 	orr.w	lr, r5, r6
 808246c:	e68d      	b.n	808218a <__aeabi_dmul+0xde>
 808246e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8082472:	ea94 0f0c 	teq	r4, ip
 8082476:	bf08      	it	eq
 8082478:	ea95 0f0c 	teqeq	r5, ip
 808247c:	f43f af3b 	beq.w	80822f6 <__aeabi_dmul+0x24a>
 8082480:	ea94 0f0c 	teq	r4, ip
 8082484:	d10a      	bne.n	808249c <__aeabi_ddiv+0x19c>
 8082486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808248a:	f47f af34 	bne.w	80822f6 <__aeabi_dmul+0x24a>
 808248e:	ea95 0f0c 	teq	r5, ip
 8082492:	f47f af25 	bne.w	80822e0 <__aeabi_dmul+0x234>
 8082496:	4610      	mov	r0, r2
 8082498:	4619      	mov	r1, r3
 808249a:	e72c      	b.n	80822f6 <__aeabi_dmul+0x24a>
 808249c:	ea95 0f0c 	teq	r5, ip
 80824a0:	d106      	bne.n	80824b0 <__aeabi_ddiv+0x1b0>
 80824a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80824a6:	f43f aefd 	beq.w	80822a4 <__aeabi_dmul+0x1f8>
 80824aa:	4610      	mov	r0, r2
 80824ac:	4619      	mov	r1, r3
 80824ae:	e722      	b.n	80822f6 <__aeabi_dmul+0x24a>
 80824b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80824b4:	bf18      	it	ne
 80824b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80824ba:	f47f aec5 	bne.w	8082248 <__aeabi_dmul+0x19c>
 80824be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80824c2:	f47f af0d 	bne.w	80822e0 <__aeabi_dmul+0x234>
 80824c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80824ca:	f47f aeeb 	bne.w	80822a4 <__aeabi_dmul+0x1f8>
 80824ce:	e712      	b.n	80822f6 <__aeabi_dmul+0x24a>

080824d0 <__gedf2>:
 80824d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80824d4:	e006      	b.n	80824e4 <__cmpdf2+0x4>
 80824d6:	bf00      	nop

080824d8 <__ledf2>:
 80824d8:	f04f 0c01 	mov.w	ip, #1
 80824dc:	e002      	b.n	80824e4 <__cmpdf2+0x4>
 80824de:	bf00      	nop

080824e0 <__cmpdf2>:
 80824e0:	f04f 0c01 	mov.w	ip, #1
 80824e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80824e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80824ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80824f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80824f4:	bf18      	it	ne
 80824f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80824fa:	d01b      	beq.n	8082534 <__cmpdf2+0x54>
 80824fc:	b001      	add	sp, #4
 80824fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8082502:	bf0c      	ite	eq
 8082504:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8082508:	ea91 0f03 	teqne	r1, r3
 808250c:	bf02      	ittt	eq
 808250e:	ea90 0f02 	teqeq	r0, r2
 8082512:	2000      	moveq	r0, #0
 8082514:	4770      	bxeq	lr
 8082516:	f110 0f00 	cmn.w	r0, #0
 808251a:	ea91 0f03 	teq	r1, r3
 808251e:	bf58      	it	pl
 8082520:	4299      	cmppl	r1, r3
 8082522:	bf08      	it	eq
 8082524:	4290      	cmpeq	r0, r2
 8082526:	bf2c      	ite	cs
 8082528:	17d8      	asrcs	r0, r3, #31
 808252a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808252e:	f040 0001 	orr.w	r0, r0, #1
 8082532:	4770      	bx	lr
 8082534:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8082538:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808253c:	d102      	bne.n	8082544 <__cmpdf2+0x64>
 808253e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8082542:	d107      	bne.n	8082554 <__cmpdf2+0x74>
 8082544:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8082548:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808254c:	d1d6      	bne.n	80824fc <__cmpdf2+0x1c>
 808254e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8082552:	d0d3      	beq.n	80824fc <__cmpdf2+0x1c>
 8082554:	f85d 0b04 	ldr.w	r0, [sp], #4
 8082558:	4770      	bx	lr
 808255a:	bf00      	nop

0808255c <__aeabi_cdrcmple>:
 808255c:	4684      	mov	ip, r0
 808255e:	4610      	mov	r0, r2
 8082560:	4662      	mov	r2, ip
 8082562:	468c      	mov	ip, r1
 8082564:	4619      	mov	r1, r3
 8082566:	4663      	mov	r3, ip
 8082568:	e000      	b.n	808256c <__aeabi_cdcmpeq>
 808256a:	bf00      	nop

0808256c <__aeabi_cdcmpeq>:
 808256c:	b501      	push	{r0, lr}
 808256e:	f7ff ffb7 	bl	80824e0 <__cmpdf2>
 8082572:	2800      	cmp	r0, #0
 8082574:	bf48      	it	mi
 8082576:	f110 0f00 	cmnmi.w	r0, #0
 808257a:	bd01      	pop	{r0, pc}

0808257c <__aeabi_dcmpeq>:
 808257c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082580:	f7ff fff4 	bl	808256c <__aeabi_cdcmpeq>
 8082584:	bf0c      	ite	eq
 8082586:	2001      	moveq	r0, #1
 8082588:	2000      	movne	r0, #0
 808258a:	f85d fb08 	ldr.w	pc, [sp], #8
 808258e:	bf00      	nop

08082590 <__aeabi_dcmplt>:
 8082590:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082594:	f7ff ffea 	bl	808256c <__aeabi_cdcmpeq>
 8082598:	bf34      	ite	cc
 808259a:	2001      	movcc	r0, #1
 808259c:	2000      	movcs	r0, #0
 808259e:	f85d fb08 	ldr.w	pc, [sp], #8
 80825a2:	bf00      	nop

080825a4 <__aeabi_dcmple>:
 80825a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80825a8:	f7ff ffe0 	bl	808256c <__aeabi_cdcmpeq>
 80825ac:	bf94      	ite	ls
 80825ae:	2001      	movls	r0, #1
 80825b0:	2000      	movhi	r0, #0
 80825b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80825b6:	bf00      	nop

080825b8 <__aeabi_dcmpge>:
 80825b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80825bc:	f7ff ffce 	bl	808255c <__aeabi_cdrcmple>
 80825c0:	bf94      	ite	ls
 80825c2:	2001      	movls	r0, #1
 80825c4:	2000      	movhi	r0, #0
 80825c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80825ca:	bf00      	nop

080825cc <__aeabi_dcmpgt>:
 80825cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80825d0:	f7ff ffc4 	bl	808255c <__aeabi_cdrcmple>
 80825d4:	bf34      	ite	cc
 80825d6:	2001      	movcc	r0, #1
 80825d8:	2000      	movcs	r0, #0
 80825da:	f85d fb08 	ldr.w	pc, [sp], #8
 80825de:	bf00      	nop

080825e0 <__aeabi_dcmpun>:
 80825e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80825e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80825e8:	d102      	bne.n	80825f0 <__aeabi_dcmpun+0x10>
 80825ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80825ee:	d10a      	bne.n	8082606 <__aeabi_dcmpun+0x26>
 80825f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80825f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80825f8:	d102      	bne.n	8082600 <__aeabi_dcmpun+0x20>
 80825fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80825fe:	d102      	bne.n	8082606 <__aeabi_dcmpun+0x26>
 8082600:	f04f 0000 	mov.w	r0, #0
 8082604:	4770      	bx	lr
 8082606:	f04f 0001 	mov.w	r0, #1
 808260a:	4770      	bx	lr

0808260c <__aeabi_d2iz>:
 808260c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8082610:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8082614:	d215      	bcs.n	8082642 <__aeabi_d2iz+0x36>
 8082616:	d511      	bpl.n	808263c <__aeabi_d2iz+0x30>
 8082618:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808261c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8082620:	d912      	bls.n	8082648 <__aeabi_d2iz+0x3c>
 8082622:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8082626:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808262a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808262e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8082632:	fa23 f002 	lsr.w	r0, r3, r2
 8082636:	bf18      	it	ne
 8082638:	4240      	negne	r0, r0
 808263a:	4770      	bx	lr
 808263c:	f04f 0000 	mov.w	r0, #0
 8082640:	4770      	bx	lr
 8082642:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8082646:	d105      	bne.n	8082654 <__aeabi_d2iz+0x48>
 8082648:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808264c:	bf08      	it	eq
 808264e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8082652:	4770      	bx	lr
 8082654:	f04f 0000 	mov.w	r0, #0
 8082658:	4770      	bx	lr
 808265a:	bf00      	nop

0808265c <__aeabi_d2uiz>:
 808265c:	004a      	lsls	r2, r1, #1
 808265e:	d211      	bcs.n	8082684 <__aeabi_d2uiz+0x28>
 8082660:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8082664:	d211      	bcs.n	808268a <__aeabi_d2uiz+0x2e>
 8082666:	d50d      	bpl.n	8082684 <__aeabi_d2uiz+0x28>
 8082668:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808266c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8082670:	d40e      	bmi.n	8082690 <__aeabi_d2uiz+0x34>
 8082672:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8082676:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808267a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808267e:	fa23 f002 	lsr.w	r0, r3, r2
 8082682:	4770      	bx	lr
 8082684:	f04f 0000 	mov.w	r0, #0
 8082688:	4770      	bx	lr
 808268a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808268e:	d102      	bne.n	8082696 <__aeabi_d2uiz+0x3a>
 8082690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8082694:	4770      	bx	lr
 8082696:	f04f 0000 	mov.w	r0, #0
 808269a:	4770      	bx	lr

0808269c <__aeabi_d2f>:
 808269c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80826a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80826a4:	bf24      	itt	cs
 80826a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80826aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80826ae:	d90d      	bls.n	80826cc <__aeabi_d2f+0x30>
 80826b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80826b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80826b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80826bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80826c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80826c4:	bf08      	it	eq
 80826c6:	f020 0001 	biceq.w	r0, r0, #1
 80826ca:	4770      	bx	lr
 80826cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80826d0:	d121      	bne.n	8082716 <__aeabi_d2f+0x7a>
 80826d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80826d6:	bfbc      	itt	lt
 80826d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80826dc:	4770      	bxlt	lr
 80826de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80826e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80826e6:	f1c2 0218 	rsb	r2, r2, #24
 80826ea:	f1c2 0c20 	rsb	ip, r2, #32
 80826ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80826f2:	fa20 f002 	lsr.w	r0, r0, r2
 80826f6:	bf18      	it	ne
 80826f8:	f040 0001 	orrne.w	r0, r0, #1
 80826fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8082700:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8082704:	fa03 fc0c 	lsl.w	ip, r3, ip
 8082708:	ea40 000c 	orr.w	r0, r0, ip
 808270c:	fa23 f302 	lsr.w	r3, r3, r2
 8082710:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8082714:	e7cc      	b.n	80826b0 <__aeabi_d2f+0x14>
 8082716:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808271a:	d107      	bne.n	808272c <__aeabi_d2f+0x90>
 808271c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8082720:	bf1e      	ittt	ne
 8082722:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8082726:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808272a:	4770      	bxne	lr
 808272c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8082730:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8082734:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082738:	4770      	bx	lr
 808273a:	bf00      	nop

0808273c <__aeabi_frsub>:
 808273c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8082740:	e002      	b.n	8082748 <__addsf3>
 8082742:	bf00      	nop

08082744 <__aeabi_fsub>:
 8082744:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08082748 <__addsf3>:
 8082748:	0042      	lsls	r2, r0, #1
 808274a:	bf1f      	itttt	ne
 808274c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8082750:	ea92 0f03 	teqne	r2, r3
 8082754:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8082758:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808275c:	d06a      	beq.n	8082834 <__addsf3+0xec>
 808275e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8082762:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8082766:	bfc1      	itttt	gt
 8082768:	18d2      	addgt	r2, r2, r3
 808276a:	4041      	eorgt	r1, r0
 808276c:	4048      	eorgt	r0, r1
 808276e:	4041      	eorgt	r1, r0
 8082770:	bfb8      	it	lt
 8082772:	425b      	neglt	r3, r3
 8082774:	2b19      	cmp	r3, #25
 8082776:	bf88      	it	hi
 8082778:	4770      	bxhi	lr
 808277a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808277e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082782:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8082786:	bf18      	it	ne
 8082788:	4240      	negne	r0, r0
 808278a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808278e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8082792:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8082796:	bf18      	it	ne
 8082798:	4249      	negne	r1, r1
 808279a:	ea92 0f03 	teq	r2, r3
 808279e:	d03f      	beq.n	8082820 <__addsf3+0xd8>
 80827a0:	f1a2 0201 	sub.w	r2, r2, #1
 80827a4:	fa41 fc03 	asr.w	ip, r1, r3
 80827a8:	eb10 000c 	adds.w	r0, r0, ip
 80827ac:	f1c3 0320 	rsb	r3, r3, #32
 80827b0:	fa01 f103 	lsl.w	r1, r1, r3
 80827b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80827b8:	d502      	bpl.n	80827c0 <__addsf3+0x78>
 80827ba:	4249      	negs	r1, r1
 80827bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80827c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80827c4:	d313      	bcc.n	80827ee <__addsf3+0xa6>
 80827c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80827ca:	d306      	bcc.n	80827da <__addsf3+0x92>
 80827cc:	0840      	lsrs	r0, r0, #1
 80827ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80827d2:	f102 0201 	add.w	r2, r2, #1
 80827d6:	2afe      	cmp	r2, #254	; 0xfe
 80827d8:	d251      	bcs.n	808287e <__addsf3+0x136>
 80827da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80827de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80827e2:	bf08      	it	eq
 80827e4:	f020 0001 	biceq.w	r0, r0, #1
 80827e8:	ea40 0003 	orr.w	r0, r0, r3
 80827ec:	4770      	bx	lr
 80827ee:	0049      	lsls	r1, r1, #1
 80827f0:	eb40 0000 	adc.w	r0, r0, r0
 80827f4:	3a01      	subs	r2, #1
 80827f6:	bf28      	it	cs
 80827f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80827fc:	d2ed      	bcs.n	80827da <__addsf3+0x92>
 80827fe:	fab0 fc80 	clz	ip, r0
 8082802:	f1ac 0c08 	sub.w	ip, ip, #8
 8082806:	ebb2 020c 	subs.w	r2, r2, ip
 808280a:	fa00 f00c 	lsl.w	r0, r0, ip
 808280e:	bfaa      	itet	ge
 8082810:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8082814:	4252      	neglt	r2, r2
 8082816:	4318      	orrge	r0, r3
 8082818:	bfbc      	itt	lt
 808281a:	40d0      	lsrlt	r0, r2
 808281c:	4318      	orrlt	r0, r3
 808281e:	4770      	bx	lr
 8082820:	f092 0f00 	teq	r2, #0
 8082824:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8082828:	bf06      	itte	eq
 808282a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808282e:	3201      	addeq	r2, #1
 8082830:	3b01      	subne	r3, #1
 8082832:	e7b5      	b.n	80827a0 <__addsf3+0x58>
 8082834:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8082838:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808283c:	bf18      	it	ne
 808283e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8082842:	d021      	beq.n	8082888 <__addsf3+0x140>
 8082844:	ea92 0f03 	teq	r2, r3
 8082848:	d004      	beq.n	8082854 <__addsf3+0x10c>
 808284a:	f092 0f00 	teq	r2, #0
 808284e:	bf08      	it	eq
 8082850:	4608      	moveq	r0, r1
 8082852:	4770      	bx	lr
 8082854:	ea90 0f01 	teq	r0, r1
 8082858:	bf1c      	itt	ne
 808285a:	2000      	movne	r0, #0
 808285c:	4770      	bxne	lr
 808285e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8082862:	d104      	bne.n	808286e <__addsf3+0x126>
 8082864:	0040      	lsls	r0, r0, #1
 8082866:	bf28      	it	cs
 8082868:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808286c:	4770      	bx	lr
 808286e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8082872:	bf3c      	itt	cc
 8082874:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8082878:	4770      	bxcc	lr
 808287a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808287e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8082882:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082886:	4770      	bx	lr
 8082888:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808288c:	bf16      	itet	ne
 808288e:	4608      	movne	r0, r1
 8082890:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8082894:	4601      	movne	r1, r0
 8082896:	0242      	lsls	r2, r0, #9
 8082898:	bf06      	itte	eq
 808289a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808289e:	ea90 0f01 	teqeq	r0, r1
 80828a2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80828a6:	4770      	bx	lr

080828a8 <__aeabi_ui2f>:
 80828a8:	f04f 0300 	mov.w	r3, #0
 80828ac:	e004      	b.n	80828b8 <__aeabi_i2f+0x8>
 80828ae:	bf00      	nop

080828b0 <__aeabi_i2f>:
 80828b0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80828b4:	bf48      	it	mi
 80828b6:	4240      	negmi	r0, r0
 80828b8:	ea5f 0c00 	movs.w	ip, r0
 80828bc:	bf08      	it	eq
 80828be:	4770      	bxeq	lr
 80828c0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80828c4:	4601      	mov	r1, r0
 80828c6:	f04f 0000 	mov.w	r0, #0
 80828ca:	e01c      	b.n	8082906 <__aeabi_l2f+0x2a>

080828cc <__aeabi_ul2f>:
 80828cc:	ea50 0201 	orrs.w	r2, r0, r1
 80828d0:	bf08      	it	eq
 80828d2:	4770      	bxeq	lr
 80828d4:	f04f 0300 	mov.w	r3, #0
 80828d8:	e00a      	b.n	80828f0 <__aeabi_l2f+0x14>
 80828da:	bf00      	nop

080828dc <__aeabi_l2f>:
 80828dc:	ea50 0201 	orrs.w	r2, r0, r1
 80828e0:	bf08      	it	eq
 80828e2:	4770      	bxeq	lr
 80828e4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80828e8:	d502      	bpl.n	80828f0 <__aeabi_l2f+0x14>
 80828ea:	4240      	negs	r0, r0
 80828ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80828f0:	ea5f 0c01 	movs.w	ip, r1
 80828f4:	bf02      	ittt	eq
 80828f6:	4684      	moveq	ip, r0
 80828f8:	4601      	moveq	r1, r0
 80828fa:	2000      	moveq	r0, #0
 80828fc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8082900:	bf08      	it	eq
 8082902:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8082906:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808290a:	fabc f28c 	clz	r2, ip
 808290e:	3a08      	subs	r2, #8
 8082910:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8082914:	db10      	blt.n	8082938 <__aeabi_l2f+0x5c>
 8082916:	fa01 fc02 	lsl.w	ip, r1, r2
 808291a:	4463      	add	r3, ip
 808291c:	fa00 fc02 	lsl.w	ip, r0, r2
 8082920:	f1c2 0220 	rsb	r2, r2, #32
 8082924:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8082928:	fa20 f202 	lsr.w	r2, r0, r2
 808292c:	eb43 0002 	adc.w	r0, r3, r2
 8082930:	bf08      	it	eq
 8082932:	f020 0001 	biceq.w	r0, r0, #1
 8082936:	4770      	bx	lr
 8082938:	f102 0220 	add.w	r2, r2, #32
 808293c:	fa01 fc02 	lsl.w	ip, r1, r2
 8082940:	f1c2 0220 	rsb	r2, r2, #32
 8082944:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8082948:	fa21 f202 	lsr.w	r2, r1, r2
 808294c:	eb43 0002 	adc.w	r0, r3, r2
 8082950:	bf08      	it	eq
 8082952:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8082956:	4770      	bx	lr

08082958 <__aeabi_fmul>:
 8082958:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808295c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8082960:	bf1e      	ittt	ne
 8082962:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8082966:	ea92 0f0c 	teqne	r2, ip
 808296a:	ea93 0f0c 	teqne	r3, ip
 808296e:	d06f      	beq.n	8082a50 <__aeabi_fmul+0xf8>
 8082970:	441a      	add	r2, r3
 8082972:	ea80 0c01 	eor.w	ip, r0, r1
 8082976:	0240      	lsls	r0, r0, #9
 8082978:	bf18      	it	ne
 808297a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808297e:	d01e      	beq.n	80829be <__aeabi_fmul+0x66>
 8082980:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8082984:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8082988:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808298c:	fba0 3101 	umull	r3, r1, r0, r1
 8082990:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8082994:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8082998:	bf3e      	ittt	cc
 808299a:	0049      	lslcc	r1, r1, #1
 808299c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80829a0:	005b      	lslcc	r3, r3, #1
 80829a2:	ea40 0001 	orr.w	r0, r0, r1
 80829a6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80829aa:	2afd      	cmp	r2, #253	; 0xfd
 80829ac:	d81d      	bhi.n	80829ea <__aeabi_fmul+0x92>
 80829ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80829b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80829b6:	bf08      	it	eq
 80829b8:	f020 0001 	biceq.w	r0, r0, #1
 80829bc:	4770      	bx	lr
 80829be:	f090 0f00 	teq	r0, #0
 80829c2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80829c6:	bf08      	it	eq
 80829c8:	0249      	lsleq	r1, r1, #9
 80829ca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80829ce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80829d2:	3a7f      	subs	r2, #127	; 0x7f
 80829d4:	bfc2      	ittt	gt
 80829d6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80829da:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80829de:	4770      	bxgt	lr
 80829e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80829e4:	f04f 0300 	mov.w	r3, #0
 80829e8:	3a01      	subs	r2, #1
 80829ea:	dc5d      	bgt.n	8082aa8 <__aeabi_fmul+0x150>
 80829ec:	f112 0f19 	cmn.w	r2, #25
 80829f0:	bfdc      	itt	le
 80829f2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80829f6:	4770      	bxle	lr
 80829f8:	f1c2 0200 	rsb	r2, r2, #0
 80829fc:	0041      	lsls	r1, r0, #1
 80829fe:	fa21 f102 	lsr.w	r1, r1, r2
 8082a02:	f1c2 0220 	rsb	r2, r2, #32
 8082a06:	fa00 fc02 	lsl.w	ip, r0, r2
 8082a0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8082a0e:	f140 0000 	adc.w	r0, r0, #0
 8082a12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8082a16:	bf08      	it	eq
 8082a18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8082a1c:	4770      	bx	lr
 8082a1e:	f092 0f00 	teq	r2, #0
 8082a22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8082a26:	bf02      	ittt	eq
 8082a28:	0040      	lsleq	r0, r0, #1
 8082a2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8082a2e:	3a01      	subeq	r2, #1
 8082a30:	d0f9      	beq.n	8082a26 <__aeabi_fmul+0xce>
 8082a32:	ea40 000c 	orr.w	r0, r0, ip
 8082a36:	f093 0f00 	teq	r3, #0
 8082a3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8082a3e:	bf02      	ittt	eq
 8082a40:	0049      	lsleq	r1, r1, #1
 8082a42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8082a46:	3b01      	subeq	r3, #1
 8082a48:	d0f9      	beq.n	8082a3e <__aeabi_fmul+0xe6>
 8082a4a:	ea41 010c 	orr.w	r1, r1, ip
 8082a4e:	e78f      	b.n	8082970 <__aeabi_fmul+0x18>
 8082a50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8082a54:	ea92 0f0c 	teq	r2, ip
 8082a58:	bf18      	it	ne
 8082a5a:	ea93 0f0c 	teqne	r3, ip
 8082a5e:	d00a      	beq.n	8082a76 <__aeabi_fmul+0x11e>
 8082a60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8082a64:	bf18      	it	ne
 8082a66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8082a6a:	d1d8      	bne.n	8082a1e <__aeabi_fmul+0xc6>
 8082a6c:	ea80 0001 	eor.w	r0, r0, r1
 8082a70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8082a74:	4770      	bx	lr
 8082a76:	f090 0f00 	teq	r0, #0
 8082a7a:	bf17      	itett	ne
 8082a7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8082a80:	4608      	moveq	r0, r1
 8082a82:	f091 0f00 	teqne	r1, #0
 8082a86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8082a8a:	d014      	beq.n	8082ab6 <__aeabi_fmul+0x15e>
 8082a8c:	ea92 0f0c 	teq	r2, ip
 8082a90:	d101      	bne.n	8082a96 <__aeabi_fmul+0x13e>
 8082a92:	0242      	lsls	r2, r0, #9
 8082a94:	d10f      	bne.n	8082ab6 <__aeabi_fmul+0x15e>
 8082a96:	ea93 0f0c 	teq	r3, ip
 8082a9a:	d103      	bne.n	8082aa4 <__aeabi_fmul+0x14c>
 8082a9c:	024b      	lsls	r3, r1, #9
 8082a9e:	bf18      	it	ne
 8082aa0:	4608      	movne	r0, r1
 8082aa2:	d108      	bne.n	8082ab6 <__aeabi_fmul+0x15e>
 8082aa4:	ea80 0001 	eor.w	r0, r0, r1
 8082aa8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8082aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8082ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082ab4:	4770      	bx	lr
 8082ab6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8082aba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8082abe:	4770      	bx	lr

08082ac0 <__aeabi_fdiv>:
 8082ac0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8082ac4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8082ac8:	bf1e      	ittt	ne
 8082aca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8082ace:	ea92 0f0c 	teqne	r2, ip
 8082ad2:	ea93 0f0c 	teqne	r3, ip
 8082ad6:	d069      	beq.n	8082bac <__aeabi_fdiv+0xec>
 8082ad8:	eba2 0203 	sub.w	r2, r2, r3
 8082adc:	ea80 0c01 	eor.w	ip, r0, r1
 8082ae0:	0249      	lsls	r1, r1, #9
 8082ae2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8082ae6:	d037      	beq.n	8082b58 <__aeabi_fdiv+0x98>
 8082ae8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8082aec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8082af0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8082af4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8082af8:	428b      	cmp	r3, r1
 8082afa:	bf38      	it	cc
 8082afc:	005b      	lslcc	r3, r3, #1
 8082afe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8082b02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8082b06:	428b      	cmp	r3, r1
 8082b08:	bf24      	itt	cs
 8082b0a:	1a5b      	subcs	r3, r3, r1
 8082b0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8082b10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8082b14:	bf24      	itt	cs
 8082b16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8082b1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8082b1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8082b22:	bf24      	itt	cs
 8082b24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8082b28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8082b2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8082b30:	bf24      	itt	cs
 8082b32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8082b36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8082b3a:	011b      	lsls	r3, r3, #4
 8082b3c:	bf18      	it	ne
 8082b3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8082b42:	d1e0      	bne.n	8082b06 <__aeabi_fdiv+0x46>
 8082b44:	2afd      	cmp	r2, #253	; 0xfd
 8082b46:	f63f af50 	bhi.w	80829ea <__aeabi_fmul+0x92>
 8082b4a:	428b      	cmp	r3, r1
 8082b4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8082b50:	bf08      	it	eq
 8082b52:	f020 0001 	biceq.w	r0, r0, #1
 8082b56:	4770      	bx	lr
 8082b58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8082b5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8082b60:	327f      	adds	r2, #127	; 0x7f
 8082b62:	bfc2      	ittt	gt
 8082b64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8082b68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8082b6c:	4770      	bxgt	lr
 8082b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082b72:	f04f 0300 	mov.w	r3, #0
 8082b76:	3a01      	subs	r2, #1
 8082b78:	e737      	b.n	80829ea <__aeabi_fmul+0x92>
 8082b7a:	f092 0f00 	teq	r2, #0
 8082b7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8082b82:	bf02      	ittt	eq
 8082b84:	0040      	lsleq	r0, r0, #1
 8082b86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8082b8a:	3a01      	subeq	r2, #1
 8082b8c:	d0f9      	beq.n	8082b82 <__aeabi_fdiv+0xc2>
 8082b8e:	ea40 000c 	orr.w	r0, r0, ip
 8082b92:	f093 0f00 	teq	r3, #0
 8082b96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8082b9a:	bf02      	ittt	eq
 8082b9c:	0049      	lsleq	r1, r1, #1
 8082b9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8082ba2:	3b01      	subeq	r3, #1
 8082ba4:	d0f9      	beq.n	8082b9a <__aeabi_fdiv+0xda>
 8082ba6:	ea41 010c 	orr.w	r1, r1, ip
 8082baa:	e795      	b.n	8082ad8 <__aeabi_fdiv+0x18>
 8082bac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8082bb0:	ea92 0f0c 	teq	r2, ip
 8082bb4:	d108      	bne.n	8082bc8 <__aeabi_fdiv+0x108>
 8082bb6:	0242      	lsls	r2, r0, #9
 8082bb8:	f47f af7d 	bne.w	8082ab6 <__aeabi_fmul+0x15e>
 8082bbc:	ea93 0f0c 	teq	r3, ip
 8082bc0:	f47f af70 	bne.w	8082aa4 <__aeabi_fmul+0x14c>
 8082bc4:	4608      	mov	r0, r1
 8082bc6:	e776      	b.n	8082ab6 <__aeabi_fmul+0x15e>
 8082bc8:	ea93 0f0c 	teq	r3, ip
 8082bcc:	d104      	bne.n	8082bd8 <__aeabi_fdiv+0x118>
 8082bce:	024b      	lsls	r3, r1, #9
 8082bd0:	f43f af4c 	beq.w	8082a6c <__aeabi_fmul+0x114>
 8082bd4:	4608      	mov	r0, r1
 8082bd6:	e76e      	b.n	8082ab6 <__aeabi_fmul+0x15e>
 8082bd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8082bdc:	bf18      	it	ne
 8082bde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8082be2:	d1ca      	bne.n	8082b7a <__aeabi_fdiv+0xba>
 8082be4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8082be8:	f47f af5c 	bne.w	8082aa4 <__aeabi_fmul+0x14c>
 8082bec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8082bf0:	f47f af3c 	bne.w	8082a6c <__aeabi_fmul+0x114>
 8082bf4:	e75f      	b.n	8082ab6 <__aeabi_fmul+0x15e>
 8082bf6:	bf00      	nop

08082bf8 <__gesf2>:
 8082bf8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8082bfc:	e006      	b.n	8082c0c <__cmpsf2+0x4>
 8082bfe:	bf00      	nop

08082c00 <__lesf2>:
 8082c00:	f04f 0c01 	mov.w	ip, #1
 8082c04:	e002      	b.n	8082c0c <__cmpsf2+0x4>
 8082c06:	bf00      	nop

08082c08 <__cmpsf2>:
 8082c08:	f04f 0c01 	mov.w	ip, #1
 8082c0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8082c10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8082c14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8082c18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8082c1c:	bf18      	it	ne
 8082c1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8082c22:	d011      	beq.n	8082c48 <__cmpsf2+0x40>
 8082c24:	b001      	add	sp, #4
 8082c26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8082c2a:	bf18      	it	ne
 8082c2c:	ea90 0f01 	teqne	r0, r1
 8082c30:	bf58      	it	pl
 8082c32:	ebb2 0003 	subspl.w	r0, r2, r3
 8082c36:	bf88      	it	hi
 8082c38:	17c8      	asrhi	r0, r1, #31
 8082c3a:	bf38      	it	cc
 8082c3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8082c40:	bf18      	it	ne
 8082c42:	f040 0001 	orrne.w	r0, r0, #1
 8082c46:	4770      	bx	lr
 8082c48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8082c4c:	d102      	bne.n	8082c54 <__cmpsf2+0x4c>
 8082c4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8082c52:	d105      	bne.n	8082c60 <__cmpsf2+0x58>
 8082c54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8082c58:	d1e4      	bne.n	8082c24 <__cmpsf2+0x1c>
 8082c5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8082c5e:	d0e1      	beq.n	8082c24 <__cmpsf2+0x1c>
 8082c60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8082c64:	4770      	bx	lr
 8082c66:	bf00      	nop

08082c68 <__aeabi_cfrcmple>:
 8082c68:	4684      	mov	ip, r0
 8082c6a:	4608      	mov	r0, r1
 8082c6c:	4661      	mov	r1, ip
 8082c6e:	e7ff      	b.n	8082c70 <__aeabi_cfcmpeq>

08082c70 <__aeabi_cfcmpeq>:
 8082c70:	b50f      	push	{r0, r1, r2, r3, lr}
 8082c72:	f7ff ffc9 	bl	8082c08 <__cmpsf2>
 8082c76:	2800      	cmp	r0, #0
 8082c78:	bf48      	it	mi
 8082c7a:	f110 0f00 	cmnmi.w	r0, #0
 8082c7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08082c80 <__aeabi_fcmpeq>:
 8082c80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082c84:	f7ff fff4 	bl	8082c70 <__aeabi_cfcmpeq>
 8082c88:	bf0c      	ite	eq
 8082c8a:	2001      	moveq	r0, #1
 8082c8c:	2000      	movne	r0, #0
 8082c8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8082c92:	bf00      	nop

08082c94 <__aeabi_fcmplt>:
 8082c94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082c98:	f7ff ffea 	bl	8082c70 <__aeabi_cfcmpeq>
 8082c9c:	bf34      	ite	cc
 8082c9e:	2001      	movcc	r0, #1
 8082ca0:	2000      	movcs	r0, #0
 8082ca2:	f85d fb08 	ldr.w	pc, [sp], #8
 8082ca6:	bf00      	nop

08082ca8 <__aeabi_fcmple>:
 8082ca8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082cac:	f7ff ffe0 	bl	8082c70 <__aeabi_cfcmpeq>
 8082cb0:	bf94      	ite	ls
 8082cb2:	2001      	movls	r0, #1
 8082cb4:	2000      	movhi	r0, #0
 8082cb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8082cba:	bf00      	nop

08082cbc <__aeabi_fcmpge>:
 8082cbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082cc0:	f7ff ffd2 	bl	8082c68 <__aeabi_cfrcmple>
 8082cc4:	bf94      	ite	ls
 8082cc6:	2001      	movls	r0, #1
 8082cc8:	2000      	movhi	r0, #0
 8082cca:	f85d fb08 	ldr.w	pc, [sp], #8
 8082cce:	bf00      	nop

08082cd0 <__aeabi_fcmpgt>:
 8082cd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082cd4:	f7ff ffc8 	bl	8082c68 <__aeabi_cfrcmple>
 8082cd8:	bf34      	ite	cc
 8082cda:	2001      	movcc	r0, #1
 8082cdc:	2000      	movcs	r0, #0
 8082cde:	f85d fb08 	ldr.w	pc, [sp], #8
 8082ce2:	bf00      	nop

08082ce4 <__aeabi_f2iz>:
 8082ce4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8082ce8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8082cec:	d30f      	bcc.n	8082d0e <__aeabi_f2iz+0x2a>
 8082cee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8082cf2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8082cf6:	d90d      	bls.n	8082d14 <__aeabi_f2iz+0x30>
 8082cf8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8082cfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8082d00:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8082d04:	fa23 f002 	lsr.w	r0, r3, r2
 8082d08:	bf18      	it	ne
 8082d0a:	4240      	negne	r0, r0
 8082d0c:	4770      	bx	lr
 8082d0e:	f04f 0000 	mov.w	r0, #0
 8082d12:	4770      	bx	lr
 8082d14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8082d18:	d101      	bne.n	8082d1e <__aeabi_f2iz+0x3a>
 8082d1a:	0242      	lsls	r2, r0, #9
 8082d1c:	d105      	bne.n	8082d2a <__aeabi_f2iz+0x46>
 8082d1e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8082d22:	bf08      	it	eq
 8082d24:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8082d28:	4770      	bx	lr
 8082d2a:	f04f 0000 	mov.w	r0, #0
 8082d2e:	4770      	bx	lr

08082d30 <__aeabi_f2uiz>:
 8082d30:	0042      	lsls	r2, r0, #1
 8082d32:	d20e      	bcs.n	8082d52 <__aeabi_f2uiz+0x22>
 8082d34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8082d38:	d30b      	bcc.n	8082d52 <__aeabi_f2uiz+0x22>
 8082d3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8082d3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8082d42:	d409      	bmi.n	8082d58 <__aeabi_f2uiz+0x28>
 8082d44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8082d48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8082d4c:	fa23 f002 	lsr.w	r0, r3, r2
 8082d50:	4770      	bx	lr
 8082d52:	f04f 0000 	mov.w	r0, #0
 8082d56:	4770      	bx	lr
 8082d58:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8082d5c:	d101      	bne.n	8082d62 <__aeabi_f2uiz+0x32>
 8082d5e:	0242      	lsls	r2, r0, #9
 8082d60:	d102      	bne.n	8082d68 <__aeabi_f2uiz+0x38>
 8082d62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8082d66:	4770      	bx	lr
 8082d68:	f04f 0000 	mov.w	r0, #0
 8082d6c:	4770      	bx	lr
 8082d6e:	bf00      	nop

08082d70 <atexit>:
 8082d70:	2300      	movs	r3, #0
 8082d72:	4601      	mov	r1, r0
 8082d74:	461a      	mov	r2, r3
 8082d76:	4618      	mov	r0, r3
 8082d78:	f000 b842 	b.w	8082e00 <__register_exitproc>

08082d7c <memcpy>:
 8082d7c:	440a      	add	r2, r1
 8082d7e:	4291      	cmp	r1, r2
 8082d80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8082d84:	d100      	bne.n	8082d88 <memcpy+0xc>
 8082d86:	4770      	bx	lr
 8082d88:	b510      	push	{r4, lr}
 8082d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8082d8e:	4291      	cmp	r1, r2
 8082d90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8082d94:	d1f9      	bne.n	8082d8a <memcpy+0xe>
 8082d96:	bd10      	pop	{r4, pc}

08082d98 <memset>:
 8082d98:	4603      	mov	r3, r0
 8082d9a:	4402      	add	r2, r0
 8082d9c:	4293      	cmp	r3, r2
 8082d9e:	d100      	bne.n	8082da2 <memset+0xa>
 8082da0:	4770      	bx	lr
 8082da2:	f803 1b01 	strb.w	r1, [r3], #1
 8082da6:	e7f9      	b.n	8082d9c <memset+0x4>

08082da8 <srand>:
 8082da8:	b538      	push	{r3, r4, r5, lr}
 8082daa:	4b0d      	ldr	r3, [pc, #52]	; (8082de0 <srand+0x38>)
 8082dac:	4604      	mov	r4, r0
 8082dae:	681d      	ldr	r5, [r3, #0]
 8082db0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8082db2:	b97b      	cbnz	r3, 8082dd4 <srand+0x2c>
 8082db4:	2018      	movs	r0, #24
 8082db6:	f7fe f94b 	bl	8081050 <malloc>
 8082dba:	4a0a      	ldr	r2, [pc, #40]	; (8082de4 <srand+0x3c>)
 8082dbc:	4b0a      	ldr	r3, [pc, #40]	; (8082de8 <srand+0x40>)
 8082dbe:	63a8      	str	r0, [r5, #56]	; 0x38
 8082dc0:	e9c0 2300 	strd	r2, r3, [r0]
 8082dc4:	4b09      	ldr	r3, [pc, #36]	; (8082dec <srand+0x44>)
 8082dc6:	2201      	movs	r2, #1
 8082dc8:	6083      	str	r3, [r0, #8]
 8082dca:	230b      	movs	r3, #11
 8082dcc:	8183      	strh	r3, [r0, #12]
 8082dce:	2300      	movs	r3, #0
 8082dd0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8082dd4:	2200      	movs	r2, #0
 8082dd6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8082dd8:	611c      	str	r4, [r3, #16]
 8082dda:	615a      	str	r2, [r3, #20]
 8082ddc:	bd38      	pop	{r3, r4, r5, pc}
 8082dde:	bf00      	nop
 8082de0:	20000038 	.word	0x20000038
 8082de4:	abcd330e 	.word	0xabcd330e
 8082de8:	e66d1234 	.word	0xe66d1234
 8082dec:	0005deec 	.word	0x0005deec

08082df0 <strlen>:
 8082df0:	4603      	mov	r3, r0
 8082df2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8082df6:	2a00      	cmp	r2, #0
 8082df8:	d1fb      	bne.n	8082df2 <strlen+0x2>
 8082dfa:	1a18      	subs	r0, r3, r0
 8082dfc:	3801      	subs	r0, #1
 8082dfe:	4770      	bx	lr

08082e00 <__register_exitproc>:
 8082e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8082e04:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8082ec4 <__register_exitproc+0xc4>
 8082e08:	4606      	mov	r6, r0
 8082e0a:	f8d8 0000 	ldr.w	r0, [r8]
 8082e0e:	461f      	mov	r7, r3
 8082e10:	460d      	mov	r5, r1
 8082e12:	4691      	mov	r9, r2
 8082e14:	f000 f858 	bl	8082ec8 <__retarget_lock_acquire_recursive>
 8082e18:	4b26      	ldr	r3, [pc, #152]	; (8082eb4 <__register_exitproc+0xb4>)
 8082e1a:	681c      	ldr	r4, [r3, #0]
 8082e1c:	b934      	cbnz	r4, 8082e2c <__register_exitproc+0x2c>
 8082e1e:	4c26      	ldr	r4, [pc, #152]	; (8082eb8 <__register_exitproc+0xb8>)
 8082e20:	601c      	str	r4, [r3, #0]
 8082e22:	4b26      	ldr	r3, [pc, #152]	; (8082ebc <__register_exitproc+0xbc>)
 8082e24:	b113      	cbz	r3, 8082e2c <__register_exitproc+0x2c>
 8082e26:	681b      	ldr	r3, [r3, #0]
 8082e28:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8082e2c:	6863      	ldr	r3, [r4, #4]
 8082e2e:	2b1f      	cmp	r3, #31
 8082e30:	dd07      	ble.n	8082e42 <__register_exitproc+0x42>
 8082e32:	f8d8 0000 	ldr.w	r0, [r8]
 8082e36:	f000 f849 	bl	8082ecc <__retarget_lock_release_recursive>
 8082e3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8082e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8082e42:	b35e      	cbz	r6, 8082e9c <__register_exitproc+0x9c>
 8082e44:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8082e48:	b988      	cbnz	r0, 8082e6e <__register_exitproc+0x6e>
 8082e4a:	4b1d      	ldr	r3, [pc, #116]	; (8082ec0 <__register_exitproc+0xc0>)
 8082e4c:	b923      	cbnz	r3, 8082e58 <__register_exitproc+0x58>
 8082e4e:	f8d8 0000 	ldr.w	r0, [r8]
 8082e52:	f000 f83a 	bl	8082eca <__retarget_lock_release>
 8082e56:	e7f0      	b.n	8082e3a <__register_exitproc+0x3a>
 8082e58:	f44f 7084 	mov.w	r0, #264	; 0x108
 8082e5c:	f7fe f8f8 	bl	8081050 <malloc>
 8082e60:	2800      	cmp	r0, #0
 8082e62:	d0f4      	beq.n	8082e4e <__register_exitproc+0x4e>
 8082e64:	2300      	movs	r3, #0
 8082e66:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8082e6a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8082e6e:	2201      	movs	r2, #1
 8082e70:	6863      	ldr	r3, [r4, #4]
 8082e72:	2e02      	cmp	r6, #2
 8082e74:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8082e78:	fa02 f203 	lsl.w	r2, r2, r3
 8082e7c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8082e80:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8082e84:	ea43 0302 	orr.w	r3, r3, r2
 8082e88:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8082e8c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8082e90:	bf02      	ittt	eq
 8082e92:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8082e96:	431a      	orreq	r2, r3
 8082e98:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8082e9c:	6863      	ldr	r3, [r4, #4]
 8082e9e:	f8d8 0000 	ldr.w	r0, [r8]
 8082ea2:	1c5a      	adds	r2, r3, #1
 8082ea4:	3302      	adds	r3, #2
 8082ea6:	6062      	str	r2, [r4, #4]
 8082ea8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8082eac:	f000 f80e 	bl	8082ecc <__retarget_lock_release_recursive>
 8082eb0:	2000      	movs	r0, #0
 8082eb2:	e7c4      	b.n	8082e3e <__register_exitproc+0x3e>
 8082eb4:	200006e4 	.word	0x200006e4
 8082eb8:	20000658 	.word	0x20000658
 8082ebc:	00000000 	.word	0x00000000
 8082ec0:	08081051 	.word	0x08081051
 8082ec4:	2000009c 	.word	0x2000009c

08082ec8 <__retarget_lock_acquire_recursive>:
 8082ec8:	4770      	bx	lr

08082eca <__retarget_lock_release>:
 8082eca:	4770      	bx	lr

08082ecc <__retarget_lock_release_recursive>:
 8082ecc:	4770      	bx	lr

08082ece <link_code_end>:
	...

08082ed0 <dynalib_user>:
 8082ed0:	0021 0808 0061 0808 0089 0808 008d 0808     !...a...........
 8082ee0:	0000 0000                                   ....

08082ee4 <_ZTV12AccelStepper>:
	...
 8082eec:	0889 0808 08b9 0808 0779 0808 06b5 0808     ........y.......
 8082efc:	0803 0808 07bb 0808 081d 0808 083f 0808     ............?...
 8082f0c:	0867 0808 06f5 0808 073f 0808               g.......?...

08082f18 <_ZTVN5spark12NetworkClassE>:
	...
 8082f20:	1091 0808 109b 0808 10a5 0808 10af 0808     ................
 8082f30:	10b9 0808 10c5 0808 10d1 0808 10d9 0808     ................
 8082f40:	10e1 0808 10ed 0808 10f5 0808 10ff 0808     ................
 8082f50:	1109 0808                                   ....

08082f54 <_ZTV11USARTSerial>:
	...
 8082f5c:	1183 0808 11ed 0808 11c9 0808 17b5 0808     ................
 8082f6c:	1199 0808 11b5 0808 11a7 0808 11c3 0808     ................
 8082f7c:	1185 0808 118b 0808                         ........

08082f84 <_ZTV7TwoWire>:
	...
 8082f8c:	1271 0808 12bb 0808 1293 0808 1273 0808     q...........s...
 8082f9c:	129b 0808 12a3 0808 12ab 0808 12b3 0808     ................

08082fac <_ZTV9USBSerial>:
	...
 8082fb4:	12f3 0808 1359 0808 1331 0808 17b5 0808     ....Y...1.......
 8082fc4:	1323 0808 12f5 0808 1305 0808 1353 0808     #...........S...
 8082fd4:	1315 0808 12ed 0808                         ........

08082fdc <_ZTV9IPAddress>:
	...
 8082fe4:	1489 0808 1479 0808 147b 0808               ....y...{...

08082ff0 <_ZTVN5spark13CellularClassE>:
	...
 8082ff8:	174b 0808 1741 0808 1737 0808 16b1 0808     K...A...7.......
 8083008:	172b 0808 171f 0808 10d1 0808 10d9 0808     +...............
 8083018:	1713 0808 170b 0808 1701 0808 16f7 0808     ................
 8083028:	16bb 0808 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
 8083038:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
 8083048:	7061 0070                                   app.

0808304c <_ZSt7nothrow>:
 808304c:	0000 0000 7173 7472                          ....sqrt.

08083055 <link_const_variable_data_end>:
 8083055:	00          	.byte	0x00
	...

08083058 <link_constructors_location>:
 8083058:	08080661 	.word	0x08080661
 808305c:	08081151 	.word	0x08081151
 8083060:	08081755 	.word	0x08081755
 8083064:	08081785 	.word	0x08081785
 8083068:	08081791 	.word	0x08081791
 808306c:	080817a5 	.word	0x080817a5
 8083070:	08081841 	.word	0x08081841
 8083074:	080819dd 	.word	0x080819dd

08083078 <link_constructors_end>:
	...
